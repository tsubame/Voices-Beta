export declare const logLevelTypes: readonly ["disable", "error", "warn", "info", "debug"];
export declare type LogLevel = (typeof logLevelTypes)[number];
export declare type LogFormat = 'object' | 'string';
/**@internal */
export declare class Logger {
    readonly prefix: string;
    static level: LogLevel;
    static format: LogFormat;
    static readonly id: string;
    static onLog: (props: {
        level: string;
        timestamp: string;
        message: any[];
        id: string;
    }) => void;
    /**@internal */
    constructor(prefix: string);
    debug: (...msg: any[]) => number;
    info: (...msg: any[]) => number;
    warn: (...msg: any[]) => void;
    error: (...msg: any[]) => void;
    elapsed: (timestamp: number, ...msg: any[]) => void;
    private _log;
    createBlock(info: object): {
        warn: (...msg: any[]) => void;
        debug: (...msg: any[]) => void;
        info: (...msg: any[]) => void;
        error: (...msg: any[]) => void;
    };
}
//# sourceMappingURL=logger.d.ts.map