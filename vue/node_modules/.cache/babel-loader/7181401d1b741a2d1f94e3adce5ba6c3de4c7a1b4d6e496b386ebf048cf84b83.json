{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { CONSTANTS } from \"../../consts/ConstantVals.js\";\nimport { useCookies } from \"vue3-cookies\";\n// API URL 番組一覧取得\nconst API_FETCH_URL = 'http://localhost:3000/api/programs/';\n\n/**\n * エクスポート\n */\nexport default {\n  data: () => ({\n    categories: ['声劇', \"雑談\"],\n    drawer: null,\n    links: [['mdi-inbox-arrow-down', 'Inbox'], ['mdi-send', 'Send'], ['mdi-delete', 'Trash'], ['mdi-alert-octagon', 'Spam']],\n    ex11: ['red', 'indigo', 'orange', 'primary', 'secondary', 'success', 'info', 'warning', 'error', 'red-darken-3', 'indigo-darken-3', 'orange-darken-3'],\n    // ユーザID ランダム生成\n    randomUserId: 0,\n    // 番組一覧\n    programs: [],\n    myTwitterUserInfo: {\n      ID: \"\"\n    },\n    dialog: false\n  }),\n  setup: function () {\n    const {\n      cookies\n    } = useCookies();\n    return {\n      cookies\n    };\n  },\n  mounted: function () {\n    // ユーザIDをランダムでセット\n    this.setRandomSessionId();\n\n    // 番組一覧をGoのAPIからセット\n    this.getProgramsFromGoAPI();\n    // リダイレクトされたURLパラメータからTwitterユーザIDなどをセット\n    //this.setTwitterMyInfosFromURLParam()\n    // Twitterユーザ情報のセット\n    //this.setMyTwitterUserInfo()\n  },\n\n  methods: {\n    /**\n     * リダイレクトされたURLパラメータからTwitterユーザIDなどをセット\n     */\n    setTwitterMyInfosFromURLParam() {\n      const id = this.$route.query.id;\n      const name = this.$route.query.name;\n      const screenName = this.$route.query.screen_name;\n      const profImageUrl = this.$route.query.profile_image_url;\n      console.log(\"URLパラメータ ID:\" + id);\n      if (typeof id === 'undefined') {\n        console.log(\"id未定義\");\n      }\n      if (typeof id !== 'undefined') {\n        this.setCookie(CONSTANTS.COOKIE_KEY_TWITTER_ID, id);\n        this.setCookie(CONSTANTS.COOKIE_KEY_TWITTER_NAME, name);\n        this.setCookie(CONSTANTS.COOKIE_KEY_TWITTER_SCREEN_NAME, screenName);\n        this.setCookie(CONSTANTS.COOKIE_KEY_TWITTER_PROFILE_IMAGE_URL, profImageUrl);\n        console.log(\"TwitterIDをCookieにセット:\" + id);\n      }\n    },\n    /**\n     * ユーザIDをランダムでセット\n     */\n    setRandomSessionId() {\n      const v = this.getCookie(CONSTANTS.COOKIE_KEY_RANDOM_USER_ID);\n      console.log(\"ランダムユーザID Cookie取得\" + v);\n      if (v === null) {\n        // セッションIDを乱数でセット\n        this.randomUserId = Math.floor(Math.random() * 100000);\n        console.log(\"ランダムユーザID生成\" + v);\n        this.setCookie(CONSTANTS.COOKIE_KEY_RANDOM_USER_ID, this.randomUserId);\n      }\n    },\n    /**\n     * Cookieの値を返す\n     * \n     * @param  key \n     */\n    getCookie(key) {\n      const v = this.cookies.get(key);\n      if (v === undefined) {\n        return \"\";\n      }\n      return v;\n    },\n    /**\n     * Cookieに値をセット\n     * \n     * @param {} key \n     * @param {*} val \n     */\n    setCookie(key, val) {\n      this.cookies.set(key, val);\n    },\n    /**\n     * 番組一覧をGoのAPIからセット\n     */\n    getProgramsFromGoAPI() {\n      axios.get(API_FETCH_URL).then(response => {\n        this.programs = response.data;\n\n        // 番号をセット\n        let i = 1;\n        this.programs.forEach(pg => {\n          pg.n = i;\n          i++;\n        });\n        console.log(this.programs);\n        console.log(this.programs.length);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    /**\n     * 番組ページに移動\n     * \n     * @param  id \n     */\n    goToDetail(id) {\n      this.$router.push(`/programs/live/${id}`);\n    },\n    /**\n     * 自分のTwitterユーザ情報をセット\n     */\n    setMyTwitterUserInfo() {\n      // IDをCookieからセット\n      let id = this.getCookie(CONSTANTS.COOKIE_KEY_TWITTER_ID);\n      let name = this.getCookie(CONSTANTS.COOKIE_KEY_TWITTER_NAME);\n      let screenName = this.getCookie(CONSTANTS.COOKIE_KEY_TWITTER_SCREEN_NAME);\n      let profileImageUrl = this.getCookie(CONSTANTS.COOKIE_KEY_TWITTER_PROFILE_IMAGE_URL);\n      let d = {\n        id: id,\n        name: name,\n        screenName: screenName,\n        profileImageUrl: profileImageUrl\n      };\n      this.$store.commit(\"setTwitterUser\", d);\n      console.log(\"Cookie内のTwitterID:\" + id);\n      console.log(\"Store内のTwitterID:\" + this.$store.getters.getTwitterUser.id);\n      console.log(this.$store.getters.getCount);\n\n      // 空ならリダイレクト\n      if (id == null) {\n        console.log(\"id未セットのためリダイレクト対象\");\n\n        // リダイレクト\n        const apiURL = CONSTANTS.API_URL_GO_TWITTER_AUTH + window.location.href;\n        console.log(apiURL);\n        window.location.href = apiURL;\n      } else {\n        console.log(\"Cookie内のTwitterID:\" + id);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","CONSTANTS","useCookies","API_FETCH_URL","data","categories","drawer","links","ex11","randomUserId","programs","myTwitterUserInfo","ID","dialog","setup","cookies","mounted","setRandomSessionId","getProgramsFromGoAPI","methods","setTwitterMyInfosFromURLParam","id","$route","query","name","screenName","screen_name","profImageUrl","profile_image_url","console","log","setCookie","COOKIE_KEY_TWITTER_ID","COOKIE_KEY_TWITTER_NAME","COOKIE_KEY_TWITTER_SCREEN_NAME","COOKIE_KEY_TWITTER_PROFILE_IMAGE_URL","v","getCookie","COOKIE_KEY_RANDOM_USER_ID","Math","floor","random","key","get","undefined","val","set","then","response","i","forEach","pg","n","length","catch","error","goToDetail","$router","push","setMyTwitterUserInfo","profileImageUrl","d","$store","commit","getters","getTwitterUser","getCount","apiURL","API_URL_GO_TWITTER_AUTH","window","location","href"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/views/programs/ProgramIndexView.vue"],"sourcesContent":["<template>\n    <v-main>\n      <v-container class=\"py-8 px-6\" fluid>\n        <v-row justify=\"center\">\n          <v-dialog\n            v-model=\"dialog\"\n            persistent\n            width=\"1024\"\n          >\n          <template v-slot:activator=\"{ props }\">\n            <v-btn v-bind=\"props\" rounded>\n                <v-icon>mdi-home-edit</v-icon>&nbsp;部屋を作る\n              </v-btn>    \n          </template>\n          <v-card>\n            <v-card-title>\n              <span class=\"text-h5\"></span>\n            </v-card-title>\n            <v-card-text>\n              <v-container>\n                <v-row>\n                  <v-col\n                    cols=\"12\"\n                    sm=\"6\"\n                    md=\"4\"\n                  >\n                  <v-select\n                    :items=\"categories\"\n                    label=\"配信カテゴリ\"\n                    required\n                  ></v-select>\n                  </v-col>\n                  <v-col\n                    cols=\"12\"\n                    sm=\"6\"\n                    md=\"4\"\n                  >\n                  </v-col>\n                  <v-col cols=\"12\">\n                    <v-text-field\n                      label=\"配信タイトル\"\n                      required\n                    ></v-text-field>\n                  </v-col>                  \n                  <v-col\n                    cols=\"12\"\n                    sm=\"6\"\n                    md=\"4\"\n                  >\n                  <v-switch\n                    v-model=\"ex11\"\n                    label=\"マルチ募集\"\n                    color=\"info\"\n                    value=\"info\"\n                    hide-details\n                  ></v-switch>\n                  </v-col>                  \n                  <v-col\n                    cols=\"12\"\n                    sm=\"6\"\n                  >\n                    <v-select\n                      :items=\"['0-17', '18-29', '30-54', '54+']\"\n                      label=\"BGM\"\n                      required\n                    ></v-select>\n                  </v-col>\n                </v-row>\n              </v-container>\n            </v-card-text>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn\n                color=\"blue-darken-1\"\n                variant=\"text\"\n                @click=\"dialog = false\"\n              >\n                キャンセル\n              </v-btn>\n              <v-btn\n                color=\"blue-darken-1\"\n                variant=\"text\"\n                @click=\"dialog = false\"\n              >\n              <v-icon>mdi-home-edit</v-icon>          \n                配信開始\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n\n        </v-row>        \n        <v-row justify=center>\n          <!-- カテゴリ -->\n          <v-col v-for=\"category in categories\" :key=\"category\" cols=\"10\">\n            <v-card>\n              <v-list lines=\"two\">\n                <v-list-subheader>{{ category }}</v-list-subheader>\n\n                <!-- リスト -->\n                <template v-for=\"program in programs\" :key=\"program.Title\" >\n                  <v-list-item @click=\"goToDetail(program.ID)\">\n                    <!-- アイコン -->\n                    <template v-slot:prepend>\n                      <v-avatar color=\"grey-darken-1\"></v-avatar>\n                    </template>\n\n                    <v-list-item-title>{{ program.Title }}</v-list-item-title>\n\n                    <v-list-item-subtitle>\n                      {{ program.Category }}\n                    </v-list-item-subtitle>\n                  </v-list-item>\n\n                  <!-- 区切り線 -->\n                  <v-divider v-if=\"program.n !== programs.length\" :key=\"`divider-`\" inset></v-divider>\n                </template>\n\n              </v-list>\n            </v-card>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-main>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { CONSTANTS } from \"../../consts/ConstantVals.js\"\nimport { useCookies } from \"vue3-cookies\";\n// API URL 番組一覧取得\nconst API_FETCH_URL = 'http://localhost:3000/api/programs/';\n\n/**\n * エクスポート\n */\nexport default {\n  data: () => ({\n    categories: ['声劇', \"雑談\"],\n    drawer: null,\n    links: [\n      ['mdi-inbox-arrow-down', 'Inbox'],\n      ['mdi-send', 'Send'],\n      ['mdi-delete', 'Trash'],\n      ['mdi-alert-octagon', 'Spam'],\n    ],\n    ex11: ['red', 'indigo', 'orange', 'primary', 'secondary', 'success', 'info', 'warning', 'error', 'red-darken-3', 'indigo-darken-3', 'orange-darken-3'],    \n    // ユーザID ランダム生成\n    randomUserId: 0,    \n    // 番組一覧\n    programs: [], \n    myTwitterUserInfo: {\n      ID: \"\"\n    },\n    dialog: false,\n  }),\n  setup: function() {\n    const { cookies } = useCookies();\n\n    return { cookies };\n  },\n  mounted : function(){\n    // ユーザIDをランダムでセット\n    this.setRandomSessionId()\n\n    // 番組一覧をGoのAPIからセット\n    this.getProgramsFromGoAPI()\n    // リダイレクトされたURLパラメータからTwitterユーザIDなどをセット\n    //this.setTwitterMyInfosFromURLParam()\n    // Twitterユーザ情報のセット\n    //this.setMyTwitterUserInfo()\n  },\n  methods : {\n    /**\n     * リダイレクトされたURLパラメータからTwitterユーザIDなどをセット\n     */\n    setTwitterMyInfosFromURLParam() {\n      const id = this.$route.query.id\n      const name = this.$route.query.name\n      const screenName = this.$route.query.screen_name\n      const profImageUrl = this.$route.query.profile_image_url\n      console.log(\"URLパラメータ ID:\" + id)\n      if (typeof id === 'undefined') {\n        console.log(\"id未定義\")\n      }\n\n      if (typeof id !== 'undefined') {\n        this.setCookie(CONSTANTS.COOKIE_KEY_TWITTER_ID, id)\n        this.setCookie(CONSTANTS.COOKIE_KEY_TWITTER_NAME, name)\n        this.setCookie(CONSTANTS.COOKIE_KEY_TWITTER_SCREEN_NAME, screenName)\n        this.setCookie(CONSTANTS.COOKIE_KEY_TWITTER_PROFILE_IMAGE_URL, profImageUrl)     \n        \n        console.log(\"TwitterIDをCookieにセット:\" + id)\n      }\n    },\n    /**\n     * ユーザIDをランダムでセット\n     */\n    setRandomSessionId() {\n      const v = this.getCookie(CONSTANTS.COOKIE_KEY_RANDOM_USER_ID)\n      console.log(\"ランダムユーザID Cookie取得\" + v)\n\n      if (v === null) {\n        // セッションIDを乱数でセット\n        this.randomUserId = Math.floor(Math.random() * 100000)\n        console.log(\"ランダムユーザID生成\" + v)\n\n        this.setCookie(CONSTANTS.COOKIE_KEY_RANDOM_USER_ID, this.randomUserId)\n      }\n    },\n    /**\n     * Cookieの値を返す\n     * \n     * @param  key \n     */\n    getCookie(key){\n      const v = this.cookies.get(key);\n      if (v === undefined) {\n        return \"\"\n      }\n\n      return v\n    },\n    /**\n     * Cookieに値をセット\n     * \n     * @param {} key \n     * @param {*} val \n     */\n    setCookie(key, val){\n      this.cookies.set(key, val);\n    },\n    /**\n     * 番組一覧をGoのAPIからセット\n     */\n    getProgramsFromGoAPI() {\n      axios\n      .get(API_FETCH_URL)\n      .then(response => {\n        this.programs = response.data;\n\n        // 番号をセット\n        let i = 1\n        this.programs.forEach(pg => {\n          pg.n = i\n          i++\n        })\n\n        console.log(this.programs)\n        console.log(this.programs.length)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n    },\n    /**\n     * 番組ページに移動\n     * \n     * @param  id \n     */\n    goToDetail(id) {\n      this.$router.push(`/programs/live/${id}`);\n    },\n    /**\n     * 自分のTwitterユーザ情報をセット\n     */\n    setMyTwitterUserInfo() {\n      // IDをCookieからセット\n      let id = this.getCookie(CONSTANTS.COOKIE_KEY_TWITTER_ID)\n      let name = this.getCookie(CONSTANTS.COOKIE_KEY_TWITTER_NAME)\n      let screenName = this.getCookie(CONSTANTS.COOKIE_KEY_TWITTER_SCREEN_NAME)\n      let profileImageUrl = this.getCookie(CONSTANTS.COOKIE_KEY_TWITTER_PROFILE_IMAGE_URL)\n\n      let d = {\n        id: id,\n        name: name,\n        screenName: screenName,\n        profileImageUrl: profileImageUrl\n      }\n\n      this.$store.commit(\"setTwitterUser\", d)\n\n      console.log(\"Cookie内のTwitterID:\" + id)\n      console.log(\"Store内のTwitterID:\" + this.$store.getters.getTwitterUser.id)\n      console.log(this.$store.getters.getCount)\n\n      // 空ならリダイレクト\n      if (id == null) {\n        console.log(\"id未セットのためリダイレクト対象\")\n\n        // リダイレクト\n        const apiURL = CONSTANTS.API_URL_GO_TWITTER_AUTH + window.location.href\n        console.log(apiURL)\n        window.location.href = apiURL\n      } else {\n        console.log(\"Cookie内のTwitterID:\" + id)\n      }      \n    }\n  }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}