{"ast":null,"code":"//======================================================\n//\n// AppModalLoginDialog.vue ゲストユーザ用ログインダイアログ\n//\n// [索引]\n//  □ 0. setup\n//  □ 1. watch\n//  □ 2. method\n//    ・2-1. アイコン画像クリック\n//    ・2-2. OKボタンクリック\n//\n//======================================================\n\n//import { CONSTANTS } from '../../consts/ConstantVals'\n\n// アイコンの選択肢の数\nconst SHOW_ICON_COUNT = 7;\n\n/**\n * export\n */\nexport default {\n  // props\n  props: ['showDialog'],\n  // data\n  data() {\n    return {\n      // 画像\n      images: this.$store.getters.getGuestUserIcons,\n      // アクティブな画像のインデックス\n      activeIndex: this.getRandomInt(SHOW_ICON_COUNT),\n      // バリデーション\n      nameRules: [v => !!v || 'uesr name is required'],\n      name: \"\",\n      userIdStr: \"\",\n      profileImageUrl: \"\",\n      isShowingDialog: this.showDialog\n    };\n  },\n  //======================================================\n  //\n  // 0. setup\n  //\n  //======================================================\n\n  // setup\n  setup() {\n    try {\n      //this.$store.dispatch(\"todo/addTodoAsync\", { title: \"New Todo\" });\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  //======================================================\n  //\n  // 2. methods\n  //\n  //======================================================\n\n  methods: {\n    //======================================================\n    //\n    // 2-1. アイコン画像クリック\n    //\n    //======================================================\n\n    /**\n     * アイコン画像クリック\n     *   ・アクティブなインデックスをセット\n     */\n    selectIcon(index) {\n      this.activeIndex = index;\n    },\n    //======================================================\n    //\n    // 2-2. OKボタンクリック\n    //\n    //======================================================\n\n    /**\n     * OKボタンクリック\n     *   ・ユーザデータをstoreにセット\n     */\n    onOKButtonClick() {\n      try {\n        // ユーザ名が空なら終了\n        if (this.name === \"\") {\n          return;\n        }\n        // ランダムなユーザIDをセット\n        let n = this.getRandomInt(1000000);\n        this.userIdStr = String(n);\n\n        // ユーザデータをセット\n        const ud = {\n          id: n,\n          idStr: this.userIdStr,\n          name: this.name,\n          profileImageUrl: this.images[this.activeIndex]\n        };\n\n        // storeにデータをセット\n        this.$store.commit(\"setTargetUserData\", ud);\n      } catch (error) {\n        console.error(error);\n      }\n\n      // ダイアログを閉じる\n      this.isShowingDialog = false;\n    },\n    /**\n     * ランダムな値を返す\n     * @param {*} max \n     */\n    getRandomInt(max) {\n      return Math.floor(Math.random() * max);\n    },\n    /**\n     * 画像ファイルを受け取ってrequireしたファイルパスを返す\n     */\n    getRequireImgPath(fName) {\n      let rfPath = fName;\n      try {\n        rfPath = require('@/assets/img/' + fName);\n      } catch (error) {\n        console.error(error);\n      }\n      return rfPath;\n    }\n  }\n};","map":{"version":3,"names":["SHOW_ICON_COUNT","props","data","images","$store","getters","getGuestUserIcons","activeIndex","getRandomInt","nameRules","v","name","userIdStr","profileImageUrl","isShowingDialog","showDialog","setup","error","console","methods","selectIcon","index","onOKButtonClick","n","String","ud","id","idStr","commit","max","Math","floor","random","getRequireImgPath","fName","rfPath","require"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/components/App/AppModalLoginDialog.vue"],"sourcesContent":["<!--\n//======================================================\n//\n// AppModalLoginDialog.vue ゲストユーザログインダイアログ用コンポーネント\n//\n//======================================================\n-->\n\n<template>\n  <v-dialog\n      v-model=\"isShowingDialog\"\n      ref=\"modalLoginDialog\"\n      persistent\n      width=\"600\"\n    >\n    <v-form>    \n      <v-card>\n        <v-card-title>\n          <span class=\"text-h6\">ユーザ情報の設定</span>\n        </v-card-title>\n        <v-card-text>\n          <v-container>      \n            <v-row>\n              <small>ユーザ名：</small>\n            </v-row>\n            <v-row>\n              <v-col cols=\"12\" sm=\"6\" md=\"4\"> \n                <v-text-field\n                  label=\"ユーザ名\"\n                  v-model=\"name\"                  \n                  :rules=\"nameRules\"                \n                  required\n                ></v-text-field>             \n              </v-col>\n            </v-row>\n            <v-row>\n              <small>アイコンを選択：</small>\n            </v-row>\n            <v-row>\n              <div class = \"icon_area\" v-for=\"(src, index) in images\" :key=\"index\">  \n                <v-img :src=\"src\" class = \"icon\" :class=\"{ 'active': activeIndex === index }\" @click=\"selectIcon(index)\"/>   \n              </div>\n            </v-row>\n          </v-container>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn\n            color=\"blue-darken-1\"\n            variant=\"elevated\"\n            @click=\"onOKButtonClick\"\n          >\n            OK\n          </v-btn>\n          <v-spacer></v-spacer>        \n        </v-card-actions>\n      </v-card>\n    </v-form>         \n  </v-dialog>     \n</template>\n\n<!--\n//======================================================\n//\n// Script\n//\n//======================================================\n-->\n\n<script>\n\n//======================================================\n//\n// AppModalLoginDialog.vue ゲストユーザ用ログインダイアログ\n//\n// [索引]\n//  □ 0. setup\n//  □ 1. watch\n//  □ 2. method\n//    ・2-1. アイコン画像クリック\n//    ・2-2. OKボタンクリック\n//\n//======================================================\n\n//import { CONSTANTS } from '../../consts/ConstantVals'\n\n// アイコンの選択肢の数\nconst SHOW_ICON_COUNT = 7\n\n/**\n * export\n */\nexport default {  \n\n  // props\n  props: ['showDialog'],\n\n  // data\n  data() {\n    return {\n      // 画像\n      images: this.$store.getters.getGuestUserIcons,\n      // アクティブな画像のインデックス\n      activeIndex: this.getRandomInt(SHOW_ICON_COUNT),\n      // バリデーション\n      nameRules: [\n          v => !!v || 'uesr name is required'\n      ],\n      name: \"\",\n      userIdStr: \"\",\n      profileImageUrl: \"\",      \n      isShowingDialog: this.showDialog,\n    }\n  },\n\n  //======================================================\n  //\n  // 0. setup\n  //\n  //======================================================\n\n  // setup\n  setup() {\n    try {      \n      //this.$store.dispatch(\"todo/addTodoAsync\", { title: \"New Todo\" });\n    } catch (error) {        \n      console.error(error);      \n    }\n  },\n\n  //======================================================\n  //\n  // 2. methods\n  //\n  //======================================================\n\n  methods: {\n\n    //======================================================\n    //\n    // 2-1. アイコン画像クリック\n    //\n    //======================================================\n\n    /**\n     * アイコン画像クリック\n     *   ・アクティブなインデックスをセット\n     */\n    selectIcon(index) {\n      this.activeIndex = index\n    },\n\n    //======================================================\n    //\n    // 2-2. OKボタンクリック\n    //\n    //======================================================\n\n    /**\n     * OKボタンクリック\n     *   ・ユーザデータをstoreにセット\n     */\n    onOKButtonClick() {\n      try {\n        // ユーザ名が空なら終了\n        if (this.name === \"\") {\n          return\n        }\n        // ランダムなユーザIDをセット\n        let n = this.getRandomInt(1000000)\n        this.userIdStr = String(n)\n\n        // ユーザデータをセット\n        const ud = {\n          id: n,\n          idStr: this.userIdStr,\n          name: this.name,\n          profileImageUrl: this.images[this.activeIndex],\n        }\n\n        // storeにデータをセット\n        this.$store.commit(\"setTargetUserData\", ud)\n      } catch (error) {\n        console.error(error);\n      }\n\n      // ダイアログを閉じる\n      this.isShowingDialog = false\n    },\n\n    /**\n     * ランダムな値を返す\n     * @param {*} max \n     */\n    getRandomInt(max) {\n      return Math.floor(Math.random() * max) \n    },\n\n    /**\n     * 画像ファイルを受け取ってrequireしたファイルパスを返す\n     */\n    getRequireImgPath(fName) {\n      let rfPath = fName\n\n      try {\n        rfPath = require('@/assets/img/' + fName)\n      } catch (error) {\n        console.error(error);\n      }\n\n      return rfPath;\n    }\n  }\n}\n</script>\n\n<!-- \n//======================================================\n//\n//  CSS\n//\n//======================================================\n-->\n<style>\n.icon {\n  width: 50px;\n  height: 50px;  \n  border-radius: 50%;\n}\n.active {\n  background: rgb(0,0,0, 0.1);\n}\n</style>\n\n"],"mappings":"AAuEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,MAAMA,eAAc,GAAI;;AAExB;;;AAGA,eAAe;EAEb;EACAC,KAAK,EAAE,CAAC,YAAY,CAAC;EAErB;EACAC,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,MAAM,EAAE,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,iBAAiB;MAC7C;MACAC,WAAW,EAAE,IAAI,CAACC,YAAY,CAACR,eAAe,CAAC;MAC/C;MACAS,SAAS,EAAE,CACPC,CAAA,IAAK,CAAC,CAACA,CAAA,IAAK,uBAAsB,CACrC;MACDC,IAAI,EAAE,EAAE;MACRC,SAAS,EAAE,EAAE;MACbC,eAAe,EAAE,EAAE;MACnBC,eAAe,EAAE,IAAI,CAACC;IACxB;EACF,CAAC;EAED;EACA;EACA;EACA;EACA;;EAEA;EACAC,KAAKA,CAAA,EAAG;IACN,IAAI;MACF;IAAA,CACF,CAAE,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED;EACA;EACA;EACA;EACA;;EAEAE,OAAO,EAAE;IAEP;IACA;IACA;IACA;IACA;;IAEA;;;;IAIAC,UAAUA,CAACC,KAAK,EAAE;MAChB,IAAI,CAACd,WAAU,GAAIc,KAAI;IACzB,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;;;;IAIAC,eAAeA,CAAA,EAAG;MAChB,IAAI;QACF;QACA,IAAI,IAAI,CAACX,IAAG,KAAM,EAAE,EAAE;UACpB;QACF;QACA;QACA,IAAIY,CAAA,GAAI,IAAI,CAACf,YAAY,CAAC,OAAO;QACjC,IAAI,CAACI,SAAQ,GAAIY,MAAM,CAACD,CAAC;;QAEzB;QACA,MAAME,EAAC,GAAI;UACTC,EAAE,EAAEH,CAAC;UACLI,KAAK,EAAE,IAAI,CAACf,SAAS;UACrBD,IAAI,EAAE,IAAI,CAACA,IAAI;UACfE,eAAe,EAAE,IAAI,CAACV,MAAM,CAAC,IAAI,CAACI,WAAW;QAC/C;;QAEA;QACA,IAAI,CAACH,MAAM,CAACwB,MAAM,CAAC,mBAAmB,EAAEH,EAAE;MAC5C,EAAE,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;;MAEA;MACA,IAAI,CAACH,eAAc,GAAI,KAAI;IAC7B,CAAC;IAED;;;;IAIAN,YAAYA,CAACqB,GAAG,EAAE;MAChB,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAIH,GAAG;IACvC,CAAC;IAED;;;IAGAI,iBAAiBA,CAACC,KAAK,EAAE;MACvB,IAAIC,MAAK,GAAID,KAAI;MAEjB,IAAI;QACFC,MAAK,GAAIC,OAAO,CAAC,eAAc,GAAIF,KAAK;MAC1C,EAAE,OAAOjB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;MAEA,OAAOkB,MAAM;IACf;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}