{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// 定数\nimport { CONSTANTS } from \"../../consts/ConstantVals.js\";\n// Chat\nimport RoomChatItem from '../../components/Room/RoomChatItem.vue';\n// Footer\nimport RoomFooter from \"@/components/Room/RoomFooter.vue\";\n// FireBase操作用\nimport { addChatDataToDB, watchTargetRoomChats, watchTargetRoomListnerDatas, addListnerDataToDB, initAuthAnonymous, removeTargetListnerDataFromDB } from '../../utils/FirebaseManager';\n// Go API操作用\nimport { getTargetIdRoomData } from '../../utils/GoAPIManager';\n// Skyway\nimport { joinToRoom, subscribeRoomAudio, publishMyAudio, unpublishMyAudio, leaveFromRoom, mute, unmute } from '@/utils/SkywayManager';\n// Agora\nimport { publishMyAudioByAgora, subscribeRoomAudioByAgora, unpublishMyAudioByAgora, leaveFromRoomByAgora, muteByAgora, unmuteByAgora } from '@/utils/AgoraManager';\n\n//======================================================\n//\n// RoomDetailVue 配信部屋画面\n//\n// [索引]\n//  □ 0. setup\n//  □ 1. computed\n//  □ 2. watch\n//  □ 3. methods\n//\n//======================================================\n\n/**\n * export\n */\nexport default {\n  // components\n  components: {\n    RoomChatItem,\n    RoomFooter\n  },\n  // data\n  data() {\n    return {\n      // 部屋ID\n      targetRoomId: 0,\n      // 部屋データ\n      targetRoomData: {\n        id: 0,\n        title: '',\n        ownerUserId: 0,\n        ownerUserName: \"\",\n        thumImageUrl: '',\n        bgImageUrl: '',\n        bgmUrl: '',\n        category: '',\n        description: '',\n        webRtcService: '',\n        startedAt: new Date()\n      },\n      // 対象の部屋内の自リスナーデータ \n      roomMyListnerData: {\n        roomId: 0,\n        userId: 0,\n        userName: \"\",\n        profileImageUrl: \"\",\n        roomJoinedAt: new Date(),\n        isCallRequesting: false,\n        isInCall: false\n      },\n      // 残り時間\n      remainingTime: 60,\n      // 自リスナーデータのキー\n      myListnerFbKey: \"\",\n      // 対象の部屋内の全ユーザデータ\n      roomListnerDatas: [],\n      // ユーザ情報\n      targetUserData: {},\n      // 部屋主か\n      isRoomOwner: false,\n      // チャットデータ（単体）\n      targetChatData: {\n        roomId: 0,\n        userId: 0,\n        userName: \"\",\n        profileImageUrl: \"\",\n        text: \"\",\n        createdAt: null\n      },\n      // BGMボリューム\n      bgmVolume: 0.03,\n      // チャットデータ（配列）\n      chatDatas: [],\n      // publish中か\n      isPublishing: false,\n      // ミュート中か\n      isMuting: false,\n      // ダイアログ表示\n      showInitDialog: false,\n      // ダイアログのメッセージ\n      dialogTxt: \"通話に参加するには、画面右上の「通話に参加」ボタンを押して下さい。\",\n      // audio要素\n      audioElement: null\n    };\n  },\n  //======================================================\n  //\n  // 0. mounted\n  //\n  //======================================================\n\n  mounted: async function () {\n    try {\n      // URLパラメータからRoomIDをセット\n      this.targetRoomId = this.$route.params.roomId;\n      // DBから部屋データをセット\n      this.targetRoomData = await getTargetIdRoomData(this.targetRoomId);\n      console.log(\"[部屋データ取得]\");\n      console.log(this.targetRoomData);\n\n      // 匿名認証実行\n      await initAuthAnonymous();\n      // FireBaseのchatsテーブル監視\n      this.watchFireBaseChats();\n      // FireBaseのroom_listenersテーブル監視\n      await this.watchFireBaseRoomListnerDatas();\n      // ユーザデータをセット\n      this.targetUserData = this.$store.getters.getTargetUserData;\n      console.log(\"[ユーザデータ取得]\");\n      console.log(this.targetUserData);\n      console.log(\"[接続手段]\");\n      console.log(this.targetRoomData.webRtcService);\n\n      // Skywayの場合、Skywayの部屋に入る\n      if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n        await joinToRoom(this.targetRoomId, this.targetUserData.id);\n        // agoraの場合、ダイアログを表示\n      } else {\n        this.showInitDialog = true;\n      }\n\n      // subscribe（skyway）  \n      if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n        await subscribeRoomAudio();\n        // subscribe（agora）\n      } else {\n        console.log(\"agora\");\n        await subscribeRoomAudioByAgora(this.audioElement, this.targetRoomId, this.targetUserData.id);\n      }\n\n      // 同一なら部屋主として認定\n      if (this.targetRoomData.ownerUserId === this.targetUserData.id) {\n        console.log(\"[配信者として入室]\" + this.targetRoomData.ownerUserId + \" \" + this.targetUserData.id);\n        this.isRoomOwner = true;\n\n        // 配信開始（Skyway）\n        if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n          await publishMyAudio();\n          // 配信開始（Agora）\n        } else {\n          await publishMyAudioByAgora();\n        }\n        this.isPublishing = true;\n      }\n\n      // リスナーデータを登録\n      this.insertRoomMyListnerDataToFireBase();\n      // タイマー描画\n      this.drawClock();\n      // BGM再生\n      this.playBGM();\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  //======================================================\n  // \n  // 1. computed\n  //\n  //======================================================\n\n  computed: {\n    getRemainMinutes() {\n      return Math.floor(this.remainingTime / 60); // 分の計算\n    },\n\n    getRemainSeconds() {\n      let sec = this.remainingTime % 60; // 秒の計算\n\n      return sec.toString().padStart(2, '0');\n    }\n  },\n  //======================================================\n  // \n  // 2. watch\n  //\n  //======================================================\n\n  /**\n   * watch\n   *  \n   */\n  watch: {\n    /**\n     * ユーザデータ変更時\n     * \n     * @param {} newValue \n     */\n    '$store.getters.getTargetUserData': function (newValue) {\n      try {\n        console.log(newValue);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    /**\n     * ミュート状態変更時\n     */\n    '$store.getters.getIsMuting': function (newValue) {\n      try {\n        console.log(\"[ミュート状態]\" + newValue);\n\n        // ミュート中なら\n        if (newValue) {\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            mute();\n          } else {\n            muteByAgora();\n          }\n        } else {\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            unmute();\n          } else {\n            unmuteByAgora();\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    /**\n     * BGM再生状態変更時\n     */\n    '$store.getters.getIsBgmPlaying': function (newValue) {\n      try {\n        console.log(\"[BGM再生状態]\" + newValue);\n        console.log(this.audioElement);\n\n        // 停止\n        if (newValue === true) {\n          this.$nextTick(() => {\n            this.audioElement.play();\n            console.log(\"[BGM再生]\");\n          });\n        } else {\n          this.$nextTick(() => {\n            this.audioElement.pause();\n            console.log(\"[BGM停止]\");\n          });\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    /**\n     * チャットアイテム変更時\n     * \n     * @param {*} newValue \n     */\n    chatDatas(newValue) {\n      try {\n        // 下部にスクロール\n        this.scrollToBottomAtChatArea();\n        console.log(\"[チャット更新]\" + newValue.length + \"件\");\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  },\n  //======================================================\n  //\n  // 3. methods\n  //\n  //======================================================\n\n  methods: {\n    //======================================================\n    //\n    // 3-1. FireBaseのChatデータ監視\n    //\n    //======================================================\n\n    /**\n     * FireBaseのChatデータ監視\n     */\n    watchFireBaseChats() {\n      try {\n        // コールバック定義\n        const callback = vals => {\n          this.chatDatas = vals;\n          console.log(this.chatDatas.length + '件のチャット');\n        };\n\n        // FireBaseを監視\n        watchTargetRoomChats(this.targetRoomId, callback);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-2. FireBaseのRoomListnerデータ監視\n    //\n    //======================================================\n\n    /**\n     * FireBaseのRoomUserデータ監視\n     */\n    async watchFireBaseRoomListnerDatas() {\n      try {\n        // コールバック定義\n        const callback = vals => {\n          this.roomListnerDatas = vals;\n          console.log(this.roomListnerDatas.length + '件のListner');\n        };\n\n        // FireBaseを監視\n        await watchTargetRoomListnerDatas(this.targetRoomId, callback);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-3. FireBaseにRoomListnerデータを登録\n    //\n    //======================================================\n\n    /**\n     * FireBaseにRoomListnerデータを登録\n     */\n    async insertRoomMyListnerDataToFireBase() {\n      try {\n        this.roomMyListnerData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          roomJoinedAt: new Date().toLocaleString(),\n          isCallRequesting: false,\n          isInCall: false\n        };\n\n        //console.log(this.roomMyListnerData)\n\n        // 登録\n        this.myListnerFbKey = await addListnerDataToDB(this.targetRoomId, this.roomMyListnerData);\n        console.log(\"[Firebase Listnerデータ登録] \" + this.myListnerFbKey);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-4. チャット欄下部にスクロール\n    //\n    //======================================================\n\n    /**\n     * チャット欄下部にスクロール\n     */\n    scrollToBottomAtChatArea() {\n      try {\n        this.$nextTick(() => {\n          window.scrollTo(0, document.body.clientHeight);\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-5. タイマー作成\n    //\n    //======================================================\n\n    /**\n     * タイマー作成\n     */\n    drawClock() {\n      const INTERVAL_MSEC = 1000;\n      try {\n        console.log(this.targetRoomData.startedAt);\n        const startDate = new Date(this.targetRoomData.startedAt);\n        console.log(\"[開始日時]\" + startDate);\n        const currentTime = new Date(); // 現在時刻をDateオブジェクトとして取得\n\n        // 過ぎた時間\n        const leftSec = Math.floor((currentTime - startDate) / 1000);\n        this.remainingTime = CONSTANTS.ROOM_VALID_PERIOD_MIN * 60 - leftSec;\n        console.log(\"[残り秒数]\" + this.remainingTime);\n\n        // タイマーの開始\n        this.timer = setInterval(() => {\n          if (0 < this.remainingTime) {\n            this.remainingTime--;\n          } else {\n            clearInterval(this.timer); // タイマー停止\n          }\n        }, INTERVAL_MSEC); // 1秒ごとに処理を実行\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-6. BGM再生\n    //\n    //======================================================\n\n    /**\n     * BGM再生\n     */\n    playBGM() {\n      try {\n        if (this.targetRoomData.bgmUrl === \"\") {\n          return;\n        }\n        this.$nextTick(() => {\n          this.audioElement = new Audio(this.targetRoomData.bgmUrl);\n          this.audioElement.volume = this.bgmVolume;\n          this.audioElement.loop = true;\n          this.audioElement.play();\n          console.log(\"[BGM再生開始]\");\n          console.log(this.audioElement);\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-7. 通話に参加ボタン押下\n    //\n    //======================================================\n\n    /**\n     * 通話に参加ボタン押下\n     */\n    async onPublishButtonClick() {\n      try {\n        if (confirm('通話に参加します。よろしいですか？')) {\n          if (this.isPublishing) {\n            return;\n          }\n\n          // 配信開始（Skyway）\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            await publishMyAudio();\n            await subscribeRoomAudio();\n            // 配信開始（Agora）\n          } else {\n            await publishMyAudioByAgora();\n            await subscribeRoomAudioByAgora();\n          }\n          this.isPublishing = true;\n\n          // チャット送信\n          this.sendChat(this.targetUserData.name + \"が通話に参加しました。\");\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    // チャット送信\n    //======================================================\n\n    /**\n     * チャット送信\n     */\n    async sendChat(txt) {\n      try {\n        // データをセット\n        let targetChatData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          text: txt,\n          createdAt: new Date()\n        };\n        console.log(\"[チャットデータ登録]\");\n        console.log(targetChatData);\n\n        // データ登録\n        addChatDataToDB(targetChatData.roomId, targetChatData);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-8. 通話を切断ボタン押下\n    //\n    //======================================================\n\n    /**\n     * 通話を切断ボタン押下\n     */\n    async onUnpublishButtonClick() {\n      try {\n        if (confirm('通話から退出します。よろしいですか？')) {\n          // 配信停止（Skyway）\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            await unpublishMyAudio();\n            // 配信停止（Agora）\n          } else {\n            await unpublishMyAudioByAgora();\n          }\n          this.isPublishing = false;\n\n          // チャット送信\n          this.sendChat(this.targetUserData.name + \"が通話から退出しました。\");\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-10. 退室ボタン押下\n    //\n    //======================================================\n\n    /**\n     * 退室ボタン押下\n     * \n     * @param {*} to \n     * @param {*} from \n     * @param {*} next \n     */\n    async onCloseBoxClick(to, from, next) {\n      try {\n        if (confirm('本当にページを離れますか？')) {\n          // skyway退室\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            await leaveFromRoom(this.targetRoomId);\n            // agora退室\n          } else {\n            await leaveFromRoomByAgora(this.targetRoomId);\n          }\n          this.$router.push('/rooms');\n        } else {\n          next(false);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-11. 部屋から退室\n    //\n    //======================================================\n\n    /**\n     * 部屋から退室\n     * ・skywayのRoomから退室\n     * ・FirebaseのLisnerデータを削除\n     * \n     * @param {*} to \n     * @param {*} from \n     * @param {*} next \n     */\n    async beforeLeave(to, from, next) {\n      try {\n        // skyway退室\n        if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n          await leaveFromRoom(this.targetRoomId);\n          // agora退室\n        } else {\n          await leaveFromRoomByAgora(this.targetRoomId);\n        }\n\n        // firebaseのlistnerキー削除\n        await removeTargetListnerDataFromDB(this.targetRoomId, this.myListnerFbKey);\n\n        // BGM停止\n        this.stopBGM();\n        next();\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    // BGM停止\n    //======================================================\n\n    /**\n     * BGM停止\n     */\n    stopBGM() {\n      try {\n        // BGM削除\n        this.audioElement.pause();\n        this.audioElement = null;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // サンプル\n    //\n    //======================================================\n\n    sample() {\n      //joinToRoom()\n      //subscribeRoomAudio\n      //publishMyAudioByAgora\n      //subscribeRoomAudioByAgora\n    }\n  },\n  //======================================================\n  // サイトから離れる\n  //======================================================\n\n  /**\n   * サイトから離れる\n   * \n   * @param {*} to \n   * @param {*} from \n   * @param {*} next \n   */\n  beforeRouteLeave(to, from, next) {\n    try {\n      this.beforeLeave(to, from, next);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n};","map":{"version":3,"names":["CONSTANTS","RoomChatItem","RoomFooter","addChatDataToDB","watchTargetRoomChats","watchTargetRoomListnerDatas","addListnerDataToDB","initAuthAnonymous","removeTargetListnerDataFromDB","getTargetIdRoomData","joinToRoom","subscribeRoomAudio","publishMyAudio","unpublishMyAudio","leaveFromRoom","mute","unmute","publishMyAudioByAgora","subscribeRoomAudioByAgora","unpublishMyAudioByAgora","leaveFromRoomByAgora","muteByAgora","unmuteByAgora","components","data","targetRoomId","targetRoomData","id","title","ownerUserId","ownerUserName","thumImageUrl","bgImageUrl","bgmUrl","category","description","webRtcService","startedAt","Date","roomMyListnerData","roomId","userId","userName","profileImageUrl","roomJoinedAt","isCallRequesting","isInCall","remainingTime","myListnerFbKey","roomListnerDatas","targetUserData","isRoomOwner","targetChatData","text","createdAt","bgmVolume","chatDatas","isPublishing","isMuting","showInitDialog","dialogTxt","audioElement","mounted","$route","params","console","log","watchFireBaseChats","watchFireBaseRoomListnerDatas","$store","getters","getTargetUserData","WEB_RTC_SERVICE_SKYWAY","insertRoomMyListnerDataToFireBase","drawClock","playBGM","error","computed","getRemainMinutes","Math","floor","getRemainSeconds","sec","toString","padStart","watch","$store.getters.getTargetUserData","newValue","$store.getters.getIsMuting","$store.getters.getIsBgmPlaying","$nextTick","play","pause","scrollToBottomAtChatArea","length","methods","callback","vals","name","toLocaleString","window","scrollTo","document","body","clientHeight","INTERVAL_MSEC","startDate","currentTime","leftSec","ROOM_VALID_PERIOD_MIN","timer","setInterval","clearInterval","Audio","volume","loop","onPublishButtonClick","confirm","sendChat","txt","onUnpublishButtonClick","onCloseBoxClick","to","from","next","$router","push","beforeLeave","stopBGM","sample","beforeRouteLeave"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/views/rooms/RoomDetailView.vue"],"sourcesContent":["<template>\n  <v-container id = \"roomContainer\">      \n    <header id=\"roomHeader\">\n      <v-app-bar\n        id=\"roomHeaderArea\"\n        class=\"px-3\"\n        color=\"grey-lighten-4\"\n        flat    \n        app   \n      >   \n\n      <v-container>\n        <v-row class=\"justify-space-between\">\n          <v-col cols=\"8\">    \n            <div class=\"ma-2\" id=\"rightHeaderLeftArea\">   \n              <v-img :src=\"targetRoomData.thumImageUrl\" id=\"roomOwnerImage\" width=\"50\" />\n              <span id=\"roomTitle\">{{ targetRoomData.title }}</span>\n              <div id=\"roomOwnerName\">\n                {{ targetRoomData.ownerUserName }}\n                <v-badge id=\"roomOwnerBadge\" class=\"smallText\" color=\"pink\" inline v-show=\"isRoomOwner\">\n                  <template #badge>\n                    <span class=\"smallText\">配信者画面</span>\n                  </template>\n                </v-badge>  \n              </div>                \n            </div>\n          </v-col>\n          <v-col cols=\"4\">\n            <v-btn icon=\"mdi-close\" variant=\"tonal\" class=\"closeBox\" rounded size=\"x-small\" @click=\"onCloseBoxClick\" >\n            </v-btn>         \n          </v-col>\n        </v-row>\n        <v-row align=\"center\">\n          <v-col cols=\"4\">\n            <div class=\"chip-container\">  \n              <v-chip class=\"ma-2\" size=\"x-small\">\n                <v-icon color=\"success\">mdi-account</v-icon>&nbsp;{{ roomListnerDatas.length }}人&nbsp;&nbsp;&nbsp;\n              </v-chip>       \n                <v-icon color=\"grey\">mdi-clock</v-icon>&nbsp;{{ getRemainMinutes }}:{{ getRemainSeconds }}\n            </div>            \n            <!--\n            <v-row no-gutters>\n              <div class=\"image-container\">\n                <v-img :src=\"targetRoomData.thumImageUrl\" aspect-ratio=\"1\" class=\"multiCastUserImage\"/>\n                <v-img :src=\"targetRoomData.thumImageUrl\" width=\"25\" class=\"multiCastUserImage\" />\n              </div>\n            </v-row>    \n            -->\n          </v-col>\n          <v-col cols=\"5\">     \n\n          </v-col>\n          <v-col cols=\"3\">\n            <v-btn elevation=\"1\" @click=\"onPublishButtonClick\" v-show=\"!isPublishing\" class=\"smallText callButton\" rounded>\n              <v-icon color=\"success\">mdi-phone</v-icon>&nbsp;通話に参加\n            </v-btn>              \n            <v-btn elevation=\"1\" @click=\"onUnpublishButtonClick\" v-show=\"isPublishing\" class=\"smallText callButton\" rounded>\n              <v-icon color=\"red\">mdi-phone-off</v-icon>&nbsp;通話を切断\n            </v-btn>    \n          </v-col>\n        </v-row>\n      </v-container>\n      <!--\n        <v-row align=\"center\" justify=\"center\">\n          <v-col cols=\"12\">\n            <v-row class=\"justify-space-between\">\n              <v-col>\n                <v-row>\n                  <v-col cols=\"auto\">    \n                    <v-img :src=\"targetRoomData.thumImageUrl\" id=\"roomOwnerImage\" width=\"50\" />\n                  </v-col>  \n                  <v-col cols=\"auto\" class=\"nameArea\">\n                    {{ targetRoomData.ownerUserName }}\n                    <v-badge color=\"pink\" content=\"配信者画面\" inline v-show=\"isRoomOwner\"></v-badge>       \n                  </v-col>    \n                </v-row>\n              </v-col>\n              <v-col cols=\"6\" class=\"text-right headerTopRightArea\">\n                <v-btn icon @click=\"closeBox\">\n                  <v-icon>mdi-close</v-icon>\n                </v-btn>\n              </v-col>                        \n            </v-row>\n            <v-row class=\"text-right\">\n              <v-col cols=\"4\">\n              </v-col>\n              <v-col cols=\"8\">\n                <v-icon color=\"success\">mdi-account</v-icon>&nbsp;{{ roomListnerDatas.length }}人&nbsp;&nbsp;&nbsp;\n                <v-icon color=\"grey\">mdi-clock</v-icon>&nbsp;{{ getRemainMinutes }}:{{ getRemainSeconds }}\n                <v-btn elevation=\"1\" @click=\"onPublishButtonClick\" v-show=\"!isPublishing\" class=\"text\">\n                  <v-icon color=\"success\">mdi-phone</v-icon>&nbsp;通話に参加\n                </v-btn>              \n                <v-btn elevation=\"1\" @click=\"onUnpublishButtonClick\" v-show=\"isPublishing\" class=\"text\">\n                  <v-icon color=\"red\">mdi-phone-off</v-icon>&nbsp;通話を切断\n                </v-btn>    \n              </v-col>              \n            </v-row>\n          </v-col>\n        </v-row>\n      -->\n      </v-app-bar>     \n    </header>\n  \n    <v-main id=\"roomMainArea\">   \n      <!-- チャット欄-->\n      <v-row>\n        <v-col cols=\"12\" id=\"chatArea\" ref=\"chatArea\">                      \n          <section v-for=\"chat in chatDatas\" :key=\"chat.text\" class=\"item\">  \n            <RoomChatItem :chat=\"chat\" />\n          </section>               \n        </v-col>\n\n        <!-- リモートメディアエリア -->\n        <div ref = \"remoteMediaArea\"></div>\n      </v-row>\n    </v-main>  \n\n    <RoomFooter :targetRoomId=\"targetRoomId\" :isPublishing=\"isPublishing\" />\n\n    <!-- ダイアログ -->\n    <v-dialog v-model=\"showInitDialog\" activator=\"parent\" width=\"auto\">\n        <v-card>\n          <v-card-text>\n            {{ dialogTxt }}\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"primary\" block @click=\"showInitDialog = false\"\n              >OK</v-btn\n            >\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n  </v-container>\n</template>\n\n<!-- \n//======================================================\n//\n// Script \n//\n//======================================================\n-->\n<script>\n// 定数\nimport { CONSTANTS } from \"../../consts/ConstantVals.js\"\n// Chat\nimport RoomChatItem from '../../components/Room/RoomChatItem.vue'\n// Footer\nimport RoomFooter from \"@/components/Room/RoomFooter.vue\";\n// FireBase操作用\nimport { addChatDataToDB, watchTargetRoomChats, watchTargetRoomListnerDatas, addListnerDataToDB, initAuthAnonymous, removeTargetListnerDataFromDB } from '../../utils/FirebaseManager'\n// Go API操作用\nimport { getTargetIdRoomData } from '../../utils/GoAPIManager'\n// Skyway\nimport { joinToRoom, subscribeRoomAudio, publishMyAudio, unpublishMyAudio, leaveFromRoom, mute, unmute } from '@/utils/SkywayManager'\n// Agora\nimport { publishMyAudioByAgora, subscribeRoomAudioByAgora, unpublishMyAudioByAgora, leaveFromRoomByAgora, muteByAgora, unmuteByAgora } from '@/utils/AgoraManager';\n\n//======================================================\n//\n// RoomDetailVue 配信部屋画面\n//\n// [索引]\n//  □ 0. setup\n//  □ 1. computed\n//  □ 2. watch\n//  □ 3. methods\n//\n//======================================================\n\n/**\n * export\n */\nexport default {\n\n  // components\n  components: {\n    RoomChatItem,\n    RoomFooter,\n  },\n\n  // data\n  data() {\n    return {\n      // 部屋ID\n      targetRoomId: 0,\n      // 部屋データ\n      targetRoomData: {\n        id: 0,\n        title: '',\n        ownerUserId: 0,\n        ownerUserName: \"\",        \n        thumImageUrl: '',\n        bgImageUrl: '',\n        bgmUrl: '',\n        category: '',\n        description: '',\n        webRtcService: '',        \n        startedAt: new Date(),\n      },\n      // 対象の部屋内の自リスナーデータ \n      roomMyListnerData: {\n        roomId: 0,\n        userId: 0,\n        userName: \"\",\n        profileImageUrl: \"\",\n        roomJoinedAt: new Date(),\n        isCallRequesting: false,\n        isInCall: false,\n      },\n      // 残り時間\n      remainingTime: 60,\n      // 自リスナーデータのキー\n      myListnerFbKey: \"\",\n      // 対象の部屋内の全ユーザデータ\n      roomListnerDatas: [\n      ],\n      // ユーザ情報\n      targetUserData: {},  \n      // 部屋主か\n      isRoomOwner: false,\n      // チャットデータ（単体）\n      targetChatData: {\n        roomId: 0,\n        userId: 0,\n        userName: \"\",\n        profileImageUrl: \"\",\n        text: \"\",\n        createdAt: null,\n      },     \n      // BGMボリューム\n      bgmVolume: 0.03,\n      // チャットデータ（配列）\n      chatDatas: [],   \n      // publish中か\n      isPublishing: false,\n      // ミュート中か\n      isMuting: false,\n      // ダイアログ表示\n      showInitDialog: false,\n      // ダイアログのメッセージ\n      dialogTxt: \"通話に参加するには、画面右上の「通話に参加」ボタンを押して下さい。\",\n      // audio要素\n      audioElement: null,\n    }\n  },\n\n  //======================================================\n  //\n  // 0. mounted\n  //\n  //======================================================\n\n  mounted: async function() {\n    try {      \n      // URLパラメータからRoomIDをセット\n      this.targetRoomId = this.$route.params.roomId     \n      // DBから部屋データをセット\n      this.targetRoomData = await getTargetIdRoomData(this.targetRoomId)\n      console.log(\"[部屋データ取得]\")\n      console.log(this.targetRoomData)\n\n      // 匿名認証実行\n      await initAuthAnonymous()\n      // FireBaseのchatsテーブル監視\n      this.watchFireBaseChats()\n      // FireBaseのroom_listenersテーブル監視\n      await this.watchFireBaseRoomListnerDatas()\n      // ユーザデータをセット\n      this.targetUserData = this.$store.getters.getTargetUserData\n      console.log(\"[ユーザデータ取得]\")\n      console.log(this.targetUserData)\n\n      console.log(\"[接続手段]\")\n      console.log(this.targetRoomData.webRtcService)\n      \n      // Skywayの場合、Skywayの部屋に入る\n      if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n        await joinToRoom(this.targetRoomId,this.targetUserData.id)\n      // agoraの場合、ダイアログを表示\n      } else {\n        this.showInitDialog = true;\n      }\n\n      // subscribe（skyway）  \n      if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {      \n        await subscribeRoomAudio()\n      // subscribe（agora）\n      } else {\n        console.log(\"agora\")\n        await subscribeRoomAudioByAgora(this.audioElement, this.targetRoomId, this.targetUserData.id)\n      } \n\n      // 同一なら部屋主として認定\n      if (this.targetRoomData.ownerUserId === this.targetUserData.id) {\n        console.log(\"[配信者として入室]\" + this.targetRoomData.ownerUserId + \" \" + this.targetUserData.id)\n        this.isRoomOwner = true        \n\n        // 配信開始（Skyway）\n        if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n          await publishMyAudio();\n        // 配信開始（Agora）\n        } else {\n          await publishMyAudioByAgora()\n        }\n            \n        this.isPublishing = true\n      }\n\n      // リスナーデータを登録\n      this.insertRoomMyListnerDataToFireBase()\n      // タイマー描画\n      this.drawClock()\n      // BGM再生\n      this.playBGM()\n    } catch (error) {        \n      console.error(error);      \n    }\n  },\n\n  //======================================================\n  // \n  // 1. computed\n  //\n  //======================================================\n\n  computed: {\n    getRemainMinutes() {\n      return Math.floor(this.remainingTime / 60); // 分の計算\n    },\n    getRemainSeconds() {\n      let sec = this.remainingTime % 60; // 秒の計算\n\n      return sec.toString().padStart(2, '0');\n    }\n  },  \n\n  //======================================================\n  // \n  // 2. watch\n  //\n  //======================================================\n\n  /**\n   * watch\n   *  \n   */\n   watch: {\n    /**\n     * ユーザデータ変更時\n     * \n     * @param {} newValue \n     */\n    '$store.getters.getTargetUserData': function (newValue) {\n      try {\n        console.log(newValue)\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    /**\n     * ミュート状態変更時\n     */\n    '$store.getters.getIsMuting': function (newValue) {\n      try {        \n        console.log(\"[ミュート状態]\" + newValue)\n\n        // ミュート中なら\n        if (newValue) {\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {      \n            mute()\n          } else {\n            muteByAgora()\n          }            \n        } else {\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {      \n            unmute()\n          } else {\n            unmuteByAgora()\n          }   \n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    /**\n     * BGM再生状態変更時\n     */\n     '$store.getters.getIsBgmPlaying': function (newValue) {\n      try {        \n        console.log(\"[BGM再生状態]\" + newValue)\n\n        console.log(this.audioElement)\n\n        // 停止\n        if (newValue === true) {\n          this.$nextTick(() => {\n            this.audioElement.play();          \n            console.log(\"[BGM再生]\")\n          });\n        } else {\n          this.$nextTick(() => {\n            this.audioElement.pause();    \n            console.log(\"[BGM停止]\")      \n          });\n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },    \n\n    /**\n     * チャットアイテム変更時\n     * \n     * @param {*} newValue \n     */\n    chatDatas(newValue) {\n      try {      \n        // 下部にスクロール\n        this.scrollToBottomAtChatArea()\n\n        console.log(\"[チャット更新]\" + newValue.length + \"件\")\n      } catch (error) {        \n        console.error(error);      \n      }\n    }\n  },\n\n  //======================================================\n  //\n  // 3. methods\n  //\n  //======================================================\n\n  methods: {\n\n    //======================================================\n    //\n    // 3-1. FireBaseのChatデータ監視\n    //\n    //======================================================\n\n    /**\n     * FireBaseのChatデータ監視\n     */\n    watchFireBaseChats() {\n      try {      \n        // コールバック定義\n        const callback = (vals) => {\n          this.chatDatas = vals;\n\n          console.log(this.chatDatas.length + '件のチャット')\n        };\n\n        // FireBaseを監視\n        watchTargetRoomChats(this.targetRoomId, callback)\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-2. FireBaseのRoomListnerデータ監視\n    //\n    //======================================================\n\n    /**\n     * FireBaseのRoomUserデータ監視\n     */\n     async watchFireBaseRoomListnerDatas() {\n      try {      \n        // コールバック定義\n        const callback = (vals) => {\n          this.roomListnerDatas = vals;\n          console.log(this.roomListnerDatas.length + '件のListner')\n        };\n\n        // FireBaseを監視\n        await watchTargetRoomListnerDatas(this.targetRoomId, callback)\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-3. FireBaseにRoomListnerデータを登録\n    //\n    //======================================================\n\n    /**\n     * FireBaseにRoomListnerデータを登録\n     */\n    async insertRoomMyListnerDataToFireBase() {\n      try {      \n        this.roomMyListnerData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          roomJoinedAt: new Date().toLocaleString(),\n          isCallRequesting: false,\n          isInCall: false,\n        }\n\n        //console.log(this.roomMyListnerData)\n\n        // 登録\n        this.myListnerFbKey = await addListnerDataToDB(this.targetRoomId, this.roomMyListnerData)\n\n        console.log(\"[Firebase Listnerデータ登録] \" + this.myListnerFbKey)\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-4. チャット欄下部にスクロール\n    //\n    //======================================================\n\n    /**\n     * チャット欄下部にスクロール\n     */\n    scrollToBottomAtChatArea() {\n      try {      \n        this.$nextTick(() => {\n          window.scrollTo(0, document.body.clientHeight)\n        })\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-5. タイマー作成\n    //\n    //======================================================\n\n    /**\n     * タイマー作成\n     */\n    drawClock() {\n      const INTERVAL_MSEC = 1000;\n\n      try {      \n        console.log(this.targetRoomData.startedAt)\n        const startDate = new Date(this.targetRoomData.startedAt);\n        console.log(\"[開始日時]\" + startDate)\n\n        const currentTime = new Date(); // 現在時刻をDateオブジェクトとして取得\n\n        // 過ぎた時間\n        const leftSec = Math.floor((currentTime - startDate) / 1000)\n        this.remainingTime = CONSTANTS.ROOM_VALID_PERIOD_MIN * 60 - leftSec;\n        console.log(\"[残り秒数]\" + this.remainingTime)\n\n        // タイマーの開始\n        this.timer = setInterval(() => {\n          if (0 < this.remainingTime) {\n            this.remainingTime--;\n          } else {\n            clearInterval(this.timer); // タイマー停止\n          }\n        }, INTERVAL_MSEC); // 1秒ごとに処理を実行\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-6. BGM再生\n    //\n    //======================================================\n\n    /**\n     * BGM再生\n     */\n    playBGM() {\n      try {      \n        if (this.targetRoomData.bgmUrl === \"\") {\n          return;\n        }\n\n        this.$nextTick(() => {\n          this.audioElement = new Audio(this.targetRoomData.bgmUrl);\n          this.audioElement.volume = this.bgmVolume;             \n          this.audioElement.loop = true;\n          this.audioElement.play();\n\n          console.log(\"[BGM再生開始]\")\n          console.log(this.audioElement);\n        });\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-7. 通話に参加ボタン押下\n    //\n    //======================================================\n\n    /**\n     * 通話に参加ボタン押下\n     */\n    async onPublishButtonClick() {\n      try {      \n        if (confirm('通話に参加します。よろしいですか？')) {\n          if (this.isPublishing) {\n            return\n          }\n\n          // 配信開始（Skyway）\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            await publishMyAudio();\n            await subscribeRoomAudio();\n            // 配信開始（Agora）\n          } else {\n            await publishMyAudioByAgora()\n            await subscribeRoomAudioByAgora();\n          }\n\n          this.isPublishing = true\n\n          // チャット送信\n          this.sendChat(this.targetUserData.name + \"が通話に参加しました。\")\n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    // チャット送信\n    //======================================================\n\n    /**\n     * チャット送信\n     */\n    async sendChat(txt) {\n      try {\n        // データをセット\n        let targetChatData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          text: txt,\n          createdAt: new Date(),\n        }\n\n        console.log(\"[チャットデータ登録]\")\n        console.log(targetChatData)\n\n        // データ登録\n        addChatDataToDB(targetChatData.roomId, targetChatData)        \n      } catch (error) {\n        console.error(error);   \n      }\n    },\n\n    //======================================================\n    //\n    // 3-8. 通話を切断ボタン押下\n    //\n    //======================================================\n\n    /**\n     * 通話を切断ボタン押下\n     */\n     async onUnpublishButtonClick() {\n      try {      \n        if (confirm('通話から退出します。よろしいですか？')) {\n          // 配信停止（Skyway）\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {            \n            await unpublishMyAudio();\n          // 配信停止（Agora）\n          } else {\n            await unpublishMyAudioByAgora();\n          }\n\n          this.isPublishing = false\n\n          // チャット送信\n          this.sendChat(this.targetUserData.name + \"が通話から退出しました。\")          \n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },    \n\n    //======================================================\n    //\n    // 3-10. 退室ボタン押下\n    //\n    //======================================================\n\n    /**\n     * 退室ボタン押下\n     * \n     * @param {*} to \n     * @param {*} from \n     * @param {*} next \n     */    \n    async onCloseBoxClick(to, from, next) {\n      try {      \n        if (confirm('本当にページを離れますか？')) {\n          // skyway退室\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            await leaveFromRoom(this.targetRoomId);\n          // agora退室\n          } else {\n            await leaveFromRoomByAgora(this.targetRoomId)\n          }\n          \n          this.$router.push('/rooms');\n        } else {\n          next(false);\n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-11. 部屋から退室\n    //\n    //======================================================\n\n    /**\n     * 部屋から退室\n     * ・skywayのRoomから退室\n     * ・FirebaseのLisnerデータを削除\n     * \n     * @param {*} to \n     * @param {*} from \n     * @param {*} next \n     */\n    async beforeLeave(to, from, next) {\n      try {      \n          // skyway退室\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            await leaveFromRoom(this.targetRoomId);\n          // agora退室\n          } else {\n            await leaveFromRoomByAgora(this.targetRoomId)\n          }\n\n          // firebaseのlistnerキー削除\n          await removeTargetListnerDataFromDB(this.targetRoomId, this.myListnerFbKey)\n\n          // BGM停止\n          this.stopBGM()\n\n          next();\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    // BGM停止\n    //======================================================\n\n    /**\n     * BGM停止\n     */\n    stopBGM() {\n      try {\n        // BGM削除\n        this.audioElement.pause()\n        this.audioElement = null\n      } catch (error) {\n        console.error(error);      \n      }\n    },\n\n\n    //======================================================\n    //\n    // サンプル\n    //\n    //======================================================\n\n    sample() {\n      //joinToRoom()\n      //subscribeRoomAudio\n      //publishMyAudioByAgora\n      //subscribeRoomAudioByAgora\n    }    \n  },\n\n  //======================================================\n  // サイトから離れる\n  //======================================================\n\n  /**\n   * サイトから離れる\n   * \n   * @param {*} to \n   * @param {*} from \n   * @param {*} next \n   */\n  beforeRouteLeave(to, from, next) {\n    try {      \n      this.beforeLeave(to, from, next);\n    } catch (error) {        \n      console.error(error);      \n    }\n  },\n\n};\n\n</script>\n\n<!-- CSS-->\n<style>\n/* 部屋内のコンテナ */\n#roomContainer {\n  position: relative;\n  padding: 20px;\n  height: 100%;\n}\n\n#roomMainArea {\n  width: 100%;\n}\n\n/* 部屋上部のフッター */\n#roomHeaderArea {\n  height: 120px; \n  padding: 20px;\n  font-size: 70%;\n  background-color: rgba(0, 0, 0, 0.1); \n}\n.nameArea {\n  padding: 20px 0;\n}\n.rightHeaderArea {\n  padding: 40px 0 0;\n}\n.headerTopRightArea {\n  padding: 20px 0;\n}\n#rightHeaderLeftArea {\n  position: fixed;\n  top: 4px;\n  left: 24px;\n  height: 50px;\n  width: 40%;\n  /*background: #CCCCCC;*/\n  border-radius: 50px;\n}\n#roomOwnerImage {\n  position: fixed;\n  top: 12px;\n  left: 32px;\n  border: solid 1px #999999;\n  border-radius: 25px;\n  background: white;  \n}\n#roomTitle {\n  position: fixed;\n  top: 16px;\n  left: 92px;\n  border: solid 0px #999999;\n}\n#roomOwnerName {\n  position: fixed;\n  top: 36px;\n  left: 92px;\n  border: solid 0px #999999;\n}\n\n.multiCastUserImage {\n  width: 25px;\n  margin-right: 4px;\n  border: solid 1px #999999;  \n  border-radius: 50%;  \n}\n\n#chatArea {\n  width: 100%;\n  height: 60vh; \n  /*margin: 80px;*/\n  display: flex;\n  flex-direction: column-reverse;\n  overflow-y: scroll;\n  position: fixed;\n\tbottom: 60px;\n  /*background-color: rgba(0, 0, 0, 0.5); */\n  border: solid 0px #999999;\n}\n\n#commentTextBox {\n  background: white;\n  opacity: 1;\n  border-radius: 10px;\n}\n\n.fixed-bottom {\n  position: fixed;\n  margin: 40px;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 50px;\n  background-color: #6d6d6d;\n  text-align: center;\n  line-height: 50px;\n}\n\n.dark {\n  background: rgb(0,0,0, 0.5);\n}\n\n/* 閉じるボタン */\n.closeBox {\n  border: solid 0px #999999;\n  position: fixed;\n  top: 10px;\n  right: 10px;\n  border: solid 1px #CCCCCC;\n  color: #333333;\n}\n/* 通話に参加ボタン */\n.callButton {\n  border: solid 0px #999999;\n  position: fixed;\n  top: 60px;\n  right: 8px;\n  color: gray;\n  padding: 12px;\n}\n.image-container {\n  display: flex;\n  position: fixed;\n  top: 72px;\n  justify-content: flex-start; /* 左寄せ */\n  align-items: center; /* 垂直方向の中央揃え */\n  margin: 0 8px 0;\n}\n.chip-container {\n  display: flex;\n  position: fixed;\n  top: 66px;\n  justify-content: flex-start; /* 左寄せ */\n  align-items: center; /* 垂直方向の中央揃え */\n  margin: 0 8px 0;\n}\n.smallText {\n  font-size: 80%;\n}\n\n</style>\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}