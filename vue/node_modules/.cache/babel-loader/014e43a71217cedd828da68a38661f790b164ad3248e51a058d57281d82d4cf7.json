{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vShow as _vShow, withCtx as _withCtx, withDirectives as _withDirectives, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"roomHeader\"\n};\nconst _hoisted_2 = {\n  class: \"ma-2\",\n  id: \"rightHeaderLeftArea\"\n};\nconst _hoisted_3 = {\n  id: \"roomTitle\"\n};\nconst _hoisted_4 = {\n  id: \"roomOwnerName\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"smallText\"\n}, \"配信者画面\", -1 /* HOISTED */);\nconst _hoisted_6 = {\n  class: \"chip-container\"\n};\nconst _hoisted_7 = {\n  ref: \"remoteMediaArea\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_img = _resolveComponent(\"v-img\");\n  const _component_v_badge = _resolveComponent(\"v-badge\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_chip = _resolveComponent(\"v-chip\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_app_bar = _resolveComponent(\"v-app-bar\");\n  const _component_RoomChatItem = _resolveComponent(\"RoomChatItem\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  const _component_RoomFooter = _resolveComponent(\"RoomFooter\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card_actions = _resolveComponent(\"v-card-actions\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_dialog = _resolveComponent(\"v-dialog\");\n  return _openBlock(), _createBlock(_component_v_container, {\n    id: \"roomContainer\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"header\", _hoisted_1, [_createVNode(_component_v_app_bar, {\n      id: \"roomHeaderArea\",\n      class: \"px-3\",\n      color: \"grey-lighten-4\",\n      flat: \"\",\n      app: \"\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_container, null, {\n        default: _withCtx(() => [_createVNode(_component_v_row, {\n          class: \"justify-space-between\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"8\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_v_img, {\n              src: $data.targetRoomData.thumImageUrl,\n              id: \"roomOwnerImage\",\n              width: \"50\"\n            }, null, 8 /* PROPS */, [\"src\"]), _createElementVNode(\"span\", _hoisted_3, _toDisplayString($data.targetRoomData.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_4, [_createTextVNode(_toDisplayString($data.targetRoomData.ownerUserName) + \" \", 1 /* TEXT */), _withDirectives(_createVNode(_component_v_badge, {\n              id: \"roomOwnerBadge\",\n              class: \"smallText\",\n              color: \"pink\",\n              inline: \"\"\n            }, {\n              badge: _withCtx(() => [_hoisted_5]),\n              _: 1 /* STABLE */\n            }, 512 /* NEED_PATCH */), [[_vShow, $data.isRoomOwner]])])])]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_col, {\n            cols: \"4\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_btn, {\n              icon: \"mdi-close\",\n              variant: \"tonal\",\n              class: \"closeBox\",\n              rounded: \"\",\n              size: \"x-small\",\n              onClick: $options.onCloseBoxClick\n            }, null, 8 /* PROPS */, [\"onClick\"])]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, {\n          align: \"center\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_v_col, {\n            cols: \"4\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_v_chip, {\n              class: \"ma-2\",\n              size: \"x-small\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_icon, {\n                color: \"success\"\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"mdi-account\")]),\n                _: 1 /* STABLE */\n              }), _createTextVNode(\" \" + _toDisplayString($data.roomListnerDatas.length) + \"人    \", 1 /* TEXT */)]),\n\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_icon, {\n              color: \"grey\"\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"mdi-clock\")]),\n              _: 1 /* STABLE */\n            }), _createTextVNode(\" \" + _toDisplayString($options.getRemainMinutes) + \":\" + _toDisplayString($options.getRemainSeconds), 1 /* TEXT */)]), _createCommentVNode(\"\\n            <v-row no-gutters>\\n              <div class=\\\"image-container\\\">\\n                <v-img :src=\\\"targetRoomData.thumImageUrl\\\" aspect-ratio=\\\"1\\\" class=\\\"multiCastUserImage\\\"/>\\n                <v-img :src=\\\"targetRoomData.thumImageUrl\\\" width=\\\"25\\\" class=\\\"multiCastUserImage\\\" />\\n              </div>\\n            </v-row>    \\n            \")]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_col, {\n            cols: \"5\"\n          }), _createVNode(_component_v_col, {\n            cols: \"3\"\n          }, {\n            default: _withCtx(() => [_withDirectives(_createVNode(_component_v_btn, {\n              elevation: \"1\",\n              onClick: $options.onPublishButtonClick,\n              class: \"smallText callButton\",\n              rounded: \"\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_icon, {\n                color: \"success\"\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"mdi-phone\")]),\n                _: 1 /* STABLE */\n              }), _createTextVNode(\" 通話に参加 \")]),\n              _: 1 /* STABLE */\n            }, 8 /* PROPS */, [\"onClick\"]), [[_vShow, !$data.isPublishing]]), _withDirectives(_createVNode(_component_v_btn, {\n              elevation: \"1\",\n              onClick: $options.onUnpublishButtonClick,\n              class: \"smallText callButton\",\n              rounded: \"\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_icon, {\n                color: \"red\"\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"mdi-phone-off\")]),\n                _: 1 /* STABLE */\n              }), _createTextVNode(\" 通話を切断 \")]),\n              _: 1 /* STABLE */\n            }, 8 /* PROPS */, [\"onClick\"]), [[_vShow, $data.isPublishing]])]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      }), _createCommentVNode(\"\\n        <v-row align=\\\"center\\\" justify=\\\"center\\\">\\n          <v-col cols=\\\"12\\\">\\n            <v-row class=\\\"justify-space-between\\\">\\n              <v-col>\\n                <v-row>\\n                  <v-col cols=\\\"auto\\\">    \\n                    <v-img :src=\\\"targetRoomData.thumImageUrl\\\" id=\\\"roomOwnerImage\\\" width=\\\"50\\\" />\\n                  </v-col>  \\n                  <v-col cols=\\\"auto\\\" class=\\\"nameArea\\\">\\n                    {{ targetRoomData.ownerUserName }}\\n                    <v-badge color=\\\"pink\\\" content=\\\"配信者画面\\\" inline v-show=\\\"isRoomOwner\\\"></v-badge>       \\n                  </v-col>    \\n                </v-row>\\n              </v-col>\\n              <v-col cols=\\\"6\\\" class=\\\"text-right headerTopRightArea\\\">\\n                <v-btn icon @click=\\\"closeBox\\\">\\n                  <v-icon>mdi-close</v-icon>\\n                </v-btn>\\n              </v-col>                        \\n            </v-row>\\n            <v-row class=\\\"text-right\\\">\\n              <v-col cols=\\\"4\\\">\\n              </v-col>\\n              <v-col cols=\\\"8\\\">\\n                <v-icon color=\\\"success\\\">mdi-account</v-icon>&nbsp;{{ roomListnerDatas.length }}人&nbsp;&nbsp;&nbsp;\\n                <v-icon color=\\\"grey\\\">mdi-clock</v-icon>&nbsp;{{ getRemainMinutes }}:{{ getRemainSeconds }}\\n                <v-btn elevation=\\\"1\\\" @click=\\\"onPublishButtonClick\\\" v-show=\\\"!isPublishing\\\" class=\\\"text\\\">\\n                  <v-icon color=\\\"success\\\">mdi-phone</v-icon>&nbsp;通話に参加\\n                </v-btn>              \\n                <v-btn elevation=\\\"1\\\" @click=\\\"onUnpublishButtonClick\\\" v-show=\\\"isPublishing\\\" class=\\\"text\\\">\\n                  <v-icon color=\\\"red\\\">mdi-phone-off</v-icon>&nbsp;通話を切断\\n                </v-btn>    \\n              </v-col>              \\n            </v-row>\\n          </v-col>\\n        </v-row>\\n      \")]),\n      _: 1 /* STABLE */\n    })]), _createVNode(_component_v_main, {\n      id: \"roomMainArea\"\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\" チャット欄\"), _createVNode(_component_v_row, null, {\n        default: _withCtx(() => [_createVNode(_component_v_col, {\n          cols: \"12\",\n          id: \"chatArea\",\n          ref: \"chatArea\"\n        }, {\n          default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chatDatas, chat => {\n            return _openBlock(), _createElementBlock(\"section\", {\n              key: chat.text,\n              class: \"item\"\n            }, [_createVNode(_component_RoomChatItem, {\n              chat: chat\n            }, null, 8 /* PROPS */, [\"chat\"])]);\n          }), 128 /* KEYED_FRAGMENT */))]),\n\n          _: 1 /* STABLE */\n        }, 512 /* NEED_PATCH */), _createCommentVNode(\" リモートメディアエリア \"), _createElementVNode(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */)]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }), _createVNode(_component_RoomFooter, {\n      targetRoomId: $data.targetRoomId,\n      isPublishing: $data.isPublishing\n    }, null, 8 /* PROPS */, [\"targetRoomId\", \"isPublishing\"]), _createCommentVNode(\" ダイアログ \"), _createVNode(_component_v_dialog, {\n      modelValue: $data.showInitDialog,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.showInitDialog = $event),\n      activator: \"parent\",\n      width: \"auto\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_card, null, {\n        default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_createTextVNode(\" 通話に参加するには、画面右上の「通話に参加」ボタンを押して下さい。 \")]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_card_actions, null, {\n          default: _withCtx(() => [_createVNode(_component_v_btn, {\n            color: \"primary\",\n            block: \"\",\n            onClick: _cache[0] || (_cache[0] = $event => $data.showInitDialog = false)\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"OK\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["id","class","_createElementVNode","ref","_createBlock","_component_v_container","_hoisted_1","_createVNode","_component_v_app_bar","color","flat","app","_component_v_row","_component_v_col","cols","_hoisted_2","_component_v_img","src","$data","targetRoomData","thumImageUrl","width","_hoisted_3","_toDisplayString","title","_hoisted_4","ownerUserName","_component_v_badge","inline","badge","_withCtx","_hoisted_5","isRoomOwner","_component_v_btn","icon","variant","rounded","size","onClick","$options","onCloseBoxClick","align","_hoisted_6","_component_v_chip","_component_v_icon","roomListnerDatas","length","getRemainMinutes","getRemainSeconds","_createCommentVNode","elevation","onPublishButtonClick","isPublishing","onUnpublishButtonClick","_component_v_main","_createElementBlock","_Fragment","_renderList","chatDatas","chat","key","text","_component_RoomChatItem","_hoisted_7","_component_RoomFooter","targetRoomId","_component_v_dialog","showInitDialog","$event","activator","_component_v_card","_component_v_card_text","_component_v_card_actions","block","_cache"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/views/rooms/RoomDetailView.vue"],"sourcesContent":["<template>\n  <v-container id = \"roomContainer\">      \n    <header id=\"roomHeader\">\n      <v-app-bar\n        id=\"roomHeaderArea\"\n        class=\"px-3\"\n        color=\"grey-lighten-4\"\n        flat    \n        app   \n      >   \n\n      <v-container>\n        <v-row class=\"justify-space-between\">\n          <v-col cols=\"8\">    \n            <div class=\"ma-2\" id=\"rightHeaderLeftArea\">   \n              <v-img :src=\"targetRoomData.thumImageUrl\" id=\"roomOwnerImage\" width=\"50\" />\n              <span id=\"roomTitle\">{{ targetRoomData.title }}</span>\n              <div id=\"roomOwnerName\">\n                {{ targetRoomData.ownerUserName }}\n                <v-badge id=\"roomOwnerBadge\" class=\"smallText\" color=\"pink\" inline v-show=\"isRoomOwner\">\n                  <template #badge>\n                    <span class=\"smallText\">配信者画面</span>\n                  </template>\n                </v-badge>  \n              </div>                \n            </div>\n          </v-col>\n          <v-col cols=\"4\">\n            <v-btn icon=\"mdi-close\" variant=\"tonal\" class=\"closeBox\" rounded size=\"x-small\" @click=\"onCloseBoxClick\" >\n            </v-btn>         \n          </v-col>\n        </v-row>\n        <v-row align=\"center\">\n          <v-col cols=\"4\">\n            <div class=\"chip-container\">  \n              <v-chip class=\"ma-2\" size=\"x-small\">\n                <v-icon color=\"success\">mdi-account</v-icon>&nbsp;{{ roomListnerDatas.length }}人&nbsp;&nbsp;&nbsp;\n              </v-chip>       \n                <v-icon color=\"grey\">mdi-clock</v-icon>&nbsp;{{ getRemainMinutes }}:{{ getRemainSeconds }}\n            </div>            \n            <!--\n            <v-row no-gutters>\n              <div class=\"image-container\">\n                <v-img :src=\"targetRoomData.thumImageUrl\" aspect-ratio=\"1\" class=\"multiCastUserImage\"/>\n                <v-img :src=\"targetRoomData.thumImageUrl\" width=\"25\" class=\"multiCastUserImage\" />\n              </div>\n            </v-row>    \n            -->\n          </v-col>\n          <v-col cols=\"5\">     \n\n          </v-col>\n          <v-col cols=\"3\">\n            <v-btn elevation=\"1\" @click=\"onPublishButtonClick\" v-show=\"!isPublishing\" class=\"smallText callButton\" rounded>\n              <v-icon color=\"success\">mdi-phone</v-icon>&nbsp;通話に参加\n            </v-btn>              \n            <v-btn elevation=\"1\" @click=\"onUnpublishButtonClick\" v-show=\"isPublishing\" class=\"smallText callButton\" rounded>\n              <v-icon color=\"red\">mdi-phone-off</v-icon>&nbsp;通話を切断\n            </v-btn>    \n          </v-col>\n        </v-row>\n      </v-container>\n      <!--\n        <v-row align=\"center\" justify=\"center\">\n          <v-col cols=\"12\">\n            <v-row class=\"justify-space-between\">\n              <v-col>\n                <v-row>\n                  <v-col cols=\"auto\">    \n                    <v-img :src=\"targetRoomData.thumImageUrl\" id=\"roomOwnerImage\" width=\"50\" />\n                  </v-col>  \n                  <v-col cols=\"auto\" class=\"nameArea\">\n                    {{ targetRoomData.ownerUserName }}\n                    <v-badge color=\"pink\" content=\"配信者画面\" inline v-show=\"isRoomOwner\"></v-badge>       \n                  </v-col>    \n                </v-row>\n              </v-col>\n              <v-col cols=\"6\" class=\"text-right headerTopRightArea\">\n                <v-btn icon @click=\"closeBox\">\n                  <v-icon>mdi-close</v-icon>\n                </v-btn>\n              </v-col>                        \n            </v-row>\n            <v-row class=\"text-right\">\n              <v-col cols=\"4\">\n              </v-col>\n              <v-col cols=\"8\">\n                <v-icon color=\"success\">mdi-account</v-icon>&nbsp;{{ roomListnerDatas.length }}人&nbsp;&nbsp;&nbsp;\n                <v-icon color=\"grey\">mdi-clock</v-icon>&nbsp;{{ getRemainMinutes }}:{{ getRemainSeconds }}\n                <v-btn elevation=\"1\" @click=\"onPublishButtonClick\" v-show=\"!isPublishing\" class=\"text\">\n                  <v-icon color=\"success\">mdi-phone</v-icon>&nbsp;通話に参加\n                </v-btn>              \n                <v-btn elevation=\"1\" @click=\"onUnpublishButtonClick\" v-show=\"isPublishing\" class=\"text\">\n                  <v-icon color=\"red\">mdi-phone-off</v-icon>&nbsp;通話を切断\n                </v-btn>    \n              </v-col>              \n            </v-row>\n          </v-col>\n        </v-row>\n      -->\n      </v-app-bar>     \n    </header>\n  \n    <v-main id=\"roomMainArea\">   \n      <!-- チャット欄-->\n      <v-row>\n        <v-col cols=\"12\" id=\"chatArea\" ref=\"chatArea\">                      \n          <section v-for=\"chat in chatDatas\" :key=\"chat.text\" class=\"item\">  \n            <RoomChatItem :chat=\"chat\" />\n          </section>               \n        </v-col>\n\n        <!-- リモートメディアエリア -->\n        <div ref = \"remoteMediaArea\"></div>\n      </v-row>\n    </v-main>  \n\n    <RoomFooter :targetRoomId=\"targetRoomId\" :isPublishing=\"isPublishing\" />\n\n    <!-- ダイアログ -->\n    <v-dialog v-model=\"showInitDialog\" activator=\"parent\" width=\"auto\">\n        <v-card>\n          <v-card-text>\n            通話に参加するには、画面右上の「通話に参加」ボタンを押して下さい。\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"primary\" block @click=\"showInitDialog = false\"\n              >OK</v-btn\n            >\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n  </v-container>\n</template>\n\n<!-- \n//======================================================\n//\n// Script \n//\n//======================================================\n-->\n<script>\n// 定数\nimport { CONSTANTS } from \"../../consts/ConstantVals.js\"\n// Chat\nimport RoomChatItem from '../../components/Room/RoomChatItem.vue'\n// Footer\nimport RoomFooter from \"@/components/Room/RoomFooter.vue\";\n// FireBase操作用\nimport { addChatDataToDB, watchTargetRoomChats, watchTargetRoomListnerDatas, addListnerDataToDB, initAuthAnonymous, removeTargetListnerDataFromDB } from '../../utils/FirebaseManager'\n// Go API操作用\nimport { getTargetIdRoomData } from '../../utils/GoAPIManager'\n// Skyway\nimport { joinToRoom, subscribeRoomAudio, publishMyAudio, unpublishMyAudio, leaveFromRoom, mute, unmute } from '@/utils/SkywayManager'\n// Agora\nimport { publishMyAudioByAgora, subscribeRoomAudioByAgora, unpublishMyAudioByAgora, leaveFromRoomByAgora, muteByAgora, unmuteByAgora } from '@/utils/AgoraManager';\n\n//======================================================\n//\n// RoomDetailVue 配信部屋画面\n//\n// [索引]\n//  □ 0. setup\n//  □ 1. computed\n//  □ 2. watch\n//  □ 3. methods\n//\n//======================================================\n\n/**\n * export\n */\nexport default {\n\n  // components\n  components: {\n    RoomChatItem,\n    RoomFooter,\n  },\n\n  // data\n  data() {\n    return {\n      // 部屋ID\n      targetRoomId: 0,\n      // 部屋データ\n      targetRoomData: {\n        id: 0,\n        title: '',\n        ownerUserId: 0,\n        ownerUserName: \"\",        \n        thumImageUrl: '',\n        bgImageUrl: '',\n        bgmUrl: '',\n        category: '',\n        description: '',\n        webRtcService: '',        \n        startedAt: new Date(),\n      },\n      // 対象の部屋内の自リスナーデータ \n      roomMyListnerData: {\n        roomId: 0,\n        userId: 0,\n        userName: \"\",\n        profileImageUrl: \"\",\n        roomJoinedAt: new Date(),\n        isCallRequesting: false,\n        isInCall: false,\n      },\n      // 残り時間\n      remainingTime: 60,\n      // 自リスナーデータのキー\n      myListnerFbKey: \"\",\n      // 対象の部屋内の全ユーザデータ\n      roomListnerDatas: [\n      ],\n      // ユーザ情報\n      targetUserData: {},  \n      // 部屋主か\n      isRoomOwner: false,\n      // チャットデータ（単体）\n      targetChatData: {\n        roomId: 0,\n        userId: 0,\n        userName: \"\",\n        profileImageUrl: \"\",\n        text: \"\",\n        createdAt: null,\n      },     \n      // BGMボリューム\n      bgmVolume: 0.03,\n      // チャットデータ（配列）\n      chatDatas: [],   \n      // publish中か\n      isPublishing: false,\n      // ミュート中か\n      isMuting: false,\n      // ダイアログ表示\n      showInitDialog: true,\n      // audio要素\n      audioElement: null,\n    }\n  },\n\n  //======================================================\n  //\n  // 0. mounted\n  //\n  //======================================================\n\n  mounted: async function() {\n    try {      \n      // URLパラメータからRoomIDをセット\n      this.targetRoomId = this.$route.params.roomId     \n      // DBから部屋データをセット\n      this.targetRoomData = await getTargetIdRoomData(this.targetRoomId)\n      console.log(\"[部屋データ取得]\")\n      console.log(this.targetRoomData)\n\n      // 匿名認証実行\n      await initAuthAnonymous()\n      // FireBaseのchatsテーブル監視\n      this.watchFireBaseChats()\n      // FireBaseのroom_listenersテーブル監視\n      await this.watchFireBaseRoomListnerDatas()\n      // ユーザデータをセット\n      this.targetUserData = this.$store.getters.getTargetUserData\n      console.log(\"[ユーザデータ取得]\")\n      console.log(this.targetUserData)\n\n      console.log(\"[接続手段]\")\n      console.log(this.targetRoomData.webRtcService)\n      \n      // Skywayの場合、Skywayの部屋に入る\n      if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n        await joinToRoom(this.targetRoomId,this.targetUserData.id)\n      } else {\n        this.showInitDialog = true;\n      }\n\n      // subscribe（skyway）  \n      if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {      \n        await subscribeRoomAudio()\n      // subscribe（agora）\n      } else {\n        console.log(\"agora\")\n        await subscribeRoomAudioByAgora(this.audioElement, this.targetRoomId, this.targetUserData.id)\n      } \n\n      // 同一なら部屋主として認定\n      if (this.targetRoomData.ownerUserId === this.targetUserData.id) {\n        console.log(\"[配信者として入室]\" + this.targetRoomData.ownerUserId + \" \" + this.targetUserData.id)\n        this.isRoomOwner = true        \n\n        // 配信開始（Skyway）\n        if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n          await publishMyAudio();\n        // 配信開始（Agora）\n        } else {\n          await publishMyAudioByAgora()\n        }\n            \n        this.isPublishing = true\n      }\n\n      // リスナーデータを登録\n      this.insertRoomMyListnerDataToFireBase()\n      // タイマー描画\n      this.drawClock()\n      // BGM再生\n      this.playBGM()\n    } catch (error) {        \n      console.error(error);      \n    }\n  },\n\n  //======================================================\n  // \n  // 1. computed\n  //\n  //======================================================\n\n  computed: {\n    getRemainMinutes() {\n      return Math.floor(this.remainingTime / 60); // 分の計算\n    },\n    getRemainSeconds() {\n      let sec = this.remainingTime % 60; // 秒の計算\n\n      return sec.toString().padStart(2, '0');\n    }\n  },  \n\n  //======================================================\n  // \n  // 2. watch\n  //\n  //======================================================\n\n  /**\n   * watch\n   *  \n   */\n   watch: {\n    /**\n     * ユーザデータ変更時\n     * \n     * @param {} newValue \n     */\n    '$store.getters.getTargetUserData': function (newValue) {\n      try {\n        console.log(newValue)\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    /**\n     * ミュート状態変更時\n     */\n    '$store.getters.getIsMuting': function (newValue) {\n      try {        \n        console.log(\"[ミュート状態]\" + newValue)\n\n        // ミュート中なら\n        if (newValue) {\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {      \n            mute()\n          } else {\n            muteByAgora()\n          }            \n        } else {\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {      \n            unmute()\n          } else {\n            unmuteByAgora()\n          }   \n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    /**\n     * BGM再生状態変更時\n     */\n     '$store.getters.getIsBgmPlaying': function (newValue) {\n      try {        \n        console.log(\"[BGM再生状態]\" + newValue)\n\n        console.log(this.audioElement)\n\n        // 停止\n        if (newValue === true) {\n          this.$nextTick(() => {\n            this.audioElement.play();          \n            console.log(\"[BGM再生]\")\n          });\n        } else {\n          this.$nextTick(() => {\n            this.audioElement.pause();    \n            console.log(\"[BGM停止]\")      \n          });\n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },    \n\n    /**\n     * チャットアイテム変更時\n     * \n     * @param {*} newValue \n     */\n    chatDatas(newValue) {\n      try {      \n        // 下部にスクロール\n        this.scrollToBottomAtChatArea()\n\n        console.log(\"[チャット更新]\" + newValue.length + \"件\")\n      } catch (error) {        \n        console.error(error);      \n      }\n    }\n  },\n\n  //======================================================\n  //\n  // 3. methods\n  //\n  //======================================================\n\n  methods: {\n\n    //======================================================\n    //\n    // 3-1. FireBaseのChatデータ監視\n    //\n    //======================================================\n\n    /**\n     * FireBaseのChatデータ監視\n     */\n    watchFireBaseChats() {\n      try {      \n        // コールバック定義\n        const callback = (vals) => {\n          this.chatDatas = vals;\n\n          console.log(this.chatDatas.length + '件のチャット')\n        };\n\n        // FireBaseを監視\n        watchTargetRoomChats(this.targetRoomId, callback)\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-2. FireBaseのRoomListnerデータ監視\n    //\n    //======================================================\n\n    /**\n     * FireBaseのRoomUserデータ監視\n     */\n     async watchFireBaseRoomListnerDatas() {\n      try {      \n        // コールバック定義\n        const callback = (vals) => {\n          this.roomListnerDatas = vals;\n          console.log(this.roomListnerDatas.length + '件のListner')\n        };\n\n        // FireBaseを監視\n        await watchTargetRoomListnerDatas(this.targetRoomId, callback)\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-3. FireBaseにRoomListnerデータを登録\n    //\n    //======================================================\n\n    /**\n     * FireBaseにRoomListnerデータを登録\n     */\n    async insertRoomMyListnerDataToFireBase() {\n      try {      \n        this.roomMyListnerData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          roomJoinedAt: new Date().toLocaleString(),\n          isCallRequesting: false,\n          isInCall: false,\n        }\n\n        //console.log(this.roomMyListnerData)\n\n        // 登録\n        this.myListnerFbKey = await addListnerDataToDB(this.targetRoomId, this.roomMyListnerData)\n\n        console.log(\"[Firebase Listnerデータ登録] \" + this.myListnerFbKey)\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-4. チャット欄下部にスクロール\n    //\n    //======================================================\n\n    /**\n     * チャット欄下部にスクロール\n     */\n    scrollToBottomAtChatArea() {\n      try {      \n        this.$nextTick(() => {\n          window.scrollTo(0, document.body.clientHeight)\n        })\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-5. タイマー作成\n    //\n    //======================================================\n\n    /**\n     * タイマー作成\n     */\n    drawClock() {\n      const INTERVAL_MSEC = 1000;\n\n      try {      \n        console.log(this.targetRoomData.startedAt)\n        const startDate = new Date(this.targetRoomData.startedAt);\n        console.log(\"[開始日時]\" + startDate)\n\n        const currentTime = new Date(); // 現在時刻をDateオブジェクトとして取得\n\n        // 過ぎた時間\n        const leftSec = Math.floor((currentTime - startDate) / 1000)\n        this.remainingTime = CONSTANTS.ROOM_VALID_PERIOD_MIN * 60 - leftSec;\n        console.log(\"[残り秒数]\" + this.remainingTime)\n\n        // タイマーの開始\n        this.timer = setInterval(() => {\n          if (0 < this.remainingTime) {\n            this.remainingTime--;\n          } else {\n            clearInterval(this.timer); // タイマー停止\n          }\n        }, INTERVAL_MSEC); // 1秒ごとに処理を実行\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-6. BGM再生\n    //\n    //======================================================\n\n    /**\n     * BGM再生\n     */\n    playBGM() {\n      try {      \n        if (this.targetRoomData.bgmUrl === \"\") {\n          return;\n        }\n\n        this.$nextTick(() => {\n          this.audioElement = new Audio(this.targetRoomData.bgmUrl);\n          this.audioElement.volume = this.bgmVolume;             \n          this.audioElement.loop = true;\n          this.audioElement.play();\n\n          console.log(\"[BGM再生開始]\")\n          console.log(this.audioElement);\n        });\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-7. 通話に参加ボタン押下\n    //\n    //======================================================\n\n    /**\n     * 通話に参加ボタン押下\n     */\n    async onPublishButtonClick() {\n      try {      \n        if (confirm('通話に参加します。よろしいですか？')) {\n          if (this.isPublishing) {\n            return\n          }\n\n          // 配信開始（Skyway）\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            await publishMyAudio();\n            await subscribeRoomAudio();\n            // 配信開始（Agora）\n          } else {\n            await publishMyAudioByAgora()\n            await subscribeRoomAudioByAgora();\n          }\n\n          this.isPublishing = true\n\n          // チャット送信\n          this.sendChat(this.targetUserData.name + \"が通話に参加しました。\")\n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    // チャット送信\n    //======================================================\n\n    /**\n     * チャット送信\n     */\n    async sendChat(txt) {\n      try {\n        // データをセット\n        let targetChatData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          text: txt,\n          createdAt: new Date(),\n        }\n\n        console.log(\"[チャットデータ登録]\")\n        console.log(targetChatData)\n\n        // データ登録\n        addChatDataToDB(targetChatData.roomId, targetChatData)        \n      } catch (error) {\n        console.error(error);   \n      }\n    },\n\n    //======================================================\n    //\n    // 3-8. 通話を切断ボタン押下\n    //\n    //======================================================\n\n    /**\n     * 通話を切断ボタン押下\n     */\n     async onUnpublishButtonClick() {\n      try {      \n        if (confirm('通話から退出します。よろしいですか？')) {\n          // 配信停止（Skyway）\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {            \n            await unpublishMyAudio();\n          // 配信停止（Agora）\n          } else {\n            await unpublishMyAudioByAgora();\n          }\n\n          this.isPublishing = false\n\n          // チャット送信\n          this.sendChat(this.targetUserData.name + \"が通話から退出しました。\")          \n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },    \n\n    //======================================================\n    //\n    // 3-10. 退室ボタン押下\n    //\n    //======================================================\n\n    /**\n     * 退室ボタン押下\n     * \n     * @param {*} to \n     * @param {*} from \n     * @param {*} next \n     */    \n    async onCloseBoxClick(to, from, next) {\n      try {      \n        if (confirm('本当にページを離れますか？')) {\n          // skyway退室\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            await leaveFromRoom(this.targetRoomId);\n          // agora退室\n          } else {\n            await leaveFromRoomByAgora(this.targetRoomId)\n          }\n          \n          this.$router.push('/rooms');\n        } else {\n          next(false);\n        }\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 3-11. 部屋から退室\n    //\n    //======================================================\n\n    /**\n     * 部屋から退室\n     * ・skywayのRoomから退室\n     * ・FirebaseのLisnerデータを削除\n     * \n     * @param {*} to \n     * @param {*} from \n     * @param {*} next \n     */\n    async beforeLeave(to, from, next) {\n      try {      \n          // skyway退室\n          if (this.targetRoomData.webRtcService == CONSTANTS.WEB_RTC_SERVICE_SKYWAY) {\n            await leaveFromRoom(this.targetRoomId);\n          // agora退室\n          } else {\n            await leaveFromRoomByAgora(this.targetRoomId)\n          }\n\n          // firebaseのlistnerキー削除\n          await removeTargetListnerDataFromDB(this.targetRoomId, this.myListnerFbKey)\n\n          // BGM停止\n          this.stopBGM()\n\n          next();\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    // BGM停止\n    //======================================================\n\n    /**\n     * BGM停止\n     */\n    stopBGM() {\n      try {\n        // BGM削除\n        this.audioElement.pause()\n        this.audioElement = null\n      } catch (error) {\n        console.error(error);      \n      }\n    },\n\n\n    //======================================================\n    //\n    // サンプル\n    //\n    //======================================================\n\n    sample() {\n      //joinToRoom()\n      //subscribeRoomAudio\n      //publishMyAudioByAgora\n      //subscribeRoomAudioByAgora\n    }    \n  },\n\n  //======================================================\n  // サイトから離れる\n  //======================================================\n\n  /**\n   * サイトから離れる\n   * \n   * @param {*} to \n   * @param {*} from \n   * @param {*} next \n   */\n  beforeRouteLeave(to, from, next) {\n    try {      \n      this.beforeLeave(to, from, next);\n    } catch (error) {        \n      console.error(error);      \n    }\n  },\n\n};\n\n</script>\n\n<!-- CSS-->\n<style>\n/* 部屋内のコンテナ */\n#roomContainer {\n  position: relative;\n  padding: 20px;\n  height: 100%;\n}\n\n#roomMainArea {\n  width: 100%;\n}\n\n/* 部屋上部のフッター */\n#roomHeaderArea {\n  height: 120px; \n  padding: 20px;\n  font-size: 70%;\n  background-color: rgba(0, 0, 0, 0.1); \n}\n.nameArea {\n  padding: 20px 0;\n}\n.rightHeaderArea {\n  padding: 40px 0 0;\n}\n.headerTopRightArea {\n  padding: 20px 0;\n}\n#rightHeaderLeftArea {\n  position: fixed;\n  top: 4px;\n  left: 24px;\n  height: 50px;\n  width: 40%;\n  /*background: #CCCCCC;*/\n  border-radius: 50px;\n}\n#roomOwnerImage {\n  position: fixed;\n  top: 12px;\n  left: 32px;\n  border: solid 1px #999999;\n  border-radius: 25px;\n  background: white;  \n}\n#roomTitle {\n  position: fixed;\n  top: 16px;\n  left: 92px;\n  border: solid 0px #999999;\n}\n#roomOwnerName {\n  position: fixed;\n  top: 36px;\n  left: 92px;\n  border: solid 0px #999999;\n}\n\n.multiCastUserImage {\n  width: 25px;\n  margin-right: 4px;\n  border: solid 1px #999999;  \n  border-radius: 50%;  \n}\n\n#chatArea {\n  width: 100%;\n  height: 60vh; \n  /*margin: 80px;*/\n  display: flex;\n  flex-direction: column-reverse;\n  overflow-y: scroll;\n  position: fixed;\n\tbottom: 60px;\n  /*background-color: rgba(0, 0, 0, 0.5); */\n  border: solid 0px #999999;\n}\n\n#commentTextBox {\n  background: white;\n  opacity: 1;\n  border-radius: 10px;\n}\n\n.fixed-bottom {\n  position: fixed;\n  margin: 40px;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 50px;\n  background-color: #6d6d6d;\n  text-align: center;\n  line-height: 50px;\n}\n\n.dark {\n  background: rgb(0,0,0, 0.5);\n}\n\n/* 閉じるボタン */\n.closeBox {\n  border: solid 0px #999999;\n  position: fixed;\n  top: 10px;\n  right: 10px;\n  border: solid 1px #CCCCCC;\n  color: #333333;\n}\n/* 通話に参加ボタン */\n.callButton {\n  border: solid 0px #999999;\n  position: fixed;\n  top: 60px;\n  right: 8px;\n  color: gray;\n  padding: 12px;\n}\n.image-container {\n  display: flex;\n  position: fixed;\n  top: 72px;\n  justify-content: flex-start; /* 左寄せ */\n  align-items: center; /* 垂直方向の中央揃え */\n  margin: 0 8px 0;\n}\n.chip-container {\n  display: flex;\n  position: fixed;\n  top: 66px;\n  justify-content: flex-start; /* 左寄せ */\n  align-items: center; /* 垂直方向の中央揃え */\n  margin: 0 8px 0;\n}\n.smallText {\n  font-size: 80%;\n}\n\n</style>\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}