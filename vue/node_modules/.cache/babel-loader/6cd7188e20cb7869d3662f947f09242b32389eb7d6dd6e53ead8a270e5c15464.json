{"ast":null,"code":"//======================================================\n//\n// Go API関連のマネージャ\n//\n// [索引]\n//  □ 1-1. 部屋一覧をGoのAPIからセット\n//  □ 1-2. 対象の部屋のデータをGoのAPIからセット\n//  □ \n//\n//======================================================\n\nimport { CONSTANTS } from \"../consts/ConstantVals.js\";\nimport axios from 'axios';\nimport https from 'https-browserify'; // 追加\n\n// APIキーデータ\nlet _apiKeyData = {\n  apiKey: \"\",\n  apiSecret: \"\"\n};\n\n// URLのプレフィックス\n//let _apiUrlPrefix = \"\"; //window.location.protocol + '//' + window.location.hostname + CONSTANTS.API_URL_GO_PORT + \"/\"\n\n//======================================================\n//\n// 1-1. 部屋一覧をGoのAPIからセット\n//\n//======================================================\n\n/**\n * 部屋一覧をGoのAPIからセット\n */\nexport async function getAllRoomDatas() {\n  // API URLをセット  \n  let apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_ROOM_READ_ALL;\n  console.log(\"[API接続]\" + apiURL);\n\n  // 変数初期化\n  let rooms = [];\n\n  /*\n  const agent = new https.Agent({\n    rejectUnauthorized: false\n  });\n  axios.defaults.httpsAgent = agent;\n  */\n  const httpsAgent = new https.Agent({\n    rejectUnauthorized: false\n  });\n  await axios\n  // axiosで通信\n  .get(apiURL, {\n    httpsAgent\n  }).then(response => {\n    rooms = response.data;\n    console.log(rooms);\n  }).catch(error => {\n    console.log(error);\n  });\n  return rooms;\n}\n\n//======================================================\n// API URLのプレフィックスをセット\n//======================================================\n\n/**\n * API URLのプレフィックスをセット\n */\nfunction getAPIURLPrefix() {\n  let apiUrlPrefix;\n  try {\n    apiUrlPrefix = window.location.protocol + '//' + window.location.hostname;\n\n    // 本番環境なら\n    if (window.location.hostname.indexOf(CONSTANTS.DEV_SERVER_HOSTNAME_KEYWORD) === -1) {\n      console.log(\"[本番環境]\");\n      apiUrlPrefix += CONSTANTS.API_URL_GO_PORT_PRODUCT + \"/\";\n      // 開発環境ならポート番号を付与\n    } else {\n      console.log(\"[開発環境]\");\n      apiUrlPrefix += CONSTANTS.API_URL_GO_PORT_DEV + \"/\";\n    }\n  } catch (error) {\n    console.error(error);\n  }\n  return apiUrlPrefix;\n}\n\n//======================================================\n//\n// 1-2. アクティブな部屋一覧をGoのAPIからセット\n//\n//======================================================\n\n/**\n * 部屋一覧をGoのAPIからセット\n */\nexport async function getActiveRoomDatas() {\n  // API URLをセット  \n  let apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_ROOM_READ_ACTIVE;\n  console.log(\"[API接続]\" + apiURL);\n  // 変数初期化\n  let rooms = [];\n\n  /*\n  const agent = new https.Agent({\n    rejectUnauthorized: false\n  });\n  axios.defaults.httpsAgent = agent;  \n  */\n  const httpsAgent = new https.Agent({\n    rejectUnauthorized: false\n  });\n  await axios\n  // axiosで通信\n  .get(apiURL, {\n    httpsAgent\n  }).then(response => {\n    rooms = response.data;\n    console.log(rooms);\n  }).catch(error => {\n    console.log(error);\n  });\n  return rooms;\n}\n\n//======================================================\n//\n// 1-3. 対象の部屋のデータをGoのAPIからセット\n//\n//======================================================\n\n/**\n * 対象の部屋のデータをGoのAPIからセット\n */\nexport async function getTargetIdRoomData(roomId) {\n  // 変数初期化\n  let tRoom = {};\n  try {\n    // API URLをセット  \n    // API URLをセット  \n    let apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_ROOM_READ_TARGET_ID + roomId;\n    console.log(\"[API接続]\" + apiURL);\n    const httpsAgent = new https.Agent({\n      rejectUnauthorized: false\n    });\n    await axios\n    // axiosで通信\n    .get(apiURL, {\n      httpsAgent\n    }).then(response => {\n      tRoom = response.data;\n      console.log(tRoom);\n    }).catch(error => {\n      console.log(error);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n  return tRoom;\n}\n\n//======================================================\n//\n// 2-1. SkywayのAPIキー、APIシークレットを返す\n//\n//======================================================\n\n/**\n * SkywayのAPIキー、APIシークレットを返す\n */\nexport async function getAPIKeys() {\n  try {\n    // API URLをセット  \n    let apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_SKYWAY_KEYS;\n\n    /*\n    const agent = new https.Agent({\n      rejectUnauthorized: false\n    });\n    axios.defaults.httpsAgent = agent;\n    */\n\n    await axios\n    // axiosで通信\n    .get(apiURL).then(response => {\n      _apiKeyData = response.data;\n      //console.log(_apiKeyData)\n    }).catch(error => {\n      console.log(error);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n  return _apiKeyData;\n}\n\n//======================================================\n//\n// 3-1. roomsへデータ登録用のURLを返す\n//\n//======================================================\n\n/**\n * roomsへデータ登録用のURLを返す\n */\nexport function getRoomCreateURL() {\n  // 変数初期化\n  let apiURL = \"\";\n  try {\n    // API URLをセット  \n    apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_ROOM_CREATE;\n    console.log(\"[API接続]\" + apiURL);\n  } catch (error) {\n    console.error(error);\n  }\n  return apiURL;\n}","map":{"version":3,"names":["CONSTANTS","axios","https","_apiKeyData","apiKey","apiSecret","getAllRoomDatas","apiURL","getAPIURLPrefix","API_URL_GO_ROOM_READ_ALL","console","log","rooms","httpsAgent","Agent","rejectUnauthorized","get","then","response","data","catch","error","apiUrlPrefix","window","location","protocol","hostname","indexOf","DEV_SERVER_HOSTNAME_KEYWORD","API_URL_GO_PORT_PRODUCT","API_URL_GO_PORT_DEV","getActiveRoomDatas","API_URL_GO_ROOM_READ_ACTIVE","getTargetIdRoomData","roomId","tRoom","API_URL_GO_ROOM_READ_TARGET_ID","getAPIKeys","API_URL_GO_SKYWAY_KEYS","getRoomCreateURL","API_URL_GO_ROOM_CREATE"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/utils/GoAPIManager.js"],"sourcesContent":["//======================================================\n//\n// Go API関連のマネージャ\n//\n// [索引]\n//  □ 1-1. 部屋一覧をGoのAPIからセット\n//  □ 1-2. 対象の部屋のデータをGoのAPIからセット\n//  □ \n//\n//======================================================\n\nimport { CONSTANTS } from \"../consts/ConstantVals.js\"\nimport axios from 'axios'\nimport https from 'https-browserify' // 追加\n\n// APIキーデータ\nlet _apiKeyData = {\n  apiKey:    \"\",\n  apiSecret: \"\",\n}\n\n// URLのプレフィックス\n//let _apiUrlPrefix = \"\"; //window.location.protocol + '//' + window.location.hostname + CONSTANTS.API_URL_GO_PORT + \"/\"\n\n//======================================================\n//\n// 1-1. 部屋一覧をGoのAPIからセット\n//\n//======================================================\n\n/**\n * 部屋一覧をGoのAPIからセット\n */\nexport async function getAllRoomDatas() {\n\n  // API URLをセット  \n  let apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_ROOM_READ_ALL;\n  console.log(\"[API接続]\" + apiURL)\n\n  // 変数初期化\n  let rooms = []\n\n  /*\n  const agent = new https.Agent({\n    rejectUnauthorized: false\n  });\n  axios.defaults.httpsAgent = agent;\n  */\n  const httpsAgent = new https.Agent({ rejectUnauthorized: false });\n  await axios\n    // axiosで通信\n    .get(\n      apiURL,\n      { httpsAgent })\n    .then(response => {\n      rooms = response.data;\n      console.log(rooms)\n    })\n    .catch(error => {\n      console.log(error);\n    })\n\n  return rooms\n}\n\n//======================================================\n// API URLのプレフィックスをセット\n//======================================================\n\n/**\n * API URLのプレフィックスをセット\n */\nfunction getAPIURLPrefix() {\n  let apiUrlPrefix;\n\n  try {\n    apiUrlPrefix = window.location.protocol + '//' + window.location.hostname;\n    \n    // 本番環境なら\n    if (window.location.hostname.indexOf(CONSTANTS.DEV_SERVER_HOSTNAME_KEYWORD) === -1) {\n      console.log(\"[本番環境]\")\n      apiUrlPrefix += CONSTANTS.API_URL_GO_PORT_PRODUCT + \"/\"\n    // 開発環境ならポート番号を付与\n    } else {\n      console.log(\"[開発環境]\")\n      apiUrlPrefix += CONSTANTS.API_URL_GO_PORT_DEV + \"/\"\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  return apiUrlPrefix\n}\n\n\n//======================================================\n//\n// 1-2. アクティブな部屋一覧をGoのAPIからセット\n//\n//======================================================\n\n/**\n * 部屋一覧をGoのAPIからセット\n */\nexport async function getActiveRoomDatas() {\n\n  // API URLをセット  \n  let apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_ROOM_READ_ACTIVE;\n  console.log(\"[API接続]\" + apiURL)\n  // 変数初期化\n  let rooms = []\n\n  /*\n  const agent = new https.Agent({\n    rejectUnauthorized: false\n  });\n  axios.defaults.httpsAgent = agent;  \n  */\n  const httpsAgent = new https.Agent({ rejectUnauthorized: false });\n  await axios\n    // axiosで通信\n    .get(\n      apiURL,\n      { httpsAgent })\n    .then(response => {\n      rooms = response.data;\n      console.log(rooms)\n    })\n    .catch(error => {\n      console.log(error);\n    })\n\n  return rooms\n}\n\n//======================================================\n//\n// 1-3. 対象の部屋のデータをGoのAPIからセット\n//\n//======================================================\n\n/**\n * 対象の部屋のデータをGoのAPIからセット\n */\nexport async function getTargetIdRoomData(roomId) {\n  // 変数初期化\n  let tRoom = {}\n\n  try {      \n    // API URLをセット  \n    // API URLをセット  \n    let apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_ROOM_READ_TARGET_ID + roomId;\n    console.log(\"[API接続]\" + apiURL)\n\n    const httpsAgent = new https.Agent({ rejectUnauthorized: false });\n    await axios\n      // axiosで通信\n      .get(\n        apiURL,\n        { httpsAgent })\n      .then(response => {\n        tRoom = response.data;\n        console.log(tRoom)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  } catch (error) {        \n    console.error(error);      \n  }\n\n  return tRoom\n}\n\n//======================================================\n//\n// 2-1. SkywayのAPIキー、APIシークレットを返す\n//\n//======================================================\n\n/**\n * SkywayのAPIキー、APIシークレットを返す\n */\nexport async function getAPIKeys() {\n  try {      \n    // API URLをセット  \n    let apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_SKYWAY_KEYS\n\n    /*\n    const agent = new https.Agent({\n      rejectUnauthorized: false\n    });\n    axios.defaults.httpsAgent = agent;\n    */\n\n    await axios\n      // axiosで通信\n      .get(apiURL)\n      .then(response => {\n        _apiKeyData = response.data;\n        //console.log(_apiKeyData)\n      })\n      .catch(error => {\n        console.log(error);\n      })    \n  } catch (error) {        \n    console.error(error);      \n  }\n\n  return _apiKeyData;  \n}\n\n//======================================================\n//\n// 3-1. roomsへデータ登録用のURLを返す\n//\n//======================================================\n\n/**\n * roomsへデータ登録用のURLを返す\n */\nexport function getRoomCreateURL() {\n  // 変数初期化\n  let apiURL = \"\"\n\n  try {      \n    // API URLをセット  \n    apiURL = getAPIURLPrefix() + CONSTANTS.API_URL_GO_ROOM_CREATE;\n    console.log(\"[API接続]\" + apiURL)\n  } catch (error) {        \n    console.error(error);      \n  }\n\n  return apiURL\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}