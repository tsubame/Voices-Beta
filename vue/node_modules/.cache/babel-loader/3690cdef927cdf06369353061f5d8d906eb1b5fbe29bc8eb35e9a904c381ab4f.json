{"ast":null,"code":"//======================================================\n//\n// storeモジュール\n//\n// [索引]\n//  □ 1. State\n//  □ 2. Getter\n//  □ 3. Mutation\n//  □ 4. Action\n//\n//======================================================\n\nimport { CONSTANTS } from '@/consts/ConstantVals';\nimport { createStore } from 'vuex';\nimport todo from './modules/todo';\nimport { useCookies } from \"vue3-cookies\";\n\n// cookie\nconst {\n  cookies\n} = useCookies();\n\n/**\n * export\n */\nexport default createStore({\n  // modules\n  modules: {\n    todo\n  },\n  //======================================================\n  //\n  // 1. State\n  //\n  //======================================================\n\n  state: {\n    twitterUser: {\n      id: \"\",\n      name: \"\",\n      screenName: \"\",\n      profileImageUrl: \"\"\n    },\n    // ユーザ情報\n    targetUserData: {\n      id: 0,\n      idStr: \"\",\n      name: \"\",\n      profileImageUrl: \"\"\n    },\n    twitterUserId: \"\",\n    // BGM再生中か\n    isBgmPlaying: false,\n    // ミュート中か \n    isMuting: false,\n    // BGMボリューム\n    bgmVolume: 0.1,\n    bgmFileName: \"\",\n    isRoomOwner: false,\n    // コンボボックス用のBGM選択肢\n    bgms: [{\n      title: '素直じゃないね恋心',\n      filePath: require('@/assets/bgm/素直じゃないね恋心.mp3')\n    }, {\n      title: 'さみしいおばけと東京の月',\n      filePath: require('@/assets/bgm/さみしいおばけと東京の月.mp3')\n    }, {\n      title: 'Cassette Tape Dream',\n      filePath: require('@/assets/bgm/Cassette_Tape_Dream.mp3')\n    }, {\n      title: '茶屋にて',\n      filePath: require('@/assets/bgm/茶屋にて.mp3')\n    }, {\n      title: '2:23 AM',\n      filePath: require('@/assets/bgm/2_23_AM.mp3')\n    }],\n    // 背景画像\n    bgImages: [{\n      title: \"喫茶店\",\n      filePath: require('@/assets/img/bg/cafe.jpg')\n    }, {\n      title: \"公園\",\n      filePath: require('@/assets/img/bg/park.jpg')\n    }, {\n      title: \"街中\",\n      filePath: require('@/assets/img/bg/city.jpg')\n    }],\n    // ゲストユーザ用のアイコン\n    guestUserIcons: [require('@/assets/img/icon/user_icon_0.png'), require('@/assets/img/icon/user_icon_1.png'), require('@/assets/img/icon/user_icon_2.png'), require('@/assets/img/icon/user_icon_3.png'), require('@/assets/img/icon/user_icon_4.png'), require('@/assets/img/icon/user_icon_5.png'), require('@/assets/img/icon/user_icon_6.png'), require('@/assets/img/icon/user_icon_7.png'), require('@/assets/img/icon/user_icon_8.png'), require('@/assets/img/icon/user_icon_9.png'), require('@/assets/img/icon/user_icon_10.png')]\n  },\n  //======================================================\n  //\n  // 2. Getter\n  //\n  //======================================================\n\n  getters: {\n    //======================================================\n    //\n    // 2-1. ログイン中かを返す\n    //\n    //======================================================\n\n    /**\n     * ログイン中かを返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getHasLogined: state => {\n      try {\n        // Storeに値があればTrue\n        if (state.targetUserData.name != \"\") {\n          console.log(\"[Storeに値ありのためログイン中と判別]\" + state.userData.name);\n          return true;\n        }\n\n        // Cookieに値があればTrue\n        const cName = getCookie(CONSTANTS.COOKIE_KEY_USER_NAME);\n        console.log(\"[Cookie内のID値]\" + cName);\n        if (cName !== \"\") {\n          console.log(\"[Cookieに値ありのためログイン中と判別]\" + cName);\n          return true;\n        }\n        console.log(\"[未ログイン]\");\n      } catch (error) {\n        // エラーが発生した場合の処理\n        console.error(error);\n      }\n      return false;\n    },\n    //======================================================\n    //\n    // 2-2. ユーザデータを返す\n    //\n    //======================================================\n\n    /**\n     * ユーザデータを返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserData: state => {\n      try {\n        // storeに値がなければ\n        if (state.targetUserData.name === \"\") {\n          // storeに値がなく、Cookieに値があればCookieからセット\n          const cName = getCookie(CONSTANTS.COOKIE_KEY_USER_NAME);\n          if (cName !== \"\") {\n            state.targetUserData.name = cName;\n            state.targetUserData.idStr = getCookie(CONSTANTS.COOKIE_KEY_USER_ID_STR);\n            state.targetUserData.profileImageUrl = getCookie(CONSTANTS.COOKIE_KEY_PROFILE_IMAGE_URL);\n            let nStr = getCookie(CONSTANTS.COOKIE_KEY_USER_ID);\n            if (nStr !== \"\") {\n              state.targetUserData.id = parseInt(nStr);\n            }\n            console.log(\"[Cookieから値をセット]\" + state.targetUserData);\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n      return state.targetUserData;\n    },\n    //======================================================\n    //\n    // 2-3. ユーザIDを返す\n    //\n    //======================================================\n\n    /**\n     * ユーザIDを返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserId: state => {\n      let n = 0;\n      try {\n        let nStr = state.targetUserData.id;\n        n = parseInt(nStr);\n      } catch (error) {\n        console.error(error);\n      }\n      return n;\n    },\n    //======================================================\n    //\n    // 2-4. ユーザID（文字列1）を返す\n    //\n    //======================================================\n\n    /**\n     * ユーザID（文字列）を返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserIdStr: state => {\n      return state.targetUserData.idStr;\n    },\n    //======================================================\n    //\n    // 2-5. ユーザ名を返す\n    //\n    //======================================================\n\n    /**\n     * ユーザ名を返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserName: state => {\n      return state.targetUserData.name;\n    },\n    //======================================================\n    //\n    // 2-6. ユーザのプロフィール画像を返す\n    //\n    //======================================================\n\n    /**\n     * ユーザのプロフィール画像を返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserProfileImagerUrl: state => {\n      return state.targetUserData.profileImageUrl;\n    },\n    //======================================================\n    //\n    // 2-7. BGMの候補を返す\n    //\n    //======================================================    \n\n    /**\n     * BGMの候補を返す\n     * \n     * @param {*} state \n     * @returns \n     */\n    getBgms: state => {\n      return state.bgms;\n    },\n    //======================================================\n    //\n    // 2-8. 背景画像の候補を返す\n    //\n    //======================================================    \n\n    /**\n     * 背景画像の候補を返す\n     * \n     * @param {*} state \n     * @returns \n     */\n    getBgImages: state => {\n      return state.bgImages;\n    },\n    //======================================================\n    //\n    // 2-9. ゲストユーザアイコンの候補を返す\n    //\n    //======================================================    \n\n    /**\n     * ゲストユーザアイコンの候補を返す\n     * \n     * @param {*} state \n     * @returns \n     */\n    getGuestUserIcons: state => {\n      return state.guestUserIcons;\n    },\n    //======================================================\n    //\n    // 2-10. ミュート中かを返す\n    //\n    //======================================================\n\n    /**\n     * \n     * @param {*} state \n     * @returns \n     */\n    getIsMuting: state => {\n      return state.isMuting;\n    },\n    //======================================================\n    //\n    // 2-11. BGM再生中かを返す\n    //\n    //======================================================\n\n    /**\n     * \n     * @param {*} state \n     * @returns \n     */\n    getIsBgmPlaying: state => {\n      console.log(state.isBgmPlaying);\n      return state.isBgmPlaying;\n    },\n    //======================================================\n    // その他\n    //======================================================\n\n    getTwitterUser: state => {\n      return state.twitterUser;\n    },\n    getBgmVolume: state => {\n      return state.bgmVolume;\n    },\n    getBgmFileName: state => {\n      return state.bgmFileName;\n    }\n  },\n  //======================================================\n  //\n  // 3. Mutation（Storeの値の変更）\n  //\n  //======================================================\n\n  mutations: {\n    //======================================================\n    //\n    // 3-1. ユーザデータのセット\n    //\n    //======================================================\n\n    /**\n     * ユーザデータのセット\n     *   ・state、cookieにセット\n     * \n     * @param {} state \n     * @param {*} d \n     */\n    setTargetUserData(state, d) {\n      try {\n        state.targetUserData = d;\n        // Cookieに値をセット\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID, d.id);\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID_STR, d.idStr);\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_NAME, d.name);\n        cookies.set(CONSTANTS.COOKIE_KEY_PROFILE_IMAGE_URL, d.profileImageUrl);\n        console.log(d);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-2. ユーザデータのクリア\n    //\n    //======================================================\n\n    /**\n     * ユーザデータのクリア\n     * @param {} state \n     * @param {*} d \n     */\n    clearUserData(state) {\n      try {\n        state.targetUserData.id = 0;\n        state.targetUserData.idStr = \"\";\n        state.targetUserData.name = \"\";\n        state.targetUserData.profileImageUrl = \"\";\n\n        // Cookieに値をセット\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID, \"\");\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID_STR, \"\");\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_NAME, \"\");\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID_STR, \"\");\n        console.log(\"ユーザデータをクリア\");\n      } catch (error) {\n        // エラーが発生した場合の処理\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 3-3. ミュート中かをセット\n    //\n    //======================================================\n\n    /**\n     * ミュート中かをセット\n     * \n     * @param {} state \n     * @param {*} d \n     */\n    setIsMuting(state, payload) {\n      state.isMuting = payload;\n    },\n    //======================================================\n    //\n    // 3-4. BGM再生中かをセット\n    //\n    //======================================================\n\n    /**\n     * BGM再生中かをセット\n     * @param {} state \n     * @param {*} d \n     */\n    setIsBgmPlaying(state, payload) {\n      state.isBgmPlaying = payload;\n      console.log(\"[BGM再生状態]\" + payload);\n    },\n    /**\n     * \n     * @param {*} state \n     * @param {*} payload \n     */\n    setTwitterUser(state, payload) {\n      console.log(\"setTwitterUser.\");\n      console.log(payload);\n      state.twitterUser = payload;\n      state.twitterUserId = payload.id;\n      state.count = 10;\n    },\n    setBgmVolume(state, payload) {\n      state.bgmVolume = payload;\n    },\n    setBgmFileName(state, payload) {\n      state.bgmFileName = payload;\n    }\n  },\n  //======================================================\n  //\n  // 4. Action\n  //\n  //======================================================\n\n  actions: {\n    sendDataToFB() {\n      console.log(\"send.\");\n    }\n  }\n});\n\n//======================================================\n//\n// その他\n//\n//======================================================\n\n/**\n * Cookieの値を返す\n * \n * @param  key \n */\nfunction getCookie(key) {\n  try {\n    const v = cookies.get(key);\n    if (v !== undefined && v !== null) {\n      return v;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n  return \"\";\n}","map":{"version":3,"names":["CONSTANTS","createStore","todo","useCookies","cookies","modules","state","twitterUser","id","name","screenName","profileImageUrl","targetUserData","idStr","twitterUserId","isBgmPlaying","isMuting","bgmVolume","bgmFileName","isRoomOwner","bgms","title","filePath","require","bgImages","guestUserIcons","getters","getHasLogined","console","log","userData","cName","getCookie","COOKIE_KEY_USER_NAME","error","getTargetUserData","COOKIE_KEY_USER_ID_STR","COOKIE_KEY_PROFILE_IMAGE_URL","nStr","COOKIE_KEY_USER_ID","parseInt","getTargetUserId","n","getTargetUserIdStr","getTargetUserName","getTargetUserProfileImagerUrl","getBgms","getBgImages","getGuestUserIcons","getIsMuting","getIsBgmPlaying","getTwitterUser","getBgmVolume","getBgmFileName","mutations","setTargetUserData","d","set","clearUserData","setIsMuting","payload","setIsBgmPlaying","setTwitterUser","count","setBgmVolume","setBgmFileName","actions","sendDataToFB","key","v","get","undefined"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/store/index.js"],"sourcesContent":["//======================================================\n//\n// storeモジュール\n//\n// [索引]\n//  □ 1. State\n//  □ 2. Getter\n//  □ 3. Mutation\n//  □ 4. Action\n//\n//======================================================\n\nimport { CONSTANTS } from '@/consts/ConstantVals'\nimport { createStore } from 'vuex'\nimport todo from './modules/todo';\nimport { useCookies } from \"vue3-cookies\";\n\n// cookie\nconst { cookies } = useCookies();\n\n/**\n * export\n */\nexport default createStore({\n\n  // modules\n  modules: {\n    todo,\n  },\n\n  //======================================================\n  //\n  // 1. State\n  //\n  //======================================================\n\n  state: {\n    twitterUser: {\n      id: \"\",\n      name: \"\",\n      screenName: \"\",\n      profileImageUrl: \"\"\n    },\n    // ユーザ情報\n    targetUserData: {\n      id: 0,\n      idStr: \"\",\n      name: \"\",\n      profileImageUrl: \"\"\n    },\n    twitterUserId: \"\",\n    // BGM再生中か\n    isBgmPlaying: false,\n    // ミュート中か \n    isMuting: false,\n    // BGMボリューム\n    bgmVolume: 0.1,\n    bgmFileName: \"\",    \n    isRoomOwner: false,\n\n    // コンボボックス用のBGM選択肢\n    bgms: [\n      {\n        title: '素直じゃないね恋心',\n        filePath: require('@/assets/bgm/素直じゃないね恋心.mp3'),\n      },\n      {\n        title: 'さみしいおばけと東京の月',\n        filePath: require('@/assets/bgm/さみしいおばけと東京の月.mp3'),\n      },\n      {\n        title: 'Cassette Tape Dream',\n        filePath: require('@/assets/bgm/Cassette_Tape_Dream.mp3'),        \n      },\n      {\n        title: '茶屋にて',\n        filePath: require('@/assets/bgm/茶屋にて.mp3'),             \n      },        \n      {\n        title: '2:23 AM',\n        filePath: require('@/assets/bgm/2_23_AM.mp3'),          \n      },    \n    ],    \n    // 背景画像\n    bgImages: [\n      {\n        title: \"喫茶店\",\n        filePath: require('@/assets/img/bg/cafe.jpg')\n      },\n      {\n        title: \"公園\",\n        filePath: require('@/assets/img/bg/park.jpg')    \n      },      \n      {\n        title: \"街中\",\n        filePath: require('@/assets/img/bg/city.jpg')    \n      },      \n    ],\n    // ゲストユーザ用のアイコン\n    guestUserIcons: [\n      require('@/assets/img/icon/user_icon_0.png'),      \n      require('@/assets/img/icon/user_icon_1.png'),   \n      require('@/assets/img/icon/user_icon_2.png'),   \n      require('@/assets/img/icon/user_icon_3.png'),   \n      require('@/assets/img/icon/user_icon_4.png'),   \n      require('@/assets/img/icon/user_icon_5.png'),   \n      require('@/assets/img/icon/user_icon_6.png'),             \n      require('@/assets/img/icon/user_icon_7.png'),   \n      require('@/assets/img/icon/user_icon_8.png'),   \n      require('@/assets/img/icon/user_icon_9.png'),   \n      require('@/assets/img/icon/user_icon_10.png'),     \n    ],\n  },\n\n  //======================================================\n  //\n  // 2. Getter\n  //\n  //======================================================\n\n  getters: {\n\n    //======================================================\n    //\n    // 2-1. ログイン中かを返す\n    //\n    //======================================================\n\n    /**\n     * ログイン中かを返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getHasLogined: state => {\n      try {\n        // Storeに値があればTrue\n        if (state.targetUserData.name != \"\") {  \n          console.log(\"[Storeに値ありのためログイン中と判別]\" + state.userData.name)\n\n          return true\n        } \n\n        // Cookieに値があればTrue\n        const cName = getCookie(CONSTANTS.COOKIE_KEY_USER_NAME)\n        console.log(\"[Cookie内のID値]\" + cName)\n\n        if (cName !== \"\") {\n          console.log(\"[Cookieに値ありのためログイン中と判別]\" + cName)\n\n          return true\n        }\n\n        console.log(\"[未ログイン]\")\n      } catch (error) {\n        // エラーが発生した場合の処理\n        console.error(error);\n      }\n\n      return false\n    },\n\n    //======================================================\n    //\n    // 2-2. ユーザデータを返す\n    //\n    //======================================================\n\n    /**\n     * ユーザデータを返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserData: state => {\n      try {\n        // storeに値がなければ\n        if (state.targetUserData.name === \"\") {\n          // storeに値がなく、Cookieに値があればCookieからセット\n          const cName = getCookie(CONSTANTS.COOKIE_KEY_USER_NAME)\n          if (cName !== \"\") {\n            state.targetUserData.name = cName        \n            state.targetUserData.idStr = getCookie(CONSTANTS.COOKIE_KEY_USER_ID_STR)\n            state.targetUserData.profileImageUrl = getCookie(CONSTANTS.COOKIE_KEY_PROFILE_IMAGE_URL)\n            \n            let nStr = getCookie(CONSTANTS.COOKIE_KEY_USER_ID) \n            if (nStr !== \"\") {\n              state.targetUserData.id = parseInt(nStr)\n            }\n            \n            console.log(\"[Cookieから値をセット]\" + state.targetUserData)\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n\n      return state.targetUserData\n    },    \n\n    //======================================================\n    //\n    // 2-3. ユーザIDを返す\n    //\n    //======================================================\n\n    /**\n     * ユーザIDを返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserId: state => {\n      let n = 0\n\n      try {      \n        let nStr = state.targetUserData.id\n        n = parseInt(nStr)\n      } catch (error) {        \n          console.error(error);      \n      }\n\n      return n\n    },   \n\n    //======================================================\n    //\n    // 2-4. ユーザID（文字列1）を返す\n    //\n    //======================================================\n\n    /**\n     * ユーザID（文字列）を返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserIdStr: state => {\n      return state.targetUserData.idStr\n    },   \n    \n    //======================================================\n    //\n    // 2-5. ユーザ名を返す\n    //\n    //======================================================\n\n    /**\n     * ユーザ名を返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserName: state => {\n      return state.targetUserData.name\n    },        \n    \n    //======================================================\n    //\n    // 2-6. ユーザのプロフィール画像を返す\n    //\n    //======================================================\n\n    /**\n     * ユーザのプロフィール画像を返す\n     * \n     * @param {} state \n     * @returns \n     */\n    getTargetUserProfileImagerUrl: state => {\n      return state.targetUserData.profileImageUrl\n    },   \n\n    //======================================================\n    //\n    // 2-7. BGMの候補を返す\n    //\n    //======================================================    \n\n    /**\n     * BGMの候補を返す\n     * \n     * @param {*} state \n     * @returns \n     */\n    getBgms: state => {\n      return state.bgms\n    },\n\n    //======================================================\n    //\n    // 2-8. 背景画像の候補を返す\n    //\n    //======================================================    \n\n    /**\n     * 背景画像の候補を返す\n     * \n     * @param {*} state \n     * @returns \n     */\n    getBgImages: state => {\n      return state.bgImages\n    },\n\n    //======================================================\n    //\n    // 2-9. ゲストユーザアイコンの候補を返す\n    //\n    //======================================================    \n\n    /**\n     * ゲストユーザアイコンの候補を返す\n     * \n     * @param {*} state \n     * @returns \n     */\n    getGuestUserIcons: state => {\n      return state.guestUserIcons\n    },    \n\n    //======================================================\n    //\n    // 2-10. ミュート中かを返す\n    //\n    //======================================================\n\n    /**\n     * \n     * @param {*} state \n     * @returns \n     */\n    getIsMuting: state => {\n      return state.isMuting;\n    },\n\n    //======================================================\n    //\n    // 2-11. BGM再生中かを返す\n    //\n    //======================================================\n\n    /**\n     * \n     * @param {*} state \n     * @returns \n     */\n    getIsBgmPlaying: state => {\n      console.log(state.isBgmPlaying)\n\n      return state.isBgmPlaying;\n    },\n\n    //======================================================\n    // その他\n    //======================================================\n\n    getTwitterUser: state => {\n      return state.twitterUser      \n    },\n\n    getBgmVolume: state => {    \n      return state.bgmVolume     \n    },\n    getBgmFileName: state => {\n      return state.bgmFileName      \n    },    \n  },\n\n  //======================================================\n  //\n  // 3. Mutation（Storeの値の変更）\n  //\n  //======================================================\n\n  mutations: {\n\n    //======================================================\n    //\n    // 3-1. ユーザデータのセット\n    //\n    //======================================================\n\n    /**\n     * ユーザデータのセット\n     *   ・state、cookieにセット\n     * \n     * @param {} state \n     * @param {*} d \n     */\n    setTargetUserData(state, d) {\n      try {\n        state.targetUserData = d\n        // Cookieに値をセット\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID, d.id);     \n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID_STR, d.idStr);        \n        cookies.set(CONSTANTS.COOKIE_KEY_USER_NAME, d.name)\n        cookies.set(CONSTANTS.COOKIE_KEY_PROFILE_IMAGE_URL, d.profileImageUrl)    \n        \n        console.log(d)\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    //======================================================\n    //\n    // 3-2. ユーザデータのクリア\n    //\n    //======================================================\n\n    /**\n     * ユーザデータのクリア\n     * @param {} state \n     * @param {*} d \n     */\n    clearUserData(state) {\n      try {\n        state.targetUserData.id = 0        \n        state.targetUserData.idStr = \"\"\n        state.targetUserData.name = \"\"\n        state.targetUserData.profileImageUrl = \"\"\n\n        // Cookieに値をセット\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID, \"\");           \n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID_STR, \"\");        \n        cookies.set(CONSTANTS.COOKIE_KEY_USER_NAME, \"\")\n        cookies.set(CONSTANTS.COOKIE_KEY_USER_ID_STR, \"\")     \n        \n        console.log(\"ユーザデータをクリア\")\n      } catch (error) {\n        // エラーが発生した場合の処理\n        console.error(error);\n      }\n    },    \n\n    //======================================================\n    //\n    // 3-3. ミュート中かをセット\n    //\n    //======================================================\n\n    /**\n     * ミュート中かをセット\n     * \n     * @param {} state \n     * @param {*} d \n     */\n    setIsMuting(state, payload) {\n      state.isMuting = payload\n    },\n\n    //======================================================\n    //\n    // 3-4. BGM再生中かをセット\n    //\n    //======================================================\n\n    /**\n     * BGM再生中かをセット\n     * @param {} state \n     * @param {*} d \n     */\n    setIsBgmPlaying(state, payload) {\n      state.isBgmPlaying = payload\n\n      console.log(\"[BGM再生状態]\" + payload)\n    },    \n\n    /**\n     * \n     * @param {*} state \n     * @param {*} payload \n     */\n    setTwitterUser(state, payload) {\n      console.log(\"setTwitterUser.\")\n      console.log(payload)\n\n      state.twitterUser = payload\n      state.twitterUserId = payload.id\n      state.count = 10\n    },\n\n    setBgmVolume(state, payload) {\n      state.bgmVolume = payload\n    },    \n    setBgmFileName(state, payload) {\n      state.bgmFileName = payload\n    },       \n  },\n\n  //======================================================\n  //\n  // 4. Action\n  //\n  //======================================================\n\n  actions: {\n    sendDataToFB() {\n      console.log(\"send.\")\n    }\n  },\n})\n\n//======================================================\n//\n// その他\n//\n//======================================================\n\n/**\n * Cookieの値を返す\n * \n * @param  key \n */\nfunction getCookie(key){\n  try {\n    const v = cookies.get(key);\n    if (v !== undefined && v !== null) {\n      return v\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return \"\"\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,QAAQ,uBAAuB;AACjD,SAASC,WAAW,QAAQ,MAAM;AAClC,OAAOC,IAAI,MAAM,gBAAgB;AACjC,SAASC,UAAU,QAAQ,cAAc;;AAEzC;AACA,MAAM;EAAEC;AAAQ,CAAC,GAAGD,UAAU,EAAE;;AAEhC;AACA;AACA;AACA,eAAeF,WAAW,CAAC;EAEzB;EACAI,OAAO,EAAE;IACPH;EACF,CAAC;EAED;EACA;EACA;EACA;EACA;;EAEAI,KAAK,EAAE;IACLC,WAAW,EAAE;MACXC,EAAE,EAAE,EAAE;MACNC,IAAI,EAAE,EAAE;MACRC,UAAU,EAAE,EAAE;MACdC,eAAe,EAAE;IACnB,CAAC;IACD;IACAC,cAAc,EAAE;MACdJ,EAAE,EAAE,CAAC;MACLK,KAAK,EAAE,EAAE;MACTJ,IAAI,EAAE,EAAE;MACRE,eAAe,EAAE;IACnB,CAAC;IACDG,aAAa,EAAE,EAAE;IACjB;IACAC,YAAY,EAAE,KAAK;IACnB;IACAC,QAAQ,EAAE,KAAK;IACf;IACAC,SAAS,EAAE,GAAG;IACdC,WAAW,EAAE,EAAE;IACfC,WAAW,EAAE,KAAK;IAElB;IACAC,IAAI,EAAE,CACJ;MACEC,KAAK,EAAE,WAAW;MAClBC,QAAQ,EAAEC,OAAO,CAAC,4BAA4B;IAChD,CAAC,EACD;MACEF,KAAK,EAAE,cAAc;MACrBC,QAAQ,EAAEC,OAAO,CAAC,+BAA+B;IACnD,CAAC,EACD;MACEF,KAAK,EAAE,qBAAqB;MAC5BC,QAAQ,EAAEC,OAAO,CAAC,sCAAsC;IAC1D,CAAC,EACD;MACEF,KAAK,EAAE,MAAM;MACbC,QAAQ,EAAEC,OAAO,CAAC,uBAAuB;IAC3C,CAAC,EACD;MACEF,KAAK,EAAE,SAAS;MAChBC,QAAQ,EAAEC,OAAO,CAAC,0BAA0B;IAC9C,CAAC,CACF;IACD;IACAC,QAAQ,EAAE,CACR;MACEH,KAAK,EAAE,KAAK;MACZC,QAAQ,EAAEC,OAAO,CAAC,0BAA0B;IAC9C,CAAC,EACD;MACEF,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAEC,OAAO,CAAC,0BAA0B;IAC9C,CAAC,EACD;MACEF,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAEC,OAAO,CAAC,0BAA0B;IAC9C,CAAC,CACF;IACD;IACAE,cAAc,EAAE,CACdF,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,oCAAoC,CAAC;EAEjD,CAAC;EAED;EACA;EACA;EACA;EACA;;EAEAG,OAAO,EAAE;IAEP;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIC,aAAa,EAAErB,KAAK,IAAI;MACtB,IAAI;QACF;QACA,IAAIA,KAAK,CAACM,cAAc,CAACH,IAAI,IAAI,EAAE,EAAE;UACnCmB,OAAO,CAACC,GAAG,CAAC,wBAAwB,GAAGvB,KAAK,CAACwB,QAAQ,CAACrB,IAAI,CAAC;UAE3D,OAAO,IAAI;QACb;;QAEA;QACA,MAAMsB,KAAK,GAAGC,SAAS,CAAChC,SAAS,CAACiC,oBAAoB,CAAC;QACvDL,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGE,KAAK,CAAC;QAEpC,IAAIA,KAAK,KAAK,EAAE,EAAE;UAChBH,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAGE,KAAK,CAAC;UAE9C,OAAO,IAAI;QACb;QAEAH,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACxB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACd;QACAN,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC;MACtB;MAEA,OAAO,KAAK;IACd,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIC,iBAAiB,EAAE7B,KAAK,IAAI;MAC1B,IAAI;QACF;QACA,IAAIA,KAAK,CAACM,cAAc,CAACH,IAAI,KAAK,EAAE,EAAE;UACpC;UACA,MAAMsB,KAAK,GAAGC,SAAS,CAAChC,SAAS,CAACiC,oBAAoB,CAAC;UACvD,IAAIF,KAAK,KAAK,EAAE,EAAE;YAChBzB,KAAK,CAACM,cAAc,CAACH,IAAI,GAAGsB,KAAK;YACjCzB,KAAK,CAACM,cAAc,CAACC,KAAK,GAAGmB,SAAS,CAAChC,SAAS,CAACoC,sBAAsB,CAAC;YACxE9B,KAAK,CAACM,cAAc,CAACD,eAAe,GAAGqB,SAAS,CAAChC,SAAS,CAACqC,4BAA4B,CAAC;YAExF,IAAIC,IAAI,GAAGN,SAAS,CAAChC,SAAS,CAACuC,kBAAkB,CAAC;YAClD,IAAID,IAAI,KAAK,EAAE,EAAE;cACfhC,KAAK,CAACM,cAAc,CAACJ,EAAE,GAAGgC,QAAQ,CAACF,IAAI,CAAC;YAC1C;YAEAV,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGvB,KAAK,CAACM,cAAc,CAAC;UACvD;QACF;MACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC;MACtB;MAEA,OAAO5B,KAAK,CAACM,cAAc;IAC7B,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI6B,eAAe,EAAEnC,KAAK,IAAI;MACxB,IAAIoC,CAAC,GAAG,CAAC;MAET,IAAI;QACF,IAAIJ,IAAI,GAAGhC,KAAK,CAACM,cAAc,CAACJ,EAAE;QAClCkC,CAAC,GAAGF,QAAQ,CAACF,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACZN,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC;MACxB;MAEA,OAAOQ,CAAC;IACV,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIC,kBAAkB,EAAErC,KAAK,IAAI;MAC3B,OAAOA,KAAK,CAACM,cAAc,CAACC,KAAK;IACnC,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI+B,iBAAiB,EAAEtC,KAAK,IAAI;MAC1B,OAAOA,KAAK,CAACM,cAAc,CAACH,IAAI;IAClC,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIoC,6BAA6B,EAAEvC,KAAK,IAAI;MACtC,OAAOA,KAAK,CAACM,cAAc,CAACD,eAAe;IAC7C,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACImC,OAAO,EAAExC,KAAK,IAAI;MAChB,OAAOA,KAAK,CAACc,IAAI;IACnB,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI2B,WAAW,EAAEzC,KAAK,IAAI;MACpB,OAAOA,KAAK,CAACkB,QAAQ;IACvB,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIwB,iBAAiB,EAAE1C,KAAK,IAAI;MAC1B,OAAOA,KAAK,CAACmB,cAAc;IAC7B,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;IACIwB,WAAW,EAAE3C,KAAK,IAAI;MACpB,OAAOA,KAAK,CAACU,QAAQ;IACvB,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;IACIkC,eAAe,EAAE5C,KAAK,IAAI;MACxBsB,OAAO,CAACC,GAAG,CAACvB,KAAK,CAACS,YAAY,CAAC;MAE/B,OAAOT,KAAK,CAACS,YAAY;IAC3B,CAAC;IAED;IACA;IACA;;IAEAoC,cAAc,EAAE7C,KAAK,IAAI;MACvB,OAAOA,KAAK,CAACC,WAAW;IAC1B,CAAC;IAED6C,YAAY,EAAE9C,KAAK,IAAI;MACrB,OAAOA,KAAK,CAACW,SAAS;IACxB,CAAC;IACDoC,cAAc,EAAE/C,KAAK,IAAI;MACvB,OAAOA,KAAK,CAACY,WAAW;IAC1B;EACF,CAAC;EAED;EACA;EACA;EACA;EACA;;EAEAoC,SAAS,EAAE;IAET;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,iBAAiBA,CAACjD,KAAK,EAAEkD,CAAC,EAAE;MAC1B,IAAI;QACFlD,KAAK,CAACM,cAAc,GAAG4C,CAAC;QACxB;QACApD,OAAO,CAACqD,GAAG,CAACzD,SAAS,CAACuC,kBAAkB,EAAEiB,CAAC,CAAChD,EAAE,CAAC;QAC/CJ,OAAO,CAACqD,GAAG,CAACzD,SAAS,CAACoC,sBAAsB,EAAEoB,CAAC,CAAC3C,KAAK,CAAC;QACtDT,OAAO,CAACqD,GAAG,CAACzD,SAAS,CAACiC,oBAAoB,EAAEuB,CAAC,CAAC/C,IAAI,CAAC;QACnDL,OAAO,CAACqD,GAAG,CAACzD,SAAS,CAACqC,4BAA4B,EAAEmB,CAAC,CAAC7C,eAAe,CAAC;QAEtEiB,OAAO,CAACC,GAAG,CAAC2B,CAAC,CAAC;MAChB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;IACIwB,aAAaA,CAACpD,KAAK,EAAE;MACnB,IAAI;QACFA,KAAK,CAACM,cAAc,CAACJ,EAAE,GAAG,CAAC;QAC3BF,KAAK,CAACM,cAAc,CAACC,KAAK,GAAG,EAAE;QAC/BP,KAAK,CAACM,cAAc,CAACH,IAAI,GAAG,EAAE;QAC9BH,KAAK,CAACM,cAAc,CAACD,eAAe,GAAG,EAAE;;QAEzC;QACAP,OAAO,CAACqD,GAAG,CAACzD,SAAS,CAACuC,kBAAkB,EAAE,EAAE,CAAC;QAC7CnC,OAAO,CAACqD,GAAG,CAACzD,SAAS,CAACoC,sBAAsB,EAAE,EAAE,CAAC;QACjDhC,OAAO,CAACqD,GAAG,CAACzD,SAAS,CAACiC,oBAAoB,EAAE,EAAE,CAAC;QAC/C7B,OAAO,CAACqD,GAAG,CAACzD,SAAS,CAACoC,sBAAsB,EAAE,EAAE,CAAC;QAEjDR,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MAC3B,CAAC,CAAC,OAAOK,KAAK,EAAE;QACd;QACAN,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIyB,WAAWA,CAACrD,KAAK,EAAEsD,OAAO,EAAE;MAC1BtD,KAAK,CAACU,QAAQ,GAAG4C,OAAO;IAC1B,CAAC;IAED;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;IACIC,eAAeA,CAACvD,KAAK,EAAEsD,OAAO,EAAE;MAC9BtD,KAAK,CAACS,YAAY,GAAG6C,OAAO;MAE5BhC,OAAO,CAACC,GAAG,CAAC,WAAW,GAAG+B,OAAO,CAAC;IACpC,CAAC;IAED;AACJ;AACA;AACA;AACA;IACIE,cAAcA,CAACxD,KAAK,EAAEsD,OAAO,EAAE;MAC7BhC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BD,OAAO,CAACC,GAAG,CAAC+B,OAAO,CAAC;MAEpBtD,KAAK,CAACC,WAAW,GAAGqD,OAAO;MAC3BtD,KAAK,CAACQ,aAAa,GAAG8C,OAAO,CAACpD,EAAE;MAChCF,KAAK,CAACyD,KAAK,GAAG,EAAE;IAClB,CAAC;IAEDC,YAAYA,CAAC1D,KAAK,EAAEsD,OAAO,EAAE;MAC3BtD,KAAK,CAACW,SAAS,GAAG2C,OAAO;IAC3B,CAAC;IACDK,cAAcA,CAAC3D,KAAK,EAAEsD,OAAO,EAAE;MAC7BtD,KAAK,CAACY,WAAW,GAAG0C,OAAO;IAC7B;EACF,CAAC;EAED;EACA;EACA;EACA;EACA;;EAEAM,OAAO,EAAE;IACPC,YAAYA,CAAA,EAAG;MACbvC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACtB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASG,SAASA,CAACoC,GAAG,EAAC;EACrB,IAAI;IACF,MAAMC,CAAC,GAAGjE,OAAO,CAACkE,GAAG,CAACF,GAAG,CAAC;IAC1B,IAAIC,CAAC,KAAKE,SAAS,IAAIF,CAAC,KAAK,IAAI,EAAE;MACjC,OAAOA,CAAC;IACV;EACF,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC;EACtB;EAEA,OAAO,EAAE;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}