{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//======================================================\n//\n// FirabaseManager.js FireBase関連の処理管理用\n//\n// [索引]\n//  □ 1-1. 匿名認証実行\n//  □ 1-2. google認証実行\n//  □ 1-3. Twitter認証実行\n//\n//  □ 2-1. FireBaseDBの特定キーにデータを追加\n//  □ 2-2. FireBaseDBの特定のキーを更新\n//  □ 2-3. FireBaseDBの特定のキーを削除\n//  □ 2-4. FireBaseDBの特定のキーを監視\n//\n//  □ 3-1. チャットデータを追加\n//  □ 3-2. 対象の部屋のChatsデータを監視\n//  □ 3-3. 対象の部屋のListnerデータを監視\n//  □ 3-4. 対象の部屋のListnerデータを削除\n//\n//======================================================\n\n// FireBase\nimport { getDatabase, ref, set, get, push, onValue, remove } from \"firebase/database\";\n// FireBase認証\nimport { getAuth, signInAnonymously, onAuthStateChanged, signInWithRedirect, GoogleAuthProvider, getRedirectResult, TwitterAuthProvider, setPersistence, browserLocalPersistence } from \"firebase/auth\";\n\n// 定数\nimport { CONSTANTS } from \"../consts/ConstantVals\";\n\n// ユーザ情報\nlet authedUser;\n\n// ログイン済か\nlet hasLoginned;\n\n//======================================================\n//\n// 1-1. 匿名認証実行\n//\n//======================================================\n\n/**\n * 匿名認証実行\n */\nexport async function initAuthAnonymous() {\n  const auth = getAuth();\n  signInAnonymously(auth).then(() => {\n    console.log(\"[google匿名認証実行]\");\n  }).catch(error => {\n    console.log(error.message);\n  });\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      //console.log(user.uid)\n    }\n  });\n}\n\n//======================================================\n//\n// 1-2. google認証実行\n//\n//======================================================\n\n/**\n * google認証実行\n */\nexport async function initAuthByGoogle() {\n  const auth = getAuth();\n  // ユーザー情報を取得\n  await getRedirectResult(auth).then(result => {\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    const authedUser = result.user;\n    console.log(`ログイン情報：${authedUser} ${token}`);\n    console.log(authedUser);\n    console.log(authedUser.displayName);\n    hasLoginned = true;\n    return;\n  }).catch(error => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    console.log(`Error!! ${errorCode}${errorMessage}${credential}`);\n  });\n  console.log(`ログイン済：${hasLoginned}`);\n  if (hasLoginned) {\n    return;\n  }\n  const provider = new GoogleAuthProvider();\n  signInWithRedirect(auth, provider).then(result => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    authedUser = result.user;\n    // IdP data available using getAdditionalUserInfo(result)\n    console.log(`sined in by google ${authedUser} ${token}`);\n  }).catch(error => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n\n    console.log(`Error!! ${errorCode}${errorMessage}${email}${credential}`);\n  });\n}\n\n//======================================================\n//\n// 1-3. Twitter認証実行\n//\n//======================================================\n\n/**\n * Twitter認証実行\n */\nexport async function initAuthByTwitter() {\n  const auth = getAuth();\n  const provider = new TwitterAuthProvider();\n  console.log(`ログイン情報：${authedUser}`);\n  console.log(`ログイン済：${hasLoginned}`);\n  if (hasLoginned) {\n    return;\n  }\n  setPersistence(auth, browserLocalPersistence).then(() => {\n    signInWithRedirect(auth, provider).then(() => {\n      getRedirectResult(auth).then(result => {\n        authedUser = result.user;\n        console.log(authedUser);\n        console.log(authedUser.displayName);\n      });\n    });\n  });\n}\n\n//======================================================\n//\n// 2-1. FireBaseDBの特定キーにデータを追加\n//\n//======================================================\n\n/**\n * FireBaseDBの特定キーにデータを追加\n * \n * @param {*} key \n * @param {*} val \n */\nexport async function pushDataToDB(key, val) {\n  try {\n    // データを追加\n    const newRef = await push(ref(getDatabase(), key), val);\n    //console.log(newRef);   \n\n    return newRef.key;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 2-2. FireBaseDBの特定のキーを更新\n//\n//======================================================\n\n/**\n * FireBaseDBの特定のキーを更新\n * \n * @param string key \n * @param callback \n */\nexport async function updateTargetKey(key, val) {\n  try {\n    const db = getDatabase();\n    await set(ref(db, key), val);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 2-3. FireBaseDBの特定のキーを削除\n//\n//======================================================\n\n/**\n * FireBaseDBの特定のキーを削除\n * \n * @param string key \n */\nexport async function deleteTargetKey(keyToDelete) {\n  try {\n    await remove(ref(getDatabase(), keyToDelete)).then(() => {\n      console.log(\"[削除が完了しました]\" + keyToDelete);\n    }).catch(error => {\n      console.error(\"削除中にエラーが発生しました\", error);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 2-4. FireBaseの特定のキーのデータを取得（※未作成）\n//\n//======================================================\n\n/**\n * FireBaseDBの特定のキーを監視\n * \n * @param string key \n * @param callback \n */\nexport async function getTargetKeyVal(key) {\n  let vals = [];\n  try {\n    const db = await getDatabase();\n    // 取得するキーを指定して、get()関数を呼び出す\n    await get(ref(db, key)).then(snapshot => {\n      if (snapshot.exists()) {\n        snapshot.forEach(function (childSnapshot) {\n          var childData = childSnapshot.val();\n          vals.push(childData);\n        });\n      } else {\n        console.log(\"データが存在しません \" + key);\n      }\n    }).catch(error => {\n      console.error(\"データの取得中にエラーが発生しました\", error);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n  return vals;\n}\n\n//======================================================\n//\n// 2-5. FireBaseDBの特定のキーを監視\n//\n//======================================================\n\n/**\n * FireBaseDBの特定のキーを監視\n * \n * @param string key \n * @param callback \n */\nexport async function watchTargetKey(key, callback) {\n  try {\n    const dbRef = await ref(getDatabase(), key);\n    onValue(dbRef, callback);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 3-1. FireBaseDBにチャットデータを追加\n//\n//======================================================\n\n/**\n * FireBaseDBにチャットデータを追加\n * \n * @param {*} roomID    部屋ID\n * @param {*} chatData  チャットデータ\n */\nexport function addChatDataToDB(roomID, chatData) {\n  try {\n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_CHATS}/${roomID}`;\n    // データを追加\n    pushDataToDB(dbKey, chatData);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 3-2. 対象の部屋のChatsデータを監視\n//\n//======================================================\n\n/**\n * 対象の部屋のChatsデータを監視\n *  ・データは逆順に取得する\n * \n * @param {*} roomId \n * @param {*} chats \n */\nexport function watchTargetRoomChats(roomId, callback) {\n  try {\n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_CHATS}/${roomId}`;\n    console.log(\"[FirebaseDB Chatsキー]\" + dbKey);\n\n    // chatsテーブルの変更を監視\n    watchTargetKey(dbKey, snapshot => {\n      var dataArray = [];\n      snapshot.forEach(function (childSnapshot) {\n        var childData = childSnapshot.val();\n        dataArray.push(childData);\n      });\n\n      // 配列を逆順にする\n      dataArray.reverse();\n      console.log('[chatsデータ監視]');\n\n      // データをセット\n      //chats = dataArray;\n      callback(dataArray);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 4-1. 対象の部屋のListnerデータを監視\n//\n//======================================================\n\n/**\n * 対象の部屋のListnerデータを監視\n * \n * @param {*} roomId \n * @param {*} chats \n */\nexport async function watchTargetRoomListnerDatas(roomId, callback) {\n  try {\n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_LISTNERS}/${roomId}`;\n    console.log(\"[FirebaseDB Listnersキー]\" + dbKey);\n\n    // chatsテーブルの変更を監視\n    await watchTargetKey(dbKey, snapshot => {\n      var dataArray = [];\n      snapshot.forEach(function (childSnapshot) {\n        var childData = childSnapshot.val();\n        dataArray.push(childData);\n      });\n      console.log('[listnersデータ監視]');\n\n      // データをセット      \n      callback(dataArray);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 4-2. 対象の部屋のListnerデータを取得\n//\n//======================================================\n\n/**\n * 対象の部屋のListnerデータを取得\n * \n * @param {*} roomId \n * @param {*} chats \n */\nexport async function getTargetRoomListnerDatas(roomId) {\n  let vals = [];\n  try {\n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_LISTNERS}/${roomId}`;\n    console.log(\"[FirebaseDB Listnersキー]\" + dbKey);\n\n    // chatsテーブルの変更を監視\n    vals = await getTargetKeyVal(dbKey);\n    //console.log(\"[FireBaseListnerデータ取得]\")\n    //console.log(vals)\n  } catch (error) {\n    console.error(error);\n  }\n  return vals;\n}\n\n//======================================================\n//\n// 4-3. FireBaseDBにListnerデータを追加\n//\n//======================================================\n\n/**\n * FireBaseDBにListnerデータを追加\n * \n * @param {*} roomID       部屋ID\n * @param {*} listnerData  listnerデータ\n */\nexport async function addListnerDataToDB(roomId, listnerData) {\n  try {\n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_LISTNERS}/${roomId}`;\n    // 入室済みならスキップ\n    const res = await checkTargetUserAlreadyJoinedToTargetRoom(roomId, listnerData.userId);\n    if (res) {\n      console.log(\"[入室済みなのでListnerデータ登録スキップ]\");\n      return;\n    }\n\n    // データ追加\n    const insertedKey = await pushDataToDB(dbKey, listnerData);\n    console.log(insertedKey);\n    return insertedKey;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 4-4. FireBaseDBから対象Listnerデータを削除\n//\n//======================================================\n\n/**\n * FireBaseDBから対象Listnerデータを削除\n * \n * @param {*} roomId       部屋ID\n * @param {*} key  listnerデータ\n */\nexport async function removeTargetListnerDataFromDB(roomId, key) {\n  try {\n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_LISTNERS}/${roomId}/${key}`;\n    console.log(`[Lisnerデータをfirebaseから削除] ${dbKey}`);\n    await deleteTargetKey(dbKey);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 4-5. 対象のroom_lisntersに該当ユーザIDのListnerが存在するかを返す\n//\n//======================================================\n\n/**\n * 対象のroom_lisntersに該当ユーザIDのListnerが存在するかを返す\n * \n * @param {*} roomId \n * @param {*} tUserId \n */\nexport async function checkTargetUserAlreadyJoinedToTargetRoom(roomId, tUserId) {\n  let res = false;\n  try {\n    //console.log(\"入室済か判定\")\n    const vals = await getTargetRoomListnerDatas(roomId);\n    vals.forEach(function (v) {\n      if (v.userId === tUserId) {\n        console.log(\"[入室済]\" + tUserId);\n        res = true;\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n  return res;\n}","map":{"version":3,"names":["getDatabase","ref","set","get","push","onValue","remove","getAuth","signInAnonymously","onAuthStateChanged","signInWithRedirect","GoogleAuthProvider","getRedirectResult","TwitterAuthProvider","setPersistence","browserLocalPersistence","CONSTANTS","authedUser","hasLoginned","initAuthAnonymous","auth","then","console","log","catch","error","message","user","initAuthByGoogle","result","credential","credentialFromResult","token","accessToken","displayName","errorCode","code","errorMessage","credentialFromError","provider","email","customData","initAuthByTwitter","pushDataToDB","key","val","newRef","updateTargetKey","db","deleteTargetKey","keyToDelete","getTargetKeyVal","vals","snapshot","exists","forEach","childSnapshot","childData","watchTargetKey","callback","dbRef","addChatDataToDB","roomID","chatData","dbKey","FB_TABLE_ROOM_CHATS","watchTargetRoomChats","roomId","dataArray","reverse","watchTargetRoomListnerDatas","FB_TABLE_ROOM_LISTNERS","getTargetRoomListnerDatas","addListnerDataToDB","listnerData","res","checkTargetUserAlreadyJoinedToTargetRoom","userId","insertedKey","removeTargetListnerDataFromDB","tUserId","v"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/utils/FirebaseManager.js"],"sourcesContent":["//======================================================\n//\n// FirabaseManager.js FireBase関連の処理管理用\n//\n// [索引]\n//  □ 1-1. 匿名認証実行\n//  □ 1-2. google認証実行\n//  □ 1-3. Twitter認証実行\n//\n//  □ 2-1. FireBaseDBの特定キーにデータを追加\n//  □ 2-2. FireBaseDBの特定のキーを更新\n//  □ 2-3. FireBaseDBの特定のキーを削除\n//  □ 2-4. FireBaseDBの特定のキーを監視\n//\n//  □ 3-1. チャットデータを追加\n//  □ 3-2. 対象の部屋のChatsデータを監視\n//  □ 3-3. 対象の部屋のListnerデータを監視\n//  □ 3-4. 対象の部屋のListnerデータを削除\n//\n//======================================================\n\n// FireBase\nimport { getDatabase, ref, set, get, push, onValue, remove } from \"firebase/database\";\n// FireBase認証\nimport {  getAuth, signInAnonymously, onAuthStateChanged, signInWithRedirect, \n          GoogleAuthProvider, getRedirectResult, TwitterAuthProvider,\n          setPersistence, browserLocalPersistence\n       } from \"firebase/auth\";\n\n// 定数\nimport { CONSTANTS } from \"../consts/ConstantVals\"\n\n// ユーザ情報\nlet authedUser;\n\n// ログイン済か\nlet hasLoginned;\n\n//======================================================\n//\n// 1-1. 匿名認証実行\n//\n//======================================================\n\n/**\n * 匿名認証実行\n */\nexport async function initAuthAnonymous() {\n  const auth = getAuth();\n  signInAnonymously(auth)\n    .then(() => {\n      console.log(\"[google匿名認証実行]\")\n    })\n    .catch((error) => {\n      console.log(error.message);\n    });\n\n  onAuthStateChanged(auth, (user) => {\n    if (user) {\n      //console.log(user.uid)\n    }\n  });    \n}\n\n//======================================================\n//\n// 1-2. google認証実行\n//\n//======================================================\n\n/**\n * google認証実行\n */\nexport async function initAuthByGoogle() {\n  const auth = getAuth();\n  // ユーザー情報を取得\n  await getRedirectResult(auth).then((result) => {\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    const authedUser = result.user;\n\n    console.log(`ログイン情報：${authedUser} ${token}`);\n    console.log(authedUser);\n    console.log(authedUser.displayName);\n    hasLoginned = true;\n\n    return\n  }).catch((error) => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    const credential = GoogleAuthProvider.credentialFromError(error);\n\n    console.log(`Error!! ${errorCode}${errorMessage}${credential}`)\n  });\n\n  console.log(`ログイン済：${hasLoginned}`)\n\n  if (hasLoginned) {\n    return;\n  }\n\n  const provider = new GoogleAuthProvider();\n  signInWithRedirect(auth, provider).then((result) => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    authedUser = result.user;\n    // IdP data available using getAdditionalUserInfo(result)\n    console.log(`sined in by google ${authedUser} ${token}`)\n  }).catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n\n    console.log(`Error!! ${errorCode}${errorMessage}${email}${credential}`)\n  });\n}\n\n//======================================================\n//\n// 1-3. Twitter認証実行\n//\n//======================================================\n\n/**\n * Twitter認証実行\n */\nexport async function initAuthByTwitter() {\n  const auth = getAuth();  \n  const provider = new TwitterAuthProvider();\n\n  console.log(`ログイン情報：${authedUser}`)\n  console.log(`ログイン済：${hasLoginned}`)\n\n  if (hasLoginned) {\n    return;\n  }\n\n  setPersistence(auth,browserLocalPersistence).then(() => {\n    signInWithRedirect(auth, provider).then(() => {\n      getRedirectResult(auth)\n        .then((result) => {\n          authedUser = result.user;\n\n          console.log(authedUser);\n          console.log(authedUser.displayName);          \n        });\n    });\n  })\n}\n\n//======================================================\n//\n// 2-1. FireBaseDBの特定キーにデータを追加\n//\n//======================================================\n\n/**\n * FireBaseDBの特定キーにデータを追加\n * \n * @param {*} key \n * @param {*} val \n */\nexport async function pushDataToDB(key, val) {\n  try {      \n    // データを追加\n    const newRef = await push(ref(getDatabase(), key), val);\n    //console.log(newRef);   \n\n    return newRef.key;\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 2-2. FireBaseDBの特定のキーを更新\n//\n//======================================================\n\n/**\n * FireBaseDBの特定のキーを更新\n * \n * @param string key \n * @param callback \n */\nexport async function updateTargetKey(key, val) {\n  try {      \n    const db = getDatabase();\n    await set(ref(db, key), val);\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 2-3. FireBaseDBの特定のキーを削除\n//\n//======================================================\n\n/**\n * FireBaseDBの特定のキーを削除\n * \n * @param string key \n */\nexport async function deleteTargetKey(keyToDelete) {\n  try {      \n    await remove(ref(getDatabase(), keyToDelete))\n      .then(() => {\n        console.log(\"[削除が完了しました]\" + keyToDelete);\n      })\n      .catch((error) => {\n        console.error(\"削除中にエラーが発生しました\", error);\n      });\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 2-4. FireBaseの特定のキーのデータを取得（※未作成）\n//\n//======================================================\n\n/**\n * FireBaseDBの特定のキーを監視\n * \n * @param string key \n * @param callback \n */\nexport async function getTargetKeyVal(key) {\n  let vals = [];\n\n  try {      \n    const db = await getDatabase();\n    // 取得するキーを指定して、get()関数を呼び出す\n    await get(ref(db, key))\n      .then((snapshot) => {\n        if (snapshot.exists()) {\n          snapshot.forEach(function(childSnapshot) {\n            var childData = childSnapshot.val();\n            vals.push(childData);\n          });        \n        } else {\n          console.log(\"データが存在しません \" + key);\n        }\n      })\n      .catch((error) => {\n        console.error(\"データの取得中にエラーが発生しました\", error);\n      });\n  } catch (error) {        \n    console.error(error);      \n  }\n\n  return vals;\n}\n\n//======================================================\n//\n// 2-5. FireBaseDBの特定のキーを監視\n//\n//======================================================\n\n/**\n * FireBaseDBの特定のキーを監視\n * \n * @param string key \n * @param callback \n */\nexport async function watchTargetKey(key, callback) {\n  try {      \n    const dbRef = await ref(getDatabase(), key);\n    onValue(dbRef, callback)\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 3-1. FireBaseDBにチャットデータを追加\n//\n//======================================================\n\n/**\n * FireBaseDBにチャットデータを追加\n * \n * @param {*} roomID    部屋ID\n * @param {*} chatData  チャットデータ\n */\nexport function addChatDataToDB(roomID, chatData) {\n  try {      \n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_CHATS}/${roomID}`\n    // データを追加\n    pushDataToDB(dbKey, chatData)\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 3-2. 対象の部屋のChatsデータを監視\n//\n//======================================================\n\n/**\n * 対象の部屋のChatsデータを監視\n *  ・データは逆順に取得する\n * \n * @param {*} roomId \n * @param {*} chats \n */\nexport function watchTargetRoomChats(roomId, callback) {\n  try {      \n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_CHATS}/${roomId}`\n    console.log(\"[FirebaseDB Chatsキー]\" + dbKey)\n\n    // chatsテーブルの変更を監視\n    watchTargetKey(dbKey, (snapshot) => {\n      var dataArray = [];\n      snapshot.forEach(function(childSnapshot) {\n        var childData = childSnapshot.val();\n        dataArray.push(childData);\n      });\n\n      // 配列を逆順にする\n      dataArray.reverse();\n      console.log('[chatsデータ監視]')\n\n      // データをセット\n      //chats = dataArray;\n      callback(dataArray)\n    })\n  } catch (error) {        \n    console.error(error);      \n  }  \n}\n\n//======================================================\n//\n// 4-1. 対象の部屋のListnerデータを監視\n//\n//======================================================\n\n/**\n * 対象の部屋のListnerデータを監視\n * \n * @param {*} roomId \n * @param {*} chats \n */\nexport async function watchTargetRoomListnerDatas(roomId, callback) {\n  try {      \n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_LISTNERS}/${roomId}`\n    console.log(\"[FirebaseDB Listnersキー]\" + dbKey)\n\n    // chatsテーブルの変更を監視\n    await watchTargetKey(dbKey, (snapshot) => {\n      var dataArray = [];\n      snapshot.forEach(function(childSnapshot) {\n        var childData = childSnapshot.val();\n        dataArray.push(childData);\n      });\n\n      console.log('[listnersデータ監視]')\n\n      // データをセット      \n      callback(dataArray)\n    })\n  } catch (error) {        \n    console.error(error);      \n  }  \n}\n\n//======================================================\n//\n// 4-2. 対象の部屋のListnerデータを取得\n//\n//======================================================\n\n/**\n * 対象の部屋のListnerデータを取得\n * \n * @param {*} roomId \n * @param {*} chats \n */\nexport async function getTargetRoomListnerDatas(roomId) {\n  let vals = [];\n\n  try {      \n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_LISTNERS}/${roomId}`\n    console.log(\"[FirebaseDB Listnersキー]\" + dbKey)\n\n    // chatsテーブルの変更を監視\n    vals = await getTargetKeyVal(dbKey)\n    //console.log(\"[FireBaseListnerデータ取得]\")\n    //console.log(vals)\n  } catch (error) {        \n    console.error(error);      \n  }  \n\n  return vals;\n}\n\n//======================================================\n//\n// 4-3. FireBaseDBにListnerデータを追加\n//\n//======================================================\n\n/**\n * FireBaseDBにListnerデータを追加\n * \n * @param {*} roomID       部屋ID\n * @param {*} listnerData  listnerデータ\n */\nexport async function addListnerDataToDB(roomId, listnerData) {\n  try {      \n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_LISTNERS}/${roomId}`\n    // 入室済みならスキップ\n    const res = await checkTargetUserAlreadyJoinedToTargetRoom(roomId, listnerData.userId)\n    if (res) {\n      console.log(\"[入室済みなのでListnerデータ登録スキップ]\")\n\n      return\n    }\n\n    // データ追加\n    const insertedKey = await pushDataToDB(dbKey, listnerData)\n    console.log(insertedKey);   \n    \n    return insertedKey\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 4-4. FireBaseDBから対象Listnerデータを削除\n//\n//======================================================\n\n/**\n * FireBaseDBから対象Listnerデータを削除\n * \n * @param {*} roomId       部屋ID\n * @param {*} key  listnerデータ\n */\nexport async function removeTargetListnerDataFromDB(roomId, key) {\n  try {      \n    // キーをセット\n    const dbKey = `${CONSTANTS.FB_TABLE_ROOM_LISTNERS}/${roomId}/${key}`\n    console.log(`[Lisnerデータをfirebaseから削除] ${dbKey}`)\n\n    await deleteTargetKey(dbKey);\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 4-5. 対象のroom_lisntersに該当ユーザIDのListnerが存在するかを返す\n//\n//======================================================\n\n/**\n * 対象のroom_lisntersに該当ユーザIDのListnerが存在するかを返す\n * \n * @param {*} roomId \n * @param {*} tUserId \n */\nexport async function checkTargetUserAlreadyJoinedToTargetRoom(roomId, tUserId) {\n  let res = false\n\n  try {      \n    //console.log(\"入室済か判定\")\n    const vals = await getTargetRoomListnerDatas(roomId)\n    vals.forEach(function(v) {\n      if (v.userId === tUserId) {\n        console.log(\"[入室済]\" + tUserId)\n\n        res = true;\n      }\n    });\n  } catch (error) {        \n    console.error(error);      \n  }\n\n  return res\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}