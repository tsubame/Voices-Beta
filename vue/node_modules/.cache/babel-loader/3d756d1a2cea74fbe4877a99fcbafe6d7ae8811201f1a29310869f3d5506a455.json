{"ast":null,"code":"//======================================================\n//\n// Skyway関連の処理管理用\n//\n// [索引]\n//  □ 0.   トークン生成\n//  □ 1.   音声通話に参加（Publish、Subscribe）\n//  □ 1.   音声通話から退出（unPublish）\n//  □ 2.   対象の部屋の音声を聴取（Subscribe）\n//  □ 3-1. ミュート処理\n//  □ 3-2. ミュート解除\n//\n//======================================================\n\n// SkywaySDK\nimport * as SkywayModule from '@skyway-sdk/room';\n// 定数\nimport { CONSTANTS } from '@/consts/ConstantVals';\n// GoAPI\nimport { getAPIKeys } from '@/utils/GoAPIManager';\n\n// プレイヤーを表示\nconst SHOW_PLAYER = false;\n\n// トークン\nlet _token = {};\n// コンテキスト\nlet _context;\n// 自セッション\nlet _mySession;\n// 自音声のpublish\nlet _myPublication;\n// 部屋\nlet _room;\n// 部屋名\nlet _roomName;\n// 接続方法\nlet _cWay;\n// ユーザID\nlet _userId;\n// オーディオ要素\nlet _audio;\n// dom\nlet _dom;\n// 通話参加中か\nlet _isPublishing = false;\n\n//======================================================\n//\n// 0. 入室時初期処理\n//\n//======================================================\n\n/**\n * 入室時初期処理\n *  ・トークン生成\n *  ・対象IDの部屋に入る\n */\nexport async function joinToRoom(roomId, userId) {\n  try {\n    _userId = userId;\n    // トークン生成\n    await createToken();\n    // 部屋名をセット\n    _roomName = \"room\" + roomId;\n    // 接続方法にSFUをセット\n    _cWay = CONSTANTS.SKYWAY_CONNECT_WAY_SFU;\n    if (!CONSTANTS.SKYWAY_USE_SFU) {\n      _cWay = CONSTANTS.SKYWAY_CONNECT_WAY_P2P;\n    }\n\n    // 音声ストリーム生成\n    _audio = await SkywayModule.SkyWayStreamFactory.createMicrophoneAudioStream();\n    // 部屋に入る\n    await createContextAndJoinRoom();\n\n    // エラー時\n    _context.onFatalError.add(async () => {\n      _context.dispose();\n\n      // context再生成、再接続\n      await createContextAndJoinRoom();\n      console.log(\"[エラーによるSkyway Room再入室] \");\n      // subscribe\n      await subscribeRoomAudio(_dom);\n      console.log(\"[エラーによる再subscribe] \");\n\n      // publish中の場合のみ、再度publish\n      if (_isPublishing) {\n        await publishMyAudio(_dom);\n        console.log(\"[エラーによる再publish] \");\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n// トークン生成\n//======================================================\n\n/**\n * トークン生成\n */\nasync function createToken() {\n  try {\n    // APIキーをセット\n    const apiKeyData = await getAPIKeys();\n\n    // 生成\n    _token = new SkywayModule.SkyWayAuthToken({\n      jti: SkywayModule.uuidV4(),\n      iat: SkywayModule.nowInSec(),\n      // 有効期間\n      exp: SkywayModule.nowInSec() + 60 * 60 * 1,\n      // スコープ\n      scope: {\n        app: {\n          // アプリケーションID\n          id: apiKeyData.apiKey,\n          turn: true,\n          actions: ['read'],\n          channels: CONSTANTS.SKYWAY_CHANNEL_PARAMS\n        }\n      }\n      // シークレット\n    }).encode(apiKeyData.apiSecret);\n    console.log(\"[トークン生成]\");\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n// contextを生成し、部屋に入る\n//======================================================\n\n/**\n * contextを生成し、部屋に入る\n */\nasync function createContextAndJoinRoom() {\n  try {\n    // Context生成\n    _context = await SkywayModule.SkyWayContext.Create(_token);\n    // 部屋作成 or 検索\n    _room = await SkywayModule.SkyWayRoom.FindOrCreate(_context, {\n      type: _cWay,\n      name: _roomName\n    });\n    console.log(\"[Skyway Room入室開始] \" + _roomName + \" - \" + _cWay);\n    // 入室\n    _mySession = await _room.join({\n      name: _userId.toString()\n    });\n    console.log(\"[Skyway Room入室] \" + _roomName + \" - \" + _cWay);\n    console.log(_mySession);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 1-1. 自音声をPublish（音声通話に参加）\n//\n//======================================================\n\n/**\n * 自音声をPublish（音声通話に参加）\n *\n * @param liveId \n * @param dom \n */\nexport async function publishMyAudio(dom) {\n  try {\n    _dom = dom;\n\n    // 自音声をPublish\n    await createMySessionAndPublish();\n\n    // 部屋に存在するPublishを走査\n    const subscribeAndAttach = async publication => {\n      // 対象者の音声をSubscribe\n      await subscribeTargetMemberAudio(publication, dom);\n    };\n\n    // publicationsを走査  \n    _room.publications.forEach(subscribeAndAttach);\n    _room.onStreamPublished.add(e => subscribeAndAttach(e.publication));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n// 自音声をPublish（音声配信開始）\n//======================================================\n\n/**\n * 自音声をPublish（音声配信開始）\n * \n * @param liveId\n */\nasync function createMySessionAndPublish() {\n  try {\n    // Publish\n    _myPublication = await _mySession.publish(_audio);\n    console.log(`自音声publish: ${_mySession.id}`);\n    _isPublishing = true;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n// 対象者の音声をSubscribe\n//======================================================\n\n/**\n * 対象者の音声をSubscribe\n * \n * @param publication\n * @param dom\n */\nasync function subscribeTargetMemberAudio(publication, dom) {\n  try {\n    // 自分のPublishはスキップ\n    if (publication.publisher.id === _mySession.id) {\n      console.log(\"[自分の音声はsubscribeスキップ]\");\n      return;\n    }\n\n    // 他の人の音声をsubscribe\n    const {\n      stream\n    } = await _mySession.subscribe(publication.id);\n    let newMedia;\n    // ストリームが音声なら\n    switch (stream.track.kind) {\n      case 'audio':\n        newMedia = document.createElement('audio');\n        newMedia.autoplay = true;\n        newMedia.controls = SHOW_PLAYER;\n        console.log(\"[対象者の音声をsubscribe]\");\n        console.log(stream);\n        break;\n      default:\n        return;\n    }\n    stream.attach(newMedia);\n    dom.appendChild(newMedia);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 1-2. 自音声のPublishを停止（音声通話から退出）\n//\n//======================================================\n\n/**\n * 自音声をPublish（音声通話に参加）\n *\n * @param liveId \n * @param dom \n */\nexport async function unpublishMyAudio() {\n  try {\n    await _mySession.unpublish(_myPublication.id);\n    console.log(\"[自音声publish停止]\");\n    _isPublishing = false;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 2. 部屋の音声を聴取（Subscribe）\n//\n//======================================================\n\n/**\n * 音声通話に参加（Publish、Subscribe）\n *\n * @param roomId \n * @param dom \n */\nexport async function subscribeRoomAudio(dom) {\n  try {\n    console.log(\"[subscribe開始]\");\n\n    // 部屋に存在するPublishを走査\n    const subscribeAndAttach = async publication => {\n      // 対象の音声をSubscribe\n      await subscribeTargetMemberAudio(publication, dom);\n    };\n\n    // publicationsを走査。ストリームに追加\n    _room.publications.forEach(subscribeAndAttach);\n    _room.onStreamPublished.add(e => subscribeAndAttach(e.publication));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 3-1. ミュート実行\n//\n//======================================================\n\n/**\n* ミュート実行\n*\n*/\nexport async function mute() {\n  try {\n    //var audioTrack = _myPublication.stream.getAudioTracks()[0];\n    //audioTrack.enabled = false;\n    var audioTrack = _myPublication.stream._track;\n    audioTrack.enabled = false;\n    console.log(_myPublication.stream);\n\n    //await _myPublication.disable()    \n\n    console.log(\"[ミュート実施]\");\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 3-2. ミュート解除\n//\n//======================================================\n\n/**\n* ミュート解除\n*\n*/\nexport async function unmute() {\n  try {\n    var audioTrack = _myPublication.stream._track;\n    audioTrack.enabled = true;\n\n    //await _myPublication.enable();    \n\n    console.log(\"[ミュート解除]\");\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 4. 退室処理\n//\n//======================================================\n\n/**\n * 退室処理\n */\nexport async function leaveFromRoom(roomId) {\n  try {\n    // 部屋名をセット\n    let roomName = \"room\" + roomId;\n    // 接続方法にSFUをセット\n    let cWay = CONSTANTS.SKYWAY_CONNECT_WAY_SFU;\n    if (!CONSTANTS.SKYWAY_USE_SFU) {\n      cWay = CONSTANTS.SKYWAY_CONNECT_WAY_P2P;\n    }\n    console.log(roomName);\n    // 部屋を取得\n    //_room = await SkyWayRoom.Find(_context, { name: roomName }, cWay);\n    _room = await SkywayModule.SkyWayRoom.Find(_context, {\n      name: roomName\n    }, cWay);\n    // 部屋から出る\n    await _room.leave(_mySession);\n    console.log(\"[Skyway Room退室] \" + roomName + \" - \" + cWay);\n    console.log(_mySession);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n/*\nconst token = new SkyWayAuthToken({\n  jti: uuidV4(),\n  iat: nowInSec(),\n  // 有効期間\n  exp: nowInSec() + 60 * CONSTANTS.ROOM_VALID_PERIOD_MIN * 1,\n  // スコープ\n  scope: {\n    app: {\n      // アプリケーションID\n      id: SKYWAY_APP_ID,\n      turn: true,\n      actions: ['read'],\n      channels: [\n        {\n          id: '*',\n          name: '*',\n          actions: ['write'],\n          members: [\n            {\n              id: '*',\n              name: '*',\n              actions: ['write'],\n              publication: {\n                actions: ['write'],\n              },\n              subscription: {\n                actions: ['write'],\n              },\n            },\n          ],\n          sfuBots: [\n            {\n              actions: ['write'],\n              forwardings: [\n                {\n                  actions: ['write'],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  },\n// シークレットキー\n}).encode(SKYWAY_SC_KEY);\n*/","map":{"version":3,"names":["SkywayModule","CONSTANTS","getAPIKeys","SHOW_PLAYER","_token","_context","_mySession","_myPublication","_room","_roomName","_cWay","_userId","_audio","_dom","_isPublishing","joinToRoom","roomId","userId","createToken","SKYWAY_CONNECT_WAY_SFU","SKYWAY_USE_SFU","SKYWAY_CONNECT_WAY_P2P","SkyWayStreamFactory","createMicrophoneAudioStream","createContextAndJoinRoom","onFatalError","add","dispose","console","log","subscribeRoomAudio","publishMyAudio","error","apiKeyData","SkyWayAuthToken","jti","uuidV4","iat","nowInSec","exp","scope","app","id","apiKey","turn","actions","channels","SKYWAY_CHANNEL_PARAMS","encode","apiSecret","SkyWayContext","Create","SkyWayRoom","FindOrCreate","type","name","join","toString","dom","createMySessionAndPublish","subscribeAndAttach","publication","subscribeTargetMemberAudio","publications","forEach","onStreamPublished","e","publish","publisher","stream","subscribe","newMedia","track","kind","document","createElement","autoplay","controls","attach","appendChild","unpublishMyAudio","unpublish","mute","audioTrack","_track","enabled","unmute","leaveFromRoom","roomName","cWay","Find","leave"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/utils/SkywayManager.js"],"sourcesContent":["//======================================================\n//\n// Skyway関連の処理管理用\n//\n// [索引]\n//  □ 0.   トークン生成\n//  □ 1.   音声通話に参加（Publish、Subscribe）\n//  □ 1.   音声通話から退出（unPublish）\n//  □ 2.   対象の部屋の音声を聴取（Subscribe）\n//  □ 3-1. ミュート処理\n//  □ 3-2. ミュート解除\n//\n//======================================================\n\n// SkywaySDK\nimport * as SkywayModule from '@skyway-sdk/room'\n// 定数\nimport { CONSTANTS } from '@/consts/ConstantVals';\n// GoAPI\nimport { getAPIKeys } from '@/utils/GoAPIManager';\n\n// プレイヤーを表示\nconst SHOW_PLAYER = false;\n\n// トークン\nlet _token = {}\n// コンテキスト\nlet _context;\n// 自セッション\nlet _mySession;\n// 自音声のpublish\nlet _myPublication;\n// 部屋\nlet _room;\n// 部屋名\nlet _roomName;\n// 接続方法\nlet _cWay;\n// ユーザID\nlet _userId;\n// オーディオ要素\nlet _audio;\n// dom\nlet _dom;\n// 通話参加中か\nlet _isPublishing = false;\n\n\n//======================================================\n//\n// 0. 入室時初期処理\n//\n//======================================================\n\n/**\n * 入室時初期処理\n *  ・トークン生成\n *  ・対象IDの部屋に入る\n */\nexport async function joinToRoom(roomId, userId) {\n  try {     \n    _userId = userId    \n    // トークン生成\n    await createToken()\n    // 部屋名をセット\n    _roomName = \"room\" + roomId\n    // 接続方法にSFUをセット\n    _cWay = CONSTANTS.SKYWAY_CONNECT_WAY_SFU\n    if (!CONSTANTS.SKYWAY_USE_SFU) {\n      _cWay = CONSTANTS.SKYWAY_CONNECT_WAY_P2P\n    }\n  \n    // 音声ストリーム生成\n    _audio = await SkywayModule.SkyWayStreamFactory.createMicrophoneAudioStream();\n    // 部屋に入る\n    await createContextAndJoinRoom()\n\n    // エラー時\n    _context.onFatalError.add(async () => {\n      _context.dispose();\n\n      // context再生成、再接続\n      await createContextAndJoinRoom();\n      console.log(\"[エラーによるSkyway Room再入室] \")    \n      // subscribe\n      await subscribeRoomAudio(_dom);\n      console.log(\"[エラーによる再subscribe] \")    \n\n      // publish中の場合のみ、再度publish\n      if (_isPublishing) {\n        await publishMyAudio(_dom);\n\n        console.log(\"[エラーによる再publish] \")            \n      }\n    });    \n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n// トークン生成\n//======================================================\n\n/**\n * トークン生成\n */\nasync function createToken() {\n  try {      \n    // APIキーをセット\n    const apiKeyData = await getAPIKeys()\n\n    // 生成\n    _token = new SkywayModule.SkyWayAuthToken({\n      jti: SkywayModule.uuidV4(),      \n      iat: SkywayModule.nowInSec(),\n\n      // 有効期間\n      exp: SkywayModule.nowInSec() + 60 * 60 * 1,\n      // スコープ\n      scope: {\n        app: {\n          // アプリケーションID\n          id: apiKeyData.apiKey,\n          turn: true,\n          actions: ['read'],\n          channels: CONSTANTS.SKYWAY_CHANNEL_PARAMS,\n        },\n      },\n    // シークレット\n    }).encode(apiKeyData.apiSecret);\n\n    console.log(\"[トークン生成]\")\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n// contextを生成し、部屋に入る\n//======================================================\n\n/**\n * contextを生成し、部屋に入る\n */\nasync function createContextAndJoinRoom() {\n  try {\n    // Context生成\n    _context = await SkywayModule.SkyWayContext.Create(_token);\n    // 部屋作成 or 検索\n    _room = await SkywayModule.SkyWayRoom.FindOrCreate(_context, {\n      type: _cWay,\n      name: _roomName,\n    });\n\n    console.log(\"[Skyway Room入室開始] \" + _roomName + \" - \" + _cWay)\n    // 入室\n    _mySession = await _room.join({ name: _userId.toString() })     \n    \n    console.log(\"[Skyway Room入室] \" + _roomName + \" - \" + _cWay)\n    console.log(_mySession)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n//======================================================\n//\n// 1-1. 自音声をPublish（音声通話に参加）\n//\n//======================================================\n\n/**\n * 自音声をPublish（音声通話に参加）\n *\n * @param liveId \n * @param dom \n */\nexport async function publishMyAudio(dom) {\n  try {        \n    _dom = dom;\n\n    // 自音声をPublish\n    await createMySessionAndPublish()\n\n    // 部屋に存在するPublishを走査\n    const subscribeAndAttach = async(publication) => {\n      // 対象者の音声をSubscribe\n      await subscribeTargetMemberAudio(publication, dom)\n    }      \n\n    // publicationsを走査  \n    _room.publications.forEach(subscribeAndAttach);\n    _room.onStreamPublished.add((e) => subscribeAndAttach(e.publication));  \n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n// 自音声をPublish（音声配信開始）\n//======================================================\n\n/**\n * 自音声をPublish（音声配信開始）\n * \n * @param liveId\n */\nasync function createMySessionAndPublish() {\n  try {      \n    // Publish\n    _myPublication = await _mySession.publish(_audio);  \n    console.log(`自音声publish: ${_mySession.id}`); \n\n    _isPublishing = true;    \n  } catch (error) {        \n    console.error(error);      \n  } \n}\n\n//======================================================\n// 対象者の音声をSubscribe\n//======================================================\n\n/**\n * 対象者の音声をSubscribe\n * \n * @param publication\n * @param dom\n */\nasync function subscribeTargetMemberAudio(publication, dom) {\n  try {      \n    // 自分のPublishはスキップ\n    if (publication.publisher.id === _mySession.id) { \n      console.log(\"[自分の音声はsubscribeスキップ]\")\n\n      return;\n    }\n\n    // 他の人の音声をsubscribe\n    const { stream } = await _mySession.subscribe(publication.id);\n\n    let newMedia;\n    // ストリームが音声なら\n    switch (stream.track.kind) {\n      case 'audio':\n        newMedia = document.createElement('audio');\n        newMedia.autoplay = true;\n        newMedia.controls = SHOW_PLAYER;\n\n        console.log(\"[対象者の音声をsubscribe]\")\n        console.log(stream)\n\n        break;\n      default:\n        return;\n    }\n\n    stream.attach(newMedia);\n    dom.appendChild(newMedia);     \n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 1-2. 自音声のPublishを停止（音声通話から退出）\n//\n//======================================================\n\n/**\n * 自音声をPublish（音声通話に参加）\n *\n * @param liveId \n * @param dom \n */\nexport async function unpublishMyAudio() {\n  try {        \n    await _mySession.unpublish(_myPublication.id);\n\n    console.log(\"[自音声publish停止]\")\n    _isPublishing = false; \n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 2. 部屋の音声を聴取（Subscribe）\n//\n//======================================================\n\n/**\n * 音声通話に参加（Publish、Subscribe）\n *\n * @param roomId \n * @param dom \n */\nexport async function subscribeRoomAudio(dom) {\n  try {            \n    console.log(\"[subscribe開始]\")\n\n    // 部屋に存在するPublishを走査\n    const subscribeAndAttach = async(publication) => {\n      // 対象の音声をSubscribe\n      await subscribeTargetMemberAudio(publication, dom)\n    }      \n\n    // publicationsを走査。ストリームに追加\n    _room.publications.forEach(subscribeAndAttach);\n    _room.onStreamPublished.add((e) => subscribeAndAttach(e.publication));    \n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 3-1. ミュート実行\n//\n//======================================================\n\n/**\n* ミュート実行\n*\n*/\nexport async function mute() {\n  try {\n    //var audioTrack = _myPublication.stream.getAudioTracks()[0];\n    //audioTrack.enabled = false;\n    var audioTrack = _myPublication.stream._track;\n    audioTrack.enabled = false;\n\n    console.log(_myPublication.stream)\n\n    //await _myPublication.disable()    \n\n    console.log(\"[ミュート実施]\")\n  } catch (error) {        \n    console.error(error);      \n  } \n}\n\n//======================================================\n//\n// 3-2. ミュート解除\n//\n//======================================================\n\n/**\n* ミュート解除\n*\n*/\nexport async function unmute() {\n  try {\n    var audioTrack = _myPublication.stream._track;\n    audioTrack.enabled = true;\n\n    //await _myPublication.enable();    \n\n    console.log(\"[ミュート解除]\")    \n  } catch (error) {\n    console.error(error);   \n  }\n}\n\n//======================================================\n//\n// 4. 退室処理\n//\n//======================================================\n\n/**\n * 退室処理\n */\nexport async function leaveFromRoom(roomId) {\n  try {     \n    // 部屋名をセット\n    let roomName = \"room\" + roomId\n    // 接続方法にSFUをセット\n    let cWay = CONSTANTS.SKYWAY_CONNECT_WAY_SFU\n    if (!CONSTANTS.SKYWAY_USE_SFU) {\n      cWay = CONSTANTS.SKYWAY_CONNECT_WAY_P2P\n    }\n\n    console.log(roomName)\n    // 部屋を取得\n    //_room = await SkyWayRoom.Find(_context, { name: roomName }, cWay);\n    _room = await SkywayModule.SkyWayRoom.Find(_context, { name: roomName }, cWay);\n    // 部屋から出る\n    await _room.leave(_mySession);      \n    console.log(\"[Skyway Room退室] \" + roomName + \" - \" + cWay)\n    console.log(_mySession)\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n\n/*\nconst token = new SkyWayAuthToken({\n  jti: uuidV4(),\n  iat: nowInSec(),\n  // 有効期間\n  exp: nowInSec() + 60 * CONSTANTS.ROOM_VALID_PERIOD_MIN * 1,\n  // スコープ\n  scope: {\n    app: {\n      // アプリケーションID\n      id: SKYWAY_APP_ID,\n      turn: true,\n      actions: ['read'],\n      channels: [\n        {\n          id: '*',\n          name: '*',\n          actions: ['write'],\n          members: [\n            {\n              id: '*',\n              name: '*',\n              actions: ['write'],\n              publication: {\n                actions: ['write'],\n              },\n              subscription: {\n                actions: ['write'],\n              },\n            },\n          ],\n          sfuBots: [\n            {\n              actions: ['write'],\n              forwardings: [\n                {\n                  actions: ['write'],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  },\n// シークレットキー\n}).encode(SKYWAY_SC_KEY);\n*/"],"mappings":"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,CAAC;IACrB;IACA;IACAhF,KAAK,GAAG,MAAMR,YAAY,CAACoD,UAAU,CAACsC,IAAI,CAACrF,QAAQ,EAAE;MAAEkD,IAAI,EAAEiC;IAAS,CAAC,EAAEC,IAAI,CAAC;IAC9E;IACA,MAAMjF,KAAK,CAACmF,KAAK,CAACrF,UAAU,CAAC;IAC7BsB,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAAG2D,QAAQ,GAAG,KAAK,GAAGC,IAAI,CAAC;IACzD7D,OAAO,CAACC,GAAG,CAACvB,UAAU,CAAC;EACzB,CAAC,CAAC,OAAO0B,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;EACtB;AACF;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}