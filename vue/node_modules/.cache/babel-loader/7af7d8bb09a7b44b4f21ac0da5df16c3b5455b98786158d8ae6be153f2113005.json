{"ast":null,"code":"//======================================================\n//\n// RoomFooter.vue 配信画面のフッター\n//  ・コメント入力欄\n//  ・ミュートボタン\n//  ・いいねボタン\n// \n// [索引]\n//   □ 0. mounted\n//\n//   □ 1. watch\n//\n//   □ 2. methods\n//\n//======================================================\n\n// 定数\n//import { CONSTANTS } from \"../../consts/ConstantVals.js\"\n// FireBase\nimport { addChatDataToDB } from \"../../utils/FirebaseManager.js\";\nimport RoomPopupMenu from \"./RoomPopupMenu.vue\";\n\n/**\n * エクスポート\n */\nexport default {\n  // props\n  props: [\"targetRoomId\", \"isRoomOwner\", \"isPublishing\"],\n  // components\n  components: {\n    RoomPopupMenu\n  },\n  // data\n  data() {\n    return {\n      // 対象ユーザデータ\n      targetUserData: {},\n      // チャットデータ\n      targetChatData: {\n        roomId: 0,\n        userId: 0,\n        userName: \"\",\n        profileImageUrl: \"\",\n        text: \"\",\n        createdAt: null\n      },\n      // 入力されたテキスト\n      inputtedTxt: \"\",\n      // ミュート中か\n      isMuting: false\n    };\n  },\n  //======================================================\n  //\n  // 0. mounted\n  //\n  //======================================================\n\n  mounted() {\n    try {\n      // ユーザデータをセット\n      this.targetUserData = this.$store.getters.getTargetUserData;\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  //======================================================\n  //\n  // 2. methods\n  //\n  //======================================================\n\n  methods: {\n    //======================================================\n    //\n    // 2-1. いいねボタンクリック\n    //\n    //======================================================\n\n    /**\n     * いいねボタンクリック\n     */\n    onLikeButtonClick() {\n      try {\n        // データをセット\n        this.targetChatData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          text: this.targetUserData.name + \"がいいね！ を送りました。\",\n          createdAt: new Date()\n        };\n        console.log(\"[チャットデータ登録]\");\n        console.log(this.targetChatData);\n\n        // データ登録\n        addChatDataToDB(this.targetChatData.roomId, this.targetChatData);\n        // テキストを初期化\n        this.inputtedTxt = \"\";\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 2-2. コメント欄でキー押下\n    //\n    //======================================================\n\n    /**\n     * コメント欄でキー押下\n     *  ・エンターキーならDBにデータ追加\n     */\n    onEnterKeyPressedAtChatTextBox(keyCode) {\n      const ENTER_KEY_CODE = 13;\n      try {\n        // 日本語入力中は終了\n        if (keyCode !== ENTER_KEY_CODE) {\n          return;\n        } else if (this.inputtedTxt == \"\") {\n          return;\n        }\n\n        // データをセット\n        this.targetChatData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          text: this.inputtedTxt,\n          createdAt: new Date()\n        };\n        console.log(\"[チャットデータ登録]\");\n        console.log(this.targetChatData);\n\n        // データ登録\n        addChatDataToDB(this.targetChatData.roomId, this.targetChatData);\n        // テキストを初期化\n        this.inputtedTxt = \"\";\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //======================================================\n    //\n    // 2-3. ミュートボタンクリック\n    //\n    //======================================================\n\n    /**\n     * ミュートボタンクリック\n     */\n    onMuteButtonClick() {\n      try {\n        if (this.isMuting) {\n          this.isMuting = false;\n        } else {\n          this.isMuting = true;\n        }\n        // storeにデータをセット\n        this.$store.commit(\"setIsMuting\", this.isMuting);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["addChatDataToDB","RoomPopupMenu","props","components","data","targetUserData","targetChatData","roomId","userId","userName","profileImageUrl","text","createdAt","inputtedTxt","isMuting","mounted","$store","getters","getTargetUserData","error","console","methods","onLikeButtonClick","targetRoomId","id","name","Date","log","onEnterKeyPressedAtChatTextBox","keyCode","ENTER_KEY_CODE","onMuteButtonClick","commit"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/components/Room/RoomFooter.vue"],"sourcesContent":["<template>\n  <v-footer\n    app\n    dark\n    class = \"dark\"\n    height=\"64\"\n  >\n    <v-row>\n      <v-col cols=\"2\">\n        <RoomPopupMenu />\n      </v-col>\n      <v-col cols=\"6\">    \n        <v-text-field\n          bg-color=\"grey-lighten-1\"\n          class=\"rounded-pill overflow-hidden\"\n          density=\"compact\"\n          hide-details\n          label=\"コメントを入力\" \n          variant=\"solo\"\n          prepend-inner-icon=\"mdi-comment-processing\"\n          v-model=\"inputtedTxt\"\n          @keydown.enter=\"onEnterKeyPressedAtChatTextBox($event.keyCode)\"\n        ></v-text-field>\n      </v-col> \n\n      <v-col cols=\"4\" class=\"text-right\">    \n        <div class=\"d-flex justify-space-between\">        \n          <v-btn icon=\"mdi-heart\"  \n            v-on:click=\"onLikeButtonClick\" rounded style=\"color: rgb(255, 77, 107);\">\n          </v-btn>     \n\n          <v-btn icon=\"mdi-microphone\" v-show=\"isPublishing && !isMuting\" @click=\"onMuteButtonClick\"></v-btn>\n          <v-btn icon=\"mdi-microphone-off\" v-show=\"isPublishing && isMuting\" color=\"grey\" @click=\"onMuteButtonClick\"></v-btn>\n        </div>\n      </v-col>   \n    </v-row>\n  </v-footer>  \n</template>\n\n<!--\n//======================================================\n//\n// Script\n//\n//======================================================  \n-->\n<script>\n\n//======================================================\n//\n// RoomFooter.vue 配信画面のフッター\n//  ・コメント入力欄\n//  ・ミュートボタン\n//  ・いいねボタン\n// \n// [索引]\n//   □ 0. mounted\n//\n//   □ 1. watch\n//\n//   □ 2. methods\n//\n//======================================================\n\n// 定数\n//import { CONSTANTS } from \"../../consts/ConstantVals.js\"\n// FireBase\nimport { addChatDataToDB } from \"../../utils/FirebaseManager.js\"\nimport RoomPopupMenu from \"./RoomPopupMenu.vue\"\n\n/**\n * エクスポート\n */\nexport default {\n\n  // props\n  props: [\n    \"targetRoomId\",\n    \"isRoomOwner\",\n    \"isPublishing\",\n  ],\n\n  // components\n  components: {\n    RoomPopupMenu,\n  },\n\n  // data\n  data() {\n    return {\n      // 対象ユーザデータ\n      targetUserData: {\n\n      },\n      // チャットデータ\n      targetChatData: {\n        roomId: 0,\n        userId: 0,\n        userName: \"\",\n        profileImageUrl: \"\",\n        text: \"\",\n        createdAt: null,\n      },         \n      // 入力されたテキスト\n      inputtedTxt: \"\", \n      // ミュート中か\n      isMuting: false,\n    }\n  },\n\n  //======================================================\n  //\n  // 0. mounted\n  //\n  //======================================================\n\n  mounted() {\n    try {      \n      // ユーザデータをセット\n      this.targetUserData = this.$store.getters.getTargetUserData\n    } catch (error) {        \n        console.error(error);      \n    }\n  },\n\n  //======================================================\n  //\n  // 2. methods\n  //\n  //======================================================\n\n  methods: {    \n\n    //======================================================\n    //\n    // 2-1. いいねボタンクリック\n    //\n    //======================================================\n\n    /**\n     * いいねボタンクリック\n     */\n    onLikeButtonClick() {      \n      try {      \n        // データをセット\n        this.targetChatData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          text: this.targetUserData.name + \"がいいね！ を送りました。\",\n          createdAt: new Date(),\n        }\n\n        console.log(\"[チャットデータ登録]\")\n        console.log(this.targetChatData)\n\n        // データ登録\n        addChatDataToDB(this.targetChatData.roomId, this.targetChatData)\n        // テキストを初期化\n        this.inputtedTxt = \"\"\n      } catch (error) {        \n        console.error(error);      \n      }\n    },\n\n    //======================================================\n    //\n    // 2-2. コメント欄でキー押下\n    //\n    //======================================================\n\n    /**\n     * コメント欄でキー押下\n     *  ・エンターキーならDBにデータ追加\n     */\n    onEnterKeyPressedAtChatTextBox(keyCode) {\n      const ENTER_KEY_CODE = 13\n\n      try {      \n        // 日本語入力中は終了\n        if (keyCode !== ENTER_KEY_CODE) {\n          return;\n        } else if(this.inputtedTxt == \"\") {\n          return;\n        }\n\n        // データをセット\n        this.targetChatData = {\n          roomId: this.targetRoomId,\n          userId: this.targetUserData.id,\n          userName: this.targetUserData.name,\n          profileImageUrl: this.targetUserData.profileImageUrl,\n          text: this.inputtedTxt,\n          createdAt: new Date(),\n        }\n\n        console.log(\"[チャットデータ登録]\")\n        console.log(this.targetChatData)\n\n        // データ登録\n        addChatDataToDB(this.targetChatData.roomId, this.targetChatData)\n        // テキストを初期化\n        this.inputtedTxt = \"\"\n      } catch (error) {        \n        console.error(error);      \n      }\n     },\n\n    //======================================================\n    //\n    // 2-3. ミュートボタンクリック\n    //\n    //======================================================\n\n    /**\n     * ミュートボタンクリック\n     */\n    onMuteButtonClick() {\n      try {      \n        if (this.isMuting) {\n          this.isMuting = false\n        } else {\n          this.isMuting = true\n        }\n        // storeにデータをセット\n        this.$store.commit(\"setIsMuting\", this.isMuting)\n      } catch (error) {        \n        console.error(error);      \n      }\n     },\n  }\n}\n</script>\n\n<style scoped>\n\n#smallMenuButton {\n  width: 50px;\n}\n#largeMenuButton {\n  width: 100px;\n  height: 40px;\n}\n\n.fixed-width {\n  width: 200px; /* 好きな幅を指定してください */\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}