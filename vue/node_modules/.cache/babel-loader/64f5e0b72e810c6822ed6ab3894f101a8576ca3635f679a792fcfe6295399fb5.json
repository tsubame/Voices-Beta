{"ast":null,"code":"//======================================================\n//\n// Agora関連の処理管理用\n//\n// [索引]\n//  □ 0.   トークン生成\n//\n//\n//======================================================\n\n// AgoraSDK\nimport AgoraRTC from \"agora-rtc-sdk-ng\";\n// 定数\nimport { CONSTANTS } from '@/consts/ConstantVals';\n\n// オプション設定\nlet _options = {\n  // Pass your App ID here.\n  //appId: CONSTANTS.AGORA_APP_ID,\n  // Set the channel name.\n  //channel: CONSTANTS.AGORA_TEST_CH,\n  // Pass your temp token here.\n  //token: null,\n  // Set the user ID.\n  //uid: Math.floor(Math.random() * 1000000),\n};\n\n// パラメータ\nlet channelParameters = {\n  // A variable to hold a local audio track.\n  localAudioTrack: null,\n  // A variable to hold a remote audio track.\n  remoteAudioTrack: null,\n  // A variable to hold the remote user id.\n  remoteUid: null\n};\n\n// agoraEngine\nlet agoraEngine;\n\n//======================================================\n//\n// 1-1. 自音声をPublish（音声通話に参加）\n//\n//======================================================\n\n/**\n * 自音声をPublish（音声通話に参加）\n */\nexport async function publishMyAudioByAgora() {\n  try {\n    // Create a local audio track from the microphone audio.\n    channelParameters.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n    // Publish the local audio track in the channel.\n    await agoraEngine.publish(channelParameters.localAudioTrack);\n    console.log(\"Publish success!\");\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 1-2. 自音声をUnPublish（音声通話から退出）\n//\n//======================================================\n\n/**\n * 自音声をUnPublish（音声通話から退出）\n */\nexport async function unpublishMyAudioByAgora() {\n  try {\n    // Create a local audio track from the microphone audio.\n    channelParameters.localAudioTrack.close();\n    console.log(\"UnPublish success!\");\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 2. subscribe\n//\n//======================================================\n\n/**\n * subscribe\n * \n * @param dom\n * @param roomId\n * @param userId\n */\nexport async function subscribeRoomAudioByAgora(dom, roomId, userId) {\n  try {\n    // optionsをセット\n    setOptions(roomId, userId);\n    // 初期設定\n    initAgoraToken(dom);\n    // Join a channel.\n    await agoraEngine.join(_options.appId, _options.channel, _options.token, _options.uid);\n    console.log(\"Joined channel: \" + _options.channel);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n// optionをセット\n//======================================================\n\n/**\n * optionsをセット\n * \n * @param {*} roomId \n * @param {*} userId\n */\nfunction setOptions(roomId, userId) {\n  try {\n    _options = {\n      // Pass your App ID here.\n      appId: CONSTANTS.AGORA_APP_ID,\n      // Set the channel name.\n      channel: \"room\" + roomId,\n      // Pass your temp token here.\n      token: null,\n      // Set the user ID.\n      uid: userId //Math.floor(Math.random() * 1000000),\n    };\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n// agora初期化\n//======================================================\n\n/**\n * agora初期化\n */\nfunction initAgoraToken(dom) {\n  try {\n    // Create an instance of the Agora Engine\n    agoraEngine = AgoraRTC.createClient({\n      mode: \"rtc\",\n      codec: \"vp8\"\n    });\n\n    // Listen for the \"user-published\" event to retrieve an AgoraRTCRemoteUser object.\n    agoraEngine.on(\"user-published\", async (user, mediaType) => {\n      // Subscribe to the remote user when the SDK triggers the \"user-published\" event.\n      await agoraEngine.subscribe(user, mediaType);\n      console.log(\"subscribe success\");\n\n      // Subscribe and play the remote audio track.\n      if (mediaType == \"audio\") {\n        channelParameters.remoteUid = user.uid;\n        // Get the RemoteAudioTrack object from the AgoraRTCRemoteUser object.\n        channelParameters.remoteAudioTrack = user.audioTrack;\n        // Play the remote audio track. \n        channelParameters.remoteAudioTrack.play();\n        console.log(\"Remote user connected: \" + user.uid);\n        //stream.attach(newMedia);\n        dom.appendChild(channelParameters.remoteAudioTrack);\n      }\n\n      // Listen for the \"user-unpublished\" event.\n      agoraEngine.on(\"user-unpublished\", user => {\n        console.log(user.uid + \"has left the channel\");\n        console.log(\"Remote user has left the channel\");\n      });\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 3-1. Mute\n//\n//======================================================\n\n/**\n * Mute\n */\nexport async function muteByAgora() {\n  try {\n    await channelParameters.localAudioTrack.setMuted(true);\n    //await localTracks.audioTrack.setMuted(true);\n    //localTrackState.audioTrackMuted = true;    \n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 3-2. UnMute\n//\n//======================================================\n\n/**\n * Mute\n */\nexport async function unmuteByAgora() {\n  try {\n    await channelParameters.localAudioTrack.setMuted(false);\n    //await localTracks.audioTrack.setMuted(true);\n    //localTrackState.audioTrackMuted = true;    \n  } catch (error) {\n    console.error(error);\n  }\n}\n\n//======================================================\n//\n// 4. 退室処理\n//\n//======================================================\n\n/**\n * 退室処理\n */\nexport async function leaveFromRoomByAgora() {\n  try {\n    // Destroy the local audio track.\n    channelParameters.localAudioTrack.close();\n    // Leave the channel\n    await agoraEngine.leave();\n    console.log(\"[Agora Room退室] \");\n  } catch (error) {\n    console.error(error);\n  }\n}","map":{"version":3,"names":["AgoraRTC","CONSTANTS","_options","channelParameters","localAudioTrack","remoteAudioTrack","remoteUid","agoraEngine","publishMyAudioByAgora","createMicrophoneAudioTrack","publish","console","log","error","unpublishMyAudioByAgora","close","subscribeRoomAudioByAgora","dom","roomId","userId","setOptions","initAgoraToken","join","appId","channel","token","uid","AGORA_APP_ID","createClient","mode","codec","on","user","mediaType","subscribe","audioTrack","play","appendChild","muteByAgora","setMuted","unmuteByAgora","leaveFromRoomByAgora","leave"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/utils/AgoraManager.js"],"sourcesContent":["//======================================================\n//\n// Agora関連の処理管理用\n//\n// [索引]\n//  □ 0.   トークン生成\n//\n//\n//======================================================\n\n// AgoraSDK\nimport AgoraRTC from \"agora-rtc-sdk-ng\"\n// 定数\nimport { CONSTANTS } from '@/consts/ConstantVals';\n\n// オプション設定\nlet _options = {\n    // Pass your App ID here.\n    //appId: CONSTANTS.AGORA_APP_ID,\n    // Set the channel name.\n    //channel: CONSTANTS.AGORA_TEST_CH,\n    // Pass your temp token here.\n    //token: null,\n    // Set the user ID.\n    //uid: Math.floor(Math.random() * 1000000),\n};\n\n// パラメータ\nlet channelParameters = {\n  // A variable to hold a local audio track.\n  localAudioTrack: null,\n  // A variable to hold a remote audio track.\n  remoteAudioTrack: null,\n  // A variable to hold the remote user id.\n  remoteUid: null,\n};\n\n// agoraEngine\nlet agoraEngine;\n\n//======================================================\n//\n// 1-1. 自音声をPublish（音声通話に参加）\n//\n//======================================================\n\n/**\n * 自音声をPublish（音声通話に参加）\n */\nexport async function publishMyAudioByAgora()\n{\n  try {    \n    // Create a local audio track from the microphone audio.\n    channelParameters.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n    // Publish the local audio track in the channel.\n    await agoraEngine.publish(channelParameters.localAudioTrack);\n    console.log(\"Publish success!\");\n\n    \n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 1-2. 自音声をUnPublish（音声通話から退出）\n//\n//======================================================\n\n/**\n * 自音声をUnPublish（音声通話から退出）\n */\nexport async function unpublishMyAudioByAgora()\n{\n  try {    \n    // Create a local audio track from the microphone audio.\n    channelParameters.localAudioTrack.close()    \n    console.log(\"UnPublish success!\");    \n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 2. subscribe\n//\n//======================================================\n\n/**\n * subscribe\n * \n * @param dom\n * @param roomId\n * @param userId\n */\nexport async function subscribeRoomAudioByAgora(dom, roomId, userId)\n{\n  try {\n    // optionsをセット\n    setOptions(roomId, userId)\n    // 初期設定\n    initAgoraToken(dom)\n    // Join a channel.\n    await agoraEngine.join(_options.appId, _options.channel, _options.token, _options.uid);\n    console.log(\"Joined channel: \" + _options.channel);\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n// optionをセット\n//======================================================\n\n/**\n * optionsをセット\n * \n * @param {*} roomId \n * @param {*} userId\n */\nfunction setOptions(roomId, userId) {\n  try {\n    _options = {\n      // Pass your App ID here.\n      appId: CONSTANTS.AGORA_APP_ID,\n      // Set the channel name.\n      channel: \"room\" + roomId,\n      // Pass your temp token here.\n      token: null,\n      // Set the user ID.\n      uid: userId,//Math.floor(Math.random() * 1000000),\n    };\n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n// agora初期化\n//======================================================\n\n/**\n * agora初期化\n */\nfunction initAgoraToken(dom) {\n  try {\n    // Create an instance of the Agora Engine\n    agoraEngine = AgoraRTC.createClient({ mode: \"rtc\", codec: \"vp8\" });\n\n    // Listen for the \"user-published\" event to retrieve an AgoraRTCRemoteUser object.\n    agoraEngine.on(\"user-published\", async (user, mediaType) => {\n      // Subscribe to the remote user when the SDK triggers the \"user-published\" event.\n      await agoraEngine.subscribe(user, mediaType);\n      console.log(\"subscribe success\");\n\n      // Subscribe and play the remote audio track.\n      if (mediaType == \"audio\") {\n        channelParameters.remoteUid=user.uid;\n        // Get the RemoteAudioTrack object from the AgoraRTCRemoteUser object.\n        channelParameters.remoteAudioTrack = user.audioTrack;\n        // Play the remote audio track. \n        channelParameters.remoteAudioTrack.play();\n        console.log(\"Remote user connected: \" + user.uid);    \n        //stream.attach(newMedia);\n        dom.appendChild(channelParameters.remoteAudioTrack);            \n      }\n\n      // Listen for the \"user-unpublished\" event.\n      agoraEngine.on(\"user-unpublished\", user => {\n        console.log(user.uid + \"has left the channel\");\n        console.log(\"Remote user has left the channel\");\n      });\n    });\n  } catch (error) {\n    console.error(error);    \n  }\n}\n\n//======================================================\n//\n// 3-1. Mute\n//\n//======================================================\n\n/**\n * Mute\n */\nexport async function muteByAgora() {\n  try {     \n    await channelParameters.localAudioTrack.setMuted(true);\n    //await localTracks.audioTrack.setMuted(true);\n    //localTrackState.audioTrackMuted = true;    \n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 3-2. UnMute\n//\n//======================================================\n\n/**\n * Mute\n */\nexport async function unmuteByAgora() {\n  try {     \n    await channelParameters.localAudioTrack.setMuted(false);\n    //await localTracks.audioTrack.setMuted(true);\n    //localTrackState.audioTrackMuted = true;    \n  } catch (error) {        \n    console.error(error);      \n  }\n}\n\n//======================================================\n//\n// 4. 退室処理\n//\n//======================================================\n\n/**\n * 退室処理\n */\nexport async function leaveFromRoomByAgora() {\n  try {     \n    // Destroy the local audio track.\n    channelParameters.localAudioTrack.close();\n    // Leave the channel\n    await agoraEngine.leave();\n\n    console.log(\"[Agora Room退室] \")\n  } catch (error) {        \n    console.error(error);      \n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}