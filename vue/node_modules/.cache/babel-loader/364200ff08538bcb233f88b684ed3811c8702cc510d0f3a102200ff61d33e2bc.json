{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { CONSTANTS } from \"../../consts/ConstantVals.js\";\nimport { getDatabase, ref, push } from \"firebase/database\";\n//import { onValue } from \"firebase/database\";\nimport { initAuthAnonymous, initAuthByGoogle, initAuthByTwitter, pushDataToDB, watchTargetKey } from '../../utils/FirebaseManager.js';\nimport { joinToRoom, mute, unmute } from '../../utils/SkywayManager.js';\nimport ChatItem from '../../components/ChatItem.vue';\n//import FooterMenu from '../../components/FooterMenu.vue'\nimport MusicPlayerPopover from '../../components/MusicPlayerPopover.vue';\n//import LivePopoverMenuVue from './LivePopoverMenu.vue';\n\n/**\n * エクスポート\n */\nexport default {\n  data() {\n    return {\n      // ユーザ情報\n      user: {},\n      // チャットデータ（配列）\n      chats: [],\n      // チャットデータ（単体）\n      chat: {\n        name: \"\",\n        screenName: \"\",\n        image: \"\",\n        text: \"\"\n      },\n      // アクティブな部屋のメンバー\n      activeRoomMember: {\n        userId: 0,\n        roomId: 0,\n        hasTalkJoined: false,\n        userProfileImage: \"\",\n        isOwner: false\n      },\n      // 部屋ID\n      roomID: 0,\n      // セッションID ランダム生成\n      sessionId: 0,\n      // DBキー chats\n      dbKeyChats: '',\n      // DBキー chats\n      dbKeyActiveRoomUsers: '',\n      // DBキー con_reqs\n      dbKeyConReqs: '',\n      // DBキー con_acks\n      dbKeyConAcks: '',\n      // 入力したメッセージ\n      inputtedTxt: '',\n      // 部屋のオーナーか\n      isOwner: false,\n      // 接続要求を送信済か\n      hasSendReq: false,\n      // 接続要求承認済か\n      hasReqAcked: false,\n      // 接続要求があったか\n      isExistConReq: false,\n      // ミュート済か\n      hasMuted: false,\n      // ミュート解除中か\n      hasUnMuted: true,\n      // ダイアログ表示状態\n      dialog: false,\n      // BGM用ファイル\n      musicFile: \"\" //require(\"@/assets/bgm_koigokoro.mp3\"),        \n    };\n  },\n\n  components: {\n    ChatItem,\n    //FooterMenu,\n    MusicPlayerPopover\n    //LivePopoverMenuVue\n  },\n\n  setup: function () {\n    console.log(\"setup LiveView\");\n  },\n  mounted: function () {\n    // URLパラメータからRoomIDをセット\n    this.roomID = this.$route.params.roomID;\n    // オーナーかをセット\n    //this.isOwner = this.$route.params.isOwner\n    // DBキーをセット\n    this.dbKeyChats = `${CONSTANTS.FB_TABLE_ROOM_CHATS}/${this.roomID}`;\n    this.dbKeyActiveRoomUsers = `${CONSTANTS.FB_TABLE_ROOM_CHATS}/${this.roomID}`;\n    // セッションIDを乱数でセット\n    this.sessionId = Math.floor(Math.random() * 100000);\n\n    // chatsテーブルの変更を監視\n    watchTargetKey(this.dbKeyChats, snapshot => {\n      var dataArray = [];\n      snapshot.forEach(function (childSnapshot) {\n        var childData = childSnapshot.val();\n        dataArray.push(childData);\n      });\n\n      // 配列を逆順にする\n      dataArray.reverse();\n      this.chats = dataArray;\n    });\n  },\n  computed: {\n    isBgmPlaying() {\n      return this.$store.getters.getIsBgmPlaying;\n    },\n    bgmVolume() {\n      return this.$store.getters.getBgmVolume;\n    }\n  },\n  methods: {\n    /**\n     * 認証処理実行\n     */\n    execAuth() {\n      // Google認証\n      if (CONSTANTS.USE_GOOGLE_AUTH) {\n        initAuthByGoogle();\n        // Twitter認証\n      } else if (CONSTANTS.USE_TWITTER_AUTH) {\n        initAuthByTwitter();\n        // 匿名認証\n      } else {\n        initAuthAnonymous();\n      }\n    },\n    /**\n     * 音声をsubscribe\n     */\n    subscribe() {},\n    /**\n     * DBにチャットデータ書き込み\n     */\n    onEnterKeyPressedAtChatTextBox(keyCode) {\n      const ENTER_KEY_CODE = 13;\n      // 日本語入力中は終了\n      if (keyCode !== ENTER_KEY_CODE) {\n        return;\n      }\n      this.chat = {\n        name: this.$store.getters.getTwitterUser.name,\n        image: this.$store.getters.getTwitterUser.profileImageUrl,\n        text: this.inputtedTxt\n      };\n\n      // データを追加\n      pushDataToDB(this.dbKeyChats, this.chat);\n      this.inputtedTxt = \"\";\n    },\n    /**\n     * いいねボタン押下\n     */\n    onLikeButtonClick() {\n      const TEXT = \"がいいねを送りました！\";\n      this.chat = {\n        name: this.$store.getters.getTwitterUser.name,\n        image: this.$store.getters.getTwitterUser.profileImageUrl,\n        text: TEXT\n      };\n\n      // データを追加\n      pushDataToDB(this.dbKeyChats, this.chat);\n    },\n    /**\n     * 接続要求をFireBaseに送る\n     */\n    sendConReqToFB() {\n      if (this.hasSendReq) {\n        return;\n      }\n\n      // データを追加\n      push(ref(getDatabase(), this.dbKeyConReqs), {\n        sesId: this.sessionId\n      });\n      this.hasSendReq = true;\n    },\n    /**\n     * 接続要求の承認をFireBaseに送る\n     */\n    sendConAckToFB(sesId) {\n      // データを追加\n      push(ref(getDatabase(), this.dbKeyConAcks), {\n        sesId: sesId\n      });\n      this.hasSendReq = true;\n    },\n    // スクロール位置を一番下に移動\n    scrollBottom() {\n      this.$nextTick(() => {\n        window.scrollTo(0, document.body.clientHeight);\n      });\n    },\n    // 接続、音声通話参加開始\n    connectToVCRoom() {\n      joinToRoom(this.roomID, this.$refs.remoteMediaArea);\n    },\n    // ミュート\n    async muteMyVC() {\n      this.hasMuted = true;\n      this.hasUnMuted = false;\n      mute();\n    },\n    // アンミュート\n    async unmuteMyVC() {\n      this.hasMuted = false;\n      this.hasUnMuted = true;\n      unmute();\n    }\n  },\n  watch: {\n    isBgmPlaying(newValue, oldValue) {\n      console.log(`isBgmPlaying: ${oldValue} -> ${newValue}`);\n\n      // 再生\n      if (newValue) {\n        console.log(this.bgmVolume);\n        this.$refs.audioElement.play();\n        this.$refs.audioElement.volume = this.bgmVolume;\n        this.$refs.audioElement.loop = true;\n      } else {\n        this.$refs.audioElement.pause();\n      }\n    },\n    bgmVolume(newValue, oldValue) {\n      console.log(`volumeChange: ${oldValue} -> ${newValue}`);\n      this.$refs.audioElement.volume = this.bgmVolume;\n    }\n  }\n};","map":{"version":3,"names":["CONSTANTS","getDatabase","ref","push","initAuthAnonymous","initAuthByGoogle","initAuthByTwitter","pushDataToDB","watchTargetKey","joinToRoom","mute","unmute","ChatItem","MusicPlayerPopover","data","user","chats","chat","name","screenName","image","text","activeRoomMember","userId","roomId","hasTalkJoined","userProfileImage","isOwner","roomID","sessionId","dbKeyChats","dbKeyActiveRoomUsers","dbKeyConReqs","dbKeyConAcks","inputtedTxt","hasSendReq","hasReqAcked","isExistConReq","hasMuted","hasUnMuted","dialog","musicFile","components","setup","console","log","mounted","$route","params","FB_TABLE_ROOM_CHATS","Math","floor","random","snapshot","dataArray","forEach","childSnapshot","childData","val","reverse","computed","isBgmPlaying","$store","getters","getIsBgmPlaying","bgmVolume","getBgmVolume","methods","execAuth","USE_GOOGLE_AUTH","USE_TWITTER_AUTH","subscribe","onEnterKeyPressedAtChatTextBox","keyCode","ENTER_KEY_CODE","getTwitterUser","profileImageUrl","onLikeButtonClick","TEXT","sendConReqToFB","sesId","sendConAckToFB","scrollBottom","$nextTick","window","scrollTo","document","body","clientHeight","connectToVCRoom","$refs","remoteMediaArea","muteMyVC","unmuteMyVC","watch","newValue","oldValue","audioElement","play","volume","loop","pause"],"sources":["/Users/tsukamotohideki/go/src/github.com/tsubame/Voices/vue/src/views/programs/LiveView.vue"],"sourcesContent":["<template>\n  <v-main>    \n    <div id = \"roomContainer\">\n      <header class=\"roomHeader\">\n        <!--<v-btn v-on:click=\"sendConReqToFB\">リクエスト</v-btn>        -->\n        <v-row>\n          <v-col cols=\"9\">\n          </v-col>   \n          <v-col cols=\"3\" class=\"text-right\">  \n\n            <!-- ダイアログ -->\n            <v-dialog v-model=\"dialog\" persistent width=\"auto\">\n              <template v-slot:activator=\"{ props }\">\n                <v-btn v-bind=\"props\" rounded>\n                  <v-icon>mdi-phone</v-icon>通話に参加\n                </v-btn> \n              </template>\n              <v-card>\n                <v-card-title class=\"text-h5\"></v-card-title>\n                <v-card-text>通話に参加します。よろしいですか？</v-card-text>\n                <v-card-actions>\n                  <v-spacer></v-spacer>\n                  <v-btn color=\"green-darken-1\" variant=\"text\" @click=\"dialog = false\">\n                    Cancel\n                  </v-btn>\n                  <v-btn color=\"green-darken-1\" variant=\"text\" @click=\"connectToVCRoom\">\n                    OK\n                  </v-btn>\n                </v-card-actions>\n              </v-card>\n            </v-dialog>\n\n          </v-col>                \n        </v-row>      \n      </header>\n\n      <v-content>\n        <v-container>    \n\n          <!-- Firebase から取得したリストを描画（トランジション付き）-->\n          <div id = \"chatArea\">\n            <section v-for=\"chat in chats\" :key=\"chat.text\" class=\"item\">\n              <v-row>       \n                <v-col cols=\"12\">    \n                  <ChatItem :chat=\"chat\" />\n                </v-col>\n              </v-row>\n            </section>     \n          </div>\n\n          <!-- リモートメディアエリア -->\n          <div ref = \"remoteMediaArea\"></div>\n          <!-- BGM -->\n          <audio ref=\"audioElement\" :src=\"musicFile\"></audio>            \n        </v-container>\n      </v-content>\n\n      <footer-menu />\n      <v-footer app dark class = \"dark\">\n        <v-row justify=\"center\">\n          <v-col cols=\"8\">     \n            <v-text-field id = \"commentTextBox\" placeholder=\"\" v-model=\"inputtedTxt\" label=\"コメントを入力\" @keydown.enter=\"onEnterKeyPressedAtChatTextBox($event.keyCode)\"></v-text-field> \n          </v-col>\n          <v-col cols=\"1\">\n            <!-- いいねボタン -->\n            <v-btn icon=\"mdi-heart\"  v-on:click=\"onLikeButtonClick\" rounded  color=\"pink\"></v-btn>            \n          </v-col>      \n          <v-col cols=\"1\">\n            <MusicPlayerPopover />\n          </v-col>\n          <v-col cols=\"1\">    \n            <v-btn icon=\"mdi-microphone\" v-on:click=\"muteMyVC\" v-show=\"hasUnMuted\" fab></v-btn>              \n            <v-btn icon=\"mdi-microphone-off\" v-on:click=\"unmuteMyVC\" v-show=\"hasMuted\" fab rounded color=\"grey\"></v-btn>    \n          </v-col>                \n        </v-row>             \n      </v-footer>  \n    </div>      \n  </v-main>\n</template>\n\n<!-- Javascript -->\n<script>\nimport { CONSTANTS } from \"../../consts/ConstantVals.js\"\nimport { getDatabase, ref, push } from \"firebase/database\";\n//import { onValue } from \"firebase/database\";\nimport { initAuthAnonymous, initAuthByGoogle, initAuthByTwitter, pushDataToDB, watchTargetKey } from '../../utils/FirebaseManager.js';\nimport { joinToRoom, mute, unmute } from '../../utils/SkywayManager.js';\nimport ChatItem from '../../components/ChatItem.vue'\n//import FooterMenu from '../../components/FooterMenu.vue'\nimport MusicPlayerPopover from '../../components/MusicPlayerPopover.vue';\n//import LivePopoverMenuVue from './LivePopoverMenu.vue';\n\n/**\n * エクスポート\n */\nexport default {\n  data() {\n    return {\n      // ユーザ情報\n      user: {},  \n      // チャットデータ（配列）\n      chats: [],  \n      // チャットデータ（単体）\n      chat: {\n        name: \"\",\n        screenName: \"\",\n        image: \"\",\n        text: \"\"\n      },\n      // アクティブな部屋のメンバー\n      activeRoomMember: {\n        userId: 0,\n        roomId: 0,\n        hasTalkJoined: false,\n        userProfileImage: \"\",\n        isOwner: false,\n      },\n      // 部屋ID\n      roomID: 0,      \n      // セッションID ランダム生成\n      sessionId: 0,\n      // DBキー chats\n      dbKeyChats: '',\n      // DBキー chats\n      dbKeyActiveRoomUsers: '',\n      // DBキー con_reqs\n      dbKeyConReqs: '',      \n      // DBキー con_acks\n      dbKeyConAcks: '',  \n      // 入力したメッセージ\n      inputtedTxt: '',\n      // 部屋のオーナーか\n      isOwner: false,\n      // 接続要求を送信済か\n      hasSendReq: false,\n      // 接続要求承認済か\n      hasReqAcked: false,\n      // 接続要求があったか\n      isExistConReq: false,\n      // ミュート済か\n      hasMuted: false,\n      // ミュート解除中か\n      hasUnMuted: true,\n      // ダイアログ表示状態\n      dialog: false,\n      // BGM用ファイル\n      musicFile: \"\", //require(\"@/assets/bgm_koigokoro.mp3\"),        \n    }\n  },\n  components: {\n    ChatItem,\n    //FooterMenu,\n    MusicPlayerPopover,\n    //LivePopoverMenuVue\n  },\n  setup: function() {\n    console.log(\"setup LiveView\") \n  },\n  mounted: function() {\n    // URLパラメータからRoomIDをセット\n    this.roomID = this.$route.params.roomID\n    // オーナーかをセット\n    //this.isOwner = this.$route.params.isOwner\n    // DBキーをセット\n    this.dbKeyChats = `${CONSTANTS.FB_TABLE_ROOM_CHATS}/${this.roomID}`\n    this.dbKeyActiveRoomUsers = `${CONSTANTS.FB_TABLE_ROOM_CHATS}/${this.roomID}`\n    // セッションIDを乱数でセット\n    this.sessionId = Math.floor(Math.random() * 100000)\n\n    // chatsテーブルの変更を監視\n    watchTargetKey(this.dbKeyChats, (snapshot) => {\n      var dataArray = [];\n      snapshot.forEach(function(childSnapshot) {\n        var childData = childSnapshot.val();\n        dataArray.push(childData);\n      });\n\n      // 配列を逆順にする\n      dataArray.reverse();\n\n      this.chats = dataArray;\n    })\n  },\n  computed: {\n    isBgmPlaying() {\n      return this.$store.getters.getIsBgmPlaying\n    },\n    bgmVolume() {   \n      return this.$store.getters.getBgmVolume\n    },\n  },  \n  methods: {\n    /**\n     * 認証処理実行\n     */\n    execAuth() {\n      // Google認証\n      if (CONSTANTS.USE_GOOGLE_AUTH) {      \n        initAuthByGoogle();\n      // Twitter認証\n      } else if (CONSTANTS.USE_TWITTER_AUTH) {\n        initAuthByTwitter();\n      // 匿名認証\n      } else {\n        initAuthAnonymous(); \n      }\n    },\n    /**\n     * 音声をsubscribe\n     */\n    subscribe() {\n\n    },\n    /**\n     * DBにチャットデータ書き込み\n     */\n    onEnterKeyPressedAtChatTextBox(keyCode) {\n      const ENTER_KEY_CODE = 13\n      // 日本語入力中は終了\n      if (keyCode !== ENTER_KEY_CODE) {\n        return;\n      }\n\n      this.chat = {\n        name: this.$store.getters.getTwitterUser.name,\n        image: this.$store.getters.getTwitterUser.profileImageUrl,\n        text: this.inputtedTxt\n      }\n\n      // データを追加\n      pushDataToDB(this.dbKeyChats, this.chat);\n\n      this.inputtedTxt = \"\"\n    },\n    /**\n     * いいねボタン押下\n     */\n     onLikeButtonClick() {\n      const TEXT = \"がいいねを送りました！\"\n      this.chat = {\n        name: this.$store.getters.getTwitterUser.name,\n        image: this.$store.getters.getTwitterUser.profileImageUrl,\n        text: TEXT\n      }\n\n      // データを追加\n      pushDataToDB(this.dbKeyChats, this.chat);\n    },\n    /**\n     * 接続要求をFireBaseに送る\n     */\n    sendConReqToFB() {\n      if (this.hasSendReq) {\n        return\n      }\n\n      // データを追加\n      push(ref(getDatabase(), this.dbKeyConReqs), {\n        sesId: this.sessionId,\n      });\n\n      this.hasSendReq = true\n    },\n    /**\n     * 接続要求の承認をFireBaseに送る\n     */\n     sendConAckToFB(sesId) {\n      // データを追加\n      push(ref(getDatabase(), this.dbKeyConAcks), {\n        sesId: sesId,\n      });\n\n      this.hasSendReq = true\n    },\n\n    // スクロール位置を一番下に移動\n    scrollBottom() {\n      this.$nextTick(() => {\n        window.scrollTo(0, document.body.clientHeight)\n      })\n    },    \n    // 接続、音声通話参加開始\n    connectToVCRoom() {\n      joinToRoom(this.roomID, this.$refs.remoteMediaArea)\n    },\n    // ミュート\n    async muteMyVC() {\n      this.hasMuted = true;\n      this.hasUnMuted = false;\n      mute();\n    },\n    // アンミュート\n    async unmuteMyVC() {\n      this.hasMuted = false;\n      this.hasUnMuted = true;\n      unmute();\n    }          \n  },\n  watch: {\n    isBgmPlaying(newValue, oldValue) {\n      console.log(`isBgmPlaying: ${oldValue} -> ${newValue}`);\n\n      // 再生\n      if (newValue) {     \n        console.log(this.bgmVolume)        \n        this.$refs.audioElement.play();\n        this.$refs.audioElement.volume = this.bgmVolume;   \n        this.$refs.audioElement.loop = true\n      } else {     \n        this.$refs.audioElement.pause();        \n      }\n    },\n    bgmVolume(newValue, oldValue) {\n      console.log(`volumeChange: ${oldValue} -> ${newValue}`);\n\n      this.$refs.audioElement.volume = this.bgmVolume;        \n    }\n  },\n};\n\n</script>\n\n<!-- CSS-->\n<style>\n\n</style>\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}